From: <Saved by Blink>
Snapshot-Content-Location: http://groovy-lang.org/semantics.html#_if_else
Subject: The Apache Groovy programming language - Semantics
Date: Fri, 6 Aug 2021 02:57:33 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----"


------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: text/html
Content-ID: <frame-D7E10DD1156AFCC8B7933F9F86F7AE71@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://groovy-lang.org/semantics.html#_if_else

<!DOCTYPE html><!--[if lt IE 7]>      <html class=3D"no-js lt-ie9 lt-ie8 lt=
-ie7"> <![endif]--><!--[if IE 7]>         <html class=3D"no-js lt-ie9 lt-ie=
8"> <![endif]--><!--[if IE 8]>         <html class=3D"no-js lt-ie9"> <![end=
if]--><!--[if gt IE 8]><!--><html class=3D" js flexbox canvas canvastext we=
bgl no-touch geolocation postmessage websqldatabase indexeddb hashchange hi=
story draganddrop websockets rgba hsla multiplebgs backgroundsize borderima=
ge borderradius boxshadow textshadow opacity cssanimations csscolumns cssgr=
adients cssreflections csstransforms csstransforms3d csstransitions fontfac=
e generatedcontent video audio localstorage sessionstorage webworkers no-ap=
plicationcache svg inlinesvg smil svgclippaths"><!--<![endif]--><head><meta=
 http-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge"><meta name=
=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1"><title>Th=
e Apache Groovy programming language - Semantics</title><link href=3D"http:=
//groovy-lang.org/img/xfavicon.ico.pagespeed.ic.96ap4i0o5w.webp" type=3D"im=
age/x-ico" rel=3D"icon"><link rel=3D"stylesheet" type=3D"text/css" href=3D"=
http://groovy-lang.org/css/A.bootstrap.css+font-awesome.min.css,Mcc.TUcdx_d=
MQx.css.pagespeed.cf.lx7BtOI_OP.css"><link rel=3D"stylesheet" type=3D"text/=
css" href=3D"http://groovy-lang.org/css/A.style.css+docstyle.css,Mcc.B-ao3B=
XXcM.css.pagespeed.cf.gMlSLLlVQu.css"><link rel=3D"stylesheet" type=3D"text=
/css" href=3D"https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify=
.min.css">
</head><body style=3D"">
    <div id=3D"fork-me">
        <a href=3D"https://github.com/apache/groovy">
            <img style=3D"position: fixed; top: 20px; right: -58px; border:=
 0; z-index: 100; transform: rotate(45deg);" src=3D"http://groovy-lang.org/=
img/xhorizontal-github-ribbon.png.pagespeed.ic.y_r598YZtn.webp">
        </a>
    </div><div id=3D"st-container" class=3D"st-container st-effect-9">
        <nav class=3D"st-menu st-effect-9" id=3D"menu-12">
            <h2 class=3D"icon icon-lab">Socialize</h2><ul>
                <li>
                    <a href=3D"http://groovy-lang.org/mailing-lists.html" c=
lass=3D"icon"><span class=3D"fa fa-envelope"></span> Discuss on the mailing=
-list</a>
                </li><li>
                    <a href=3D"http://groovy-lang.org/groovy-weekly.html" c=
lass=3D"icon"><span class=3D"fa fa-envelope-o"></span> Groovy newsletter</a=
>
                </li><li>
                    <a href=3D"https://twitter.com/ApacheGroovy" class=3D"i=
con"><span class=3D"fa fa-twitter"></span> Groovy on Twitter</a>
                </li><li>
                    <a href=3D"http://groovy-lang.org/events.html" class=3D=
"icon"><span class=3D"fa fa-calendar"></span> Events and conferences</a>
                </li><li>
                    <a href=3D"https://github.com/apache/groovy" class=3D"i=
con"><span class=3D"fa fa-github"></span> Source code on GitHub</a>
                </li><li>
                    <a href=3D"http://groovy-lang.org/reporting-issues.html=
" class=3D"icon"><span class=3D"fa fa-bug"></span> Report issues in Jira</a=
>
                </li><li>
                    <a href=3D"http://stackoverflow.com/questions/tagged/gr=
oovy" class=3D"icon"><span class=3D"fa fa-stack-overflow"></span> Stack Ove=
rflow questions</a>
                </li><li>
                    <a href=3D"http://groovycommunity.com/" class=3D"icon">=
<span class=3D"fa fa-slack"></span> Slack Community</a>
                </li>
            </ul>
        </nav><div class=3D"st-pusher">
            <div class=3D"st-content">
                <div class=3D"st-content-inner">
                    <!--[if lt IE 7]>
                    <p class=3D"browsehappy">You are using an <strong>outda=
ted</strong> browser. Please <a href=3D"http://browsehappy.com/">upgrade yo=
ur browser</a> to improve your experience.</p>
                <![endif]--><div><div class=3D"navbar navbar-default navbar=
-static-top" role=3D"navigation">
                            <div class=3D"container">
                                <div class=3D"navbar-header">
                                    <button type=3D"button" class=3D"navbar=
-toggle" data-toggle=3D"collapse" data-target=3D".navbar-collapse">
                                        <span class=3D"sr-only"></span><spa=
n class=3D"icon-bar"></span><span class=3D"icon-bar"></span><span class=3D"=
icon-bar"></span>
                                    </button><a class=3D"navbar-brand" href=
=3D"http://groovy-lang.org/index.html">
                                        <i class=3D"fa fa-star"></i> Apache=
 Groovy
                                    </a>
                                </div><div class=3D"navbar-collapse collaps=
e">
                                    <ul class=3D"nav navbar-nav navbar-righ=
t">
                                        <li class=3D"active"><a href=3D"htt=
p://groovy-lang.org/learn.html">Learn</a></li><li class=3D""><a href=3D"htt=
p://groovy-lang.org/documentation.html">Documentation</a></li><li class=3D"=
"><a href=3D"https://groovy.apache.org/download.html">Download</a></li><li =
class=3D""><a href=3D"http://groovy-lang.org/support.html">Support</a></li>=
<li class=3D""><a href=3D"https://groovy.apache.org/">Contribute</a></li><l=
i class=3D""><a href=3D"http://groovy-lang.org/ecosystem.html">Ecosystem</a=
></li><li>
                                            <a data-effect=3D"st-effect-9" =
class=3D"st-trigger" href=3D"http://groovy-lang.org/semantics.html#">Social=
ize</a>
                                        </li><li class=3D"">
                                            <a href=3D"http://groovy-lang.o=
rg/search.html">
                                                <i class=3D"fa fa-search"><=
/i>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div><div id=3D"content" class=3D"page-1"><div cla=
ss=3D"row"><div class=3D"row-fluid"><div class=3D"col-lg-3"><ul class=3D"na=
v-sidebar"><li class=3D"active"><a href=3D"http://groovy-lang.org/semantics=
.html#"><strong>Table of contents</strong></a></li><div id=3D"toc" class=3D=
"toc2">

<ul class=3D"sectlevel1">
<li><a href=3D"http://groovy-lang.org/semantics.html#_statements">1. Statem=
ents</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#_variable_definition">=
1.1. Variable definition</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_variable_assignment">=
1.2. Variable assignment</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_multiple_assignment">=
1.2.1. Multiple assignment</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_overflow_and_underflo=
w">1.2.2. Overflow and Underflow</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_object_destructuring_=
with_multiple_assignment">1.2.3. Object destructuring with multiple assignm=
ent</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_control_structures">1=
.3. Control structures</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_conditional_structure=
s">1.3.1. Conditional structures</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#_if_else">if / else</a=
></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_switch_case">switch /=
 case</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_looping_structures">1=
.3.2. Looping structures</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#_classic_for_loop">Cla=
ssic for loop</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_enhanced_classic_java=
_style_for_loop">Enhanced classic Java-style for loop</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_multi_assignment_in_c=
ombination_with_for_loop">Multi-assignment in combination with for loop</a>=
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_for_in_loop">for in l=
oop</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_while_loop">while loo=
p</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_do_while_loop">do/whi=
le loop</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_exception_handling">1=
.3.3. Exception handling</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_try_catch_finally">1.=
3.4. try / catch / finally</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_multi_catch">1.3.5. M=
ulti-catch</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_arm_try_with_resource=
s">1.3.6. ARM Try with resources</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_power_assertion">1.4.=
 Power assertion</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_labeled_statements">1=
.5. Labeled statements</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_expressions">2. Expre=
ssions</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#gpath_expressions">2.1=
. GPath expressions</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_object_navigation">2.=
1.1. Object navigation</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_expression_deconstruc=
tion">2.1.2. Expression Deconstruction</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_gpath_for_xml_navigat=
ion">2.1.3. GPath for XML navigation</a></li>
</ul>
</li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_promotion_and_coercio=
n">3. Promotion and coercion</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#_number_promotion">3.1=
. Number promotion</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#closure-coercion">3.2.=
 Closure to type coercion</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_assigning_a_closure_t=
o_a_sam_type">3.2.1. Assigning a closure to a SAM type</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_calling_a_method_acce=
pting_a_sam_type_with_a_closure">3.2.2. Calling a method accepting a SAM ty=
pe with a closure</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_closure_to_arbitrary_=
type_coercion">3.2.3. Closure to arbitrary type coercion</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_map_to_type_coercion"=
>3.3. Map to type coercion</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_string_to_enum_coerci=
on">3.4. String to enum coercion</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_custom_type_coercion"=
>3.5. Custom type coercion</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_class_literals_vs_var=
iables_and_the_as_operator">3.6. Class literals vs variables and the as ope=
rator</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_optionality">4. Optio=
nality</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#_optional_parentheses"=
>4.1. Optional parentheses</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_optional_semicolons">=
4.2. Optional semicolons</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_optional_return_keywo=
rd">4.3. Optional return keyword</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_optional_public_keywo=
rd">4.4. Optional public keyword</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Groovy-Truth">5. The G=
roovy Truth</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#_boolean_expressions">=
5.1. Boolean expressions</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_collections_and_array=
s">5.2. Collections and Arrays</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_matchers">5.3. Matche=
rs</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_iterators_and_enumera=
tions">5.4. Iterators and Enumerations</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_maps">5.5. Maps</a></=
li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_strings">5.6. Strings=
</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_numbers">5.7. Numbers=
</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_object_references">5.=
8. Object References</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_customizing_the_truth=
_with_asboolean_methods">5.9. Customizing the truth with asBoolean() method=
s</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_typing">6. Typing</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#_optional_typing">6.1.=
 Optional typing</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#static-type-checking">=
6.2. Static type checking</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_the_code_typechecked_=
code_annotation">6.2.1. The <code>@TypeChecked</code> annotation</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#_activating_type_check=
ing_at_compile_time">Activating type checking at compile time</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_skipping_sections">Sk=
ipping sections</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_type_checking_assignm=
ents">6.2.2. Type checking assignments</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_list_and_map_construc=
tors">6.2.3. List and map constructors</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_method_resolution">6.=
2.4. Method resolution</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#type-inference">6.2.5.=
 Type inference</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#_principles">Principle=
s</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_variables_vs_fields_i=
n_type_inference">Variables vs fields in type inference</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_collection_literal_ty=
pe_inference">Collection literal type inference</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#section-lub">Least upp=
er bound</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_instanceof_inference"=
>instanceof inference</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#section-flow-typing">F=
low typing</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_advanced_type_inferen=
ce">Advanced type inference</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_closures_and_type_inf=
erence">6.2.6. Closures and type inference</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#_return_type_inference=
">Return type inference</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_parameter_type_infere=
nce">Parameter type inference</a>
<ul class=3D"sectlevel5">
<li><a href=3D"http://groovy-lang.org/semantics.html#_explicit_closure_para=
meters">Explicit closure parameters</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_parameters_inferred_f=
rom_single_abstract_method_types">Parameters inferred from single-abstract =
method types</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_the_code_closureparam=
s_code_annotation">The <code>@ClosureParams</code> annotation</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_code_delegatesto_code=
"><code>@DelegatesTo</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_static_compilation">6=
.3. Static compilation</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_dynamic_vs_static">6.=
3.1. Dynamic vs static</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#compilestatic-annotati=
on">6.3.2. The <code>@CompileStatic</code> annotation</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_key_benefits">6.3.3. =
Key benefits</a></li>
</ul>
</li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_type_checking_extensi=
ons">7. Type checking extensions</a>
<ul class=3D"sectlevel2">
<li><a href=3D"http://groovy-lang.org/semantics.html#_writing_a_type_checki=
ng_extension">7.1. Writing a type checking extension</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_towards_a_smarter_typ=
e_checker">7.1.1. Towards a smarter type checker</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Howdoesitwork">7.1.2. The extensions attribute</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_a_dsl_for_type_checki=
ng">7.1.3. A DSL for type checking</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-TheAPI">7.1.4. Type checking extensions API</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-AST">AST</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Events">Events</a></li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Workingwithextensions">7.1.5. Working with extensions</a>
<ul class=3D"sectlevel4">
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Supportclasses">Support classes</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Classnodes">Class nodes</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Helpingthetypechecker">Helping the type checker</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Throwinganerror">Throwing an error</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-isXXXExpression">isXXXExpression</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Virtualmethods">Virtual methods</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Scoping">Scoping</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions=
-Otherusefulmethods">Other useful methods</a></li>
</ul>
</li>
</ul>
</li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_advanced_type_checkin=
g_extensions">7.2. Advanced type checking extensions</a>
<ul class=3D"sectlevel3">
<li><a href=3D"http://groovy-lang.org/semantics.html#_precompiled_type_chec=
king_extensions">7.2.1. Precompiled type checking extensions</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_using_grab_in_a_type_=
checking_extension">7.2.2. Using @Grab in a type checking extension</a></li=
>
<li><a href=3D"http://groovy-lang.org/semantics.html#_sharing_or_packaging_=
type_checking_extensions">7.2.3. Sharing or packaging type checking extensi=
ons</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_global_type_checking_=
extensions">7.2.4. Global type checking extensions</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_type_checking_extensi=
ons_and_compilestatic">7.2.5. Type checking extensions and @CompileStatic</=
a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#mixed-mode">7.2.6. Mix=
ed mode compilation</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#ast-xform-as-extension=
">7.2.7. Transforming the AST in an extension</a></li>
<li><a href=3D"http://groovy-lang.org/semantics.html#_examples">7.2.8. Exam=
ples</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</ul></div><div class=3D"col-lg-8 col-lg-pull-0"><h1>Semantics</h1>
<div id=3D"preamble">
<div class=3D"sectionbody">
<div class=3D"paragraph">
<p>This chapter covers the semantics of the Groovy programming language.</p=
>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"_statements"><a class=3D"anchor" href=3D"http://groovy-lang.org/s=
emantics.html#_statements"></a>1. Statements</h2>
<div class=3D"sectionbody">
<div class=3D"sect2">
<h3 id=3D"_variable_definition"><a class=3D"anchor" href=3D"http://groovy-l=
ang.org/semantics.html#_variable_definition"></a>1.1. Variable definition</=
h3>
<div class=3D"paragraph">
<p>Variables can be defined using either their type (like <code>String</cod=
e>) or by using the keyword <code>def</code> (or <code>var</code>) followed=
 by a variable name:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> x
</span><span class=3D"kwd">def</span><span class=3D"pln"> y
</span><span class=3D"kwd">var</span><span class=3D"pln"> z</span></code></=
pre>
</div>
</div>
<div class=3D"paragraph">
<p><code>def</code> and <code>var</code> act as a type placeholder, i.e. a =
replacement for the type name,
when you do not want to give an explicit type.
It could be that you don=E2=80=99t care about the type at compile time
or are relying on type inference (with Groovy=E2=80=99s static nature).
It is mandatory for variable definitions to have a type or placeholder.
If left out, the type name will be deemed to refer to an existing variable =
(presumably declared earlier).
For scripts, undeclared variables are assumed to come from the Script bindi=
ng.
In other cases, you will get a missing property (dynamic Groovy) or compile=
 time error (static Groovy).
If you think of <code>def</code> and <code>var</code> as an alias of <code>=
Object</code>, you will understand in an instant.</p>
</div>
<div class=3D"paragraph">
<p>Variable definitions can provide an initial value,
in which case it=E2=80=99s like having a declaration and assignment (which =
we cover next) all in one.</p>
</div>
<div class=3D"admonitionblock note">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-note" title=3D"Note"></i>
</td>
<td class=3D"content">
Variable definition types can be refined by using generics, like in <code>L=
ist&lt;String&gt; names</code>.
To learn more about the generics support, please read the <a href=3D"http:/=
/groovy-lang.org/semantics.html#generics">generics section</a>.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_variable_assignment"><a class=3D"anchor" href=3D"http://groovy-l=
ang.org/semantics.html#_variable_assignment"></a>1.2. Variable assignment</=
h3>
<div class=3D"paragraph">
<p>You can assign values to variables for later use. Try the following:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">x </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">1=
</span><span class=3D"pln">
println x

x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"kwd">new</span><span class=3D"pln"> java</span><span class=3D"pun">.=
</span><span class=3D"pln">util</span><span class=3D"pun">.</span><span cla=
ss=3D"typ">Date</span><span class=3D"pun">()</span><span class=3D"pln">
println x

x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">-</span><span class=3D"lit">3.1499392</span><span class=3D"pln"=
>
println x

x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"kwd">false</span><span class=3D"pln">
println x

x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"str">"Hi"</span><span class=3D"pln">
println x</span></code></pre>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_multiple_assignment"><a class=3D"anchor" href=3D"http://groovy-l=
ang.org/semantics.html#_multiple_assignment"></a>1.2.1. Multiple assignment=
</h4>
<div class=3D"paragraph">
<p>Groovy supports multiple assignment, i.e. where multiple variables can b=
e assigned at once, e.g.:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">a<=
/span><span class=3D"pun">,</span><span class=3D"pln"> b</span><span class=
=3D"pun">,</span><span class=3D"pln"> c</span><span class=3D"pun">)</span><=
span class=3D"pln"> </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"pun">[</span><span class=3D"lit">10</span><span cl=
ass=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"lit">20</spa=
n><span class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"st=
r">'foo'</span><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> a </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>10</span><span class=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span>=
<span class=3D"pln"> b </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"lit">20</span><span class=3D"pln"> </span><=
span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> c </span><span cla=
ss=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"str">'fo=
o'</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>You can provide types as part of the declaration if you wish:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"kwd">in=
t</span><span class=3D"pln"> i</span><span class=3D"pun">,</span><span clas=
s=3D"pln"> </span><span class=3D"typ">String</span><span class=3D"pln"> j</=
span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D=
"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">[</span><sp=
an class=3D"lit">10</span><span class=3D"pun">,</span><span class=3D"pln"> =
</span><span class=3D"str">'foo'</span><span class=3D"pun">]</span><span cl=
ass=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> i </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>10</span><span class=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span>=
<span class=3D"pln"> j </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"str">'foo'</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>As well as used when declaring variables it also applies to existing var=
iables:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> nums </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">[</span><span class=3D"lit">1</span><span =
class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"lit">3</sp=
an><span class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"l=
it">5</span><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> a</span><span cla=
ss=3D"pun">,</span><span class=3D"pln"> b</span><span class=3D"pun">,</span=
><span class=3D"pln"> c
</span><span class=3D"pun">(</span><span class=3D"pln">a</span><span class=
=3D"pun">,</span><span class=3D"pln"> b</span><span class=3D"pun">,</span><=
span class=3D"pln"> c</span><span class=3D"pun">)</span><span class=3D"pln"=
> </span><span class=3D"pun">=3D</span><span class=3D"pln"> nums
</span><span class=3D"kwd">assert</span><span class=3D"pln"> a </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>1</span><span class=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span><=
span class=3D"pln"> b </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"lit">3</span><span class=3D"pln"> </span><s=
pan class=3D"pun">&amp;&amp;</span><span class=3D"pln"> c </span><span clas=
s=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</s=
pan></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The syntax works for arrays as well as lists, as well as methods that re=
turn either of these:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">_<=
/span><span class=3D"pun">,</span><span class=3D"pln"> month</span><span cl=
ass=3D"pun">,</span><span class=3D"pln"> year</span><span class=3D"pun">)</=
span><span class=3D"pln"> </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"str">"18th June 2009"</span><span class=3D"=
pun">.</span><span class=3D"pln">split</span><span class=3D"pun">()</span><=
span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"str">"In $month of $year"</span><span class=3D"pln"> </span><span c=
lass=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"str">'=
In June of 2009'</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_overflow_and_underflow"><a class=3D"anchor" href=3D"http://groov=
y-lang.org/semantics.html#_overflow_and_underflow"></a>1.2.2. Overflow and =
Underflow</h4>
<div class=3D"paragraph">
<p>If the left hand side has too many variables, excess ones are filled wit=
h null=E2=80=99s:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">a<=
/span><span class=3D"pun">,</span><span class=3D"pln"> b</span><span class=
=3D"pun">,</span><span class=3D"pln"> c</span><span class=3D"pun">)</span><=
span class=3D"pln"> </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"pun">[</span><span class=3D"lit">1</span><span cla=
ss=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"lit">2</span>=
<span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> a </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>1</span><span class=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span><=
span class=3D"pln"> b </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"lit">2</span><span class=3D"pln"> </span><s=
pan class=3D"pun">&amp;&amp;</span><span class=3D"pln"> c </span><span clas=
s=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"kwd">null=
</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>If the right hand side has too many variables, the extra ones are ignore=
d:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">a<=
/span><span class=3D"pun">,</span><span class=3D"pln"> b</span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D</span>=
<span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"lit"=
>1</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span clas=
s=3D"lit">2</span><span class=3D"pun">,</span><span class=3D"pln"> </span><=
span class=3D"lit">3</span><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> a </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>1</span><span class=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span><=
span class=3D"pln"> b </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"lit">2</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_object_destructuring_with_multiple_assignment"><a class=3D"ancho=
r" href=3D"http://groovy-lang.org/semantics.html#_object_destructuring_with=
_multiple_assignment"></a>1.2.3. Object destructuring with multiple assignm=
ent</h4>
<div class=3D"paragraph">
<p>In the section describing the various <a href=3D"http://groovy-lang.org/=
semantics.html#groovy-operators">Groovy operators</a>,
the case of the <a href=3D"http://groovy-lang.org/semantics.html#subscript-=
operator">subscript operator</a> has been covered,
explaining how you can override the <code>getAt()</code>/<code>putAt()</cod=
e> method.</p>
</div>
<div class=3D"paragraph">
<p>With this technique, we can combine multiple assignments and the subscri=
pt operator methods to implement <em>object destructuring</em>.</p>
</div>
<div class=3D"paragraph">
<p>Consider the following immutable <code>Coordinates</code> class, contain=
ing a pair of longitude and latitude doubles,
and notice our implementation of the <code>getAt()</code> method:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@Immutable</s=
pan><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Coordinates</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln">
    </span><span class=3D"kwd">double</span><span class=3D"pln"> latitude
    </span><span class=3D"kwd">double</span><span class=3D"pln"> longitude

    </span><span class=3D"kwd">double</span><span class=3D"pln"> getAt</spa=
n><span class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"=
pln"> idx</span><span class=3D"pun">)</span><span class=3D"pln"> </span><sp=
an class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"pln">idx </span><span class=3D"pun"=
>=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit">0</span><span=
 class=3D"pun">)</span><span class=3D"pln"> latitude
        </span><span class=3D"kwd">else</span><span class=3D"pln"> </span><=
span class=3D"kwd">if</span><span class=3D"pln"> </span><span class=3D"pun"=
>(</span><span class=3D"pln">idx </span><span class=3D"pun">=3D=3D</span><s=
pan class=3D"pln"> </span><span class=3D"lit">1</span><span class=3D"pun">)=
</span><span class=3D"pln"> longitude
        </span><span class=3D"kwd">else</span><span class=3D"pln"> </span><=
span class=3D"kwd">throw</span><span class=3D"pln"> </span><span class=3D"k=
wd">new</span><span class=3D"pln"> </span><span class=3D"typ">Exception</sp=
an><span class=3D"pun">(</span><span class=3D"str">"Wrong coordinate index,=
 use 0 or 1"</span><span class=3D"pun">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Now let=E2=80=99s instantiate this class and destructure its longitude a=
nd latitude:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> coordinates </span><span class=3D"pun">=3D</span><span cl=
ass=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </sp=
an><span class=3D"typ">Coordinates</span><span class=3D"pun">(</span><span =
class=3D"pln">latitude</span><span class=3D"pun">:</span><span class=3D"pln=
"> </span><span class=3D"lit">43.23</span><span class=3D"pun">,</span><span=
 class=3D"pln"> longitude</span><span class=3D"pun">:</span><span class=3D"=
pln"> </span><span class=3D"lit">3.67</span><span class=3D"pun">)</span><sp=
an class=3D"pln"> </span><i class=3D"conum" data-value=3D"1"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">

</span><span class=3D"kwd">def</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln">la</span><span class=3D"pun">,</span>=
<span class=3D"pln"> lo</span><span class=3D"pun">)</span><span class=3D"pl=
n"> </span><span class=3D"pun">=3D</span><span class=3D"pln"> coordinates  =
                                        </span><i class=3D"conum" data-valu=
e=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit">2</span><spa=
n class=3D"pun">)</span></b><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> la </span><spa=
n class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit=
">43.23</span><span class=3D"pln">                                         =
         </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"p=
un">(</span><span class=3D"lit">3</span><span class=3D"pun">)</span></b><sp=
an class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> lo </span><spa=
n class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit=
">3.67</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>we create an instance of the <code>Coordinates</code> class</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>then, we use a multiple assignment to get the individual longitude and =
latitude values</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>and we can finally assert their values.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_control_structures"><a class=3D"anchor" href=3D"http://groovy-la=
ng.org/semantics.html#_control_structures"></a>1.3. Control structures</h3>
<div class=3D"sect3">
<h4 id=3D"_conditional_structures"><a class=3D"anchor" href=3D"http://groov=
y-lang.org/semantics.html#_conditional_structures"></a>1.3.1. Conditional s=
tructures</h4>
<div class=3D"sect4">
<h5 id=3D"_if_else"><a class=3D"anchor" href=3D"http://groovy-lang.org/sema=
ntics.html#_if_else"></a>if / else</h5>
<div class=3D"paragraph">
<p>Groovy supports the usual if - else syntax from Java</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> x </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"kwd">false</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> y </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">false=
</span><span class=3D"pln">

</span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span class=
=3D"pun">(</span><span class=3D"pln"> </span><span class=3D"pun">!</span><s=
pan class=3D"pln">x </span><span class=3D"pun">)</span><span class=3D"pln">=
 </span><span class=3D"pun">{</span><span class=3D"pln">
    x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"kwd">true</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"kwd"=
>true</span><span class=3D"pln">

</span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span class=
=3D"pun">(</span><span class=3D"pln"> x </span><span class=3D"pun">)</span>=
<span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"=
>
    x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"kwd">false</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">else</span><span class=3D"pln"> </span><span class=3D"pun">{</span=
><span class=3D"pln">
    y </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"kwd">true</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> y</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Groovy also supports the normal Java "nested" if then else if syntax:</p=
>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">if</span><spa=
n class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln"> </=
span><span class=3D"pun">...</span><span class=3D"pln"> </span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><s=
pan class=3D"pln">
    </span><span class=3D"pun">...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">else</span><span class=3D"pln"> </span><span class=3D"kwd">if</spa=
n><span class=3D"pln"> </span><span class=3D"pun">(...)</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"pun">...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">else</span><span class=3D"pln"> </span><span class=3D"pun">{</span=
><span class=3D"pln">
    </span><span class=3D"pun">...</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_switch_case"><a class=3D"anchor" href=3D"http://groovy-lang.org/=
semantics.html#_switch_case"></a>switch / case</h5>
<div class=3D"paragraph">
<p>The switch statement in Groovy is backwards compatible with Java code; s=
o you can fall through cases sharing the same code for multiple matches.</p=
>
</div>
<div class=3D"paragraph">
<p>One difference though is that the Groovy switch statement can handle any=
 kind of switch value and different kinds of matching can be performed.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> x </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"lit">1.23</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> result </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str">=
""</span><span class=3D"pln">

</span><span class=3D"kwd">switch</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln"> x </span><span class=3D"pun">)</s=
pan><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"=
pln">
    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"str">"foo"</span><span class=3D"pun">:</span><span class=3D"pln">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"found foo"</span><span class=3D"pln">
        </span><span class=3D"com">// lets fall through</span><span class=
=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"str">"bar"</span><span class=3D"pun">:</span><span class=3D"pln">
        result </span><span class=3D"pun">+=3D</span><span class=3D"pln"> <=
/span><span class=3D"str">"bar"</span><span class=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"pun">[</span><span class=3D"lit">4</span><span class=3D"pun">,</s=
pan><span class=3D"pln"> </span><span class=3D"lit">5</span><span class=3D"=
pun">,</span><span class=3D"pln"> </span><span class=3D"lit">6</span><span =
class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"str">'inLi=
st'</span><span class=3D"pun">]:</span><span class=3D"pln">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"list"</span><span class=3D"pln">
        </span><span class=3D"kwd">break</span><span class=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"lit">12.</span><span class=3D"pun">.</span><span class=3D"lit">30=
</span><span class=3D"pun">:</span><span class=3D"pln">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"range"</span><span class=3D"pln">
        </span><span class=3D"kwd">break</span><span class=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"typ">Integer</span><span class=3D"pun">:</span><span class=3D"pln=
">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"integer"</span><span class=3D"pln">
        </span><span class=3D"kwd">break</span><span class=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"typ">Number</span><span class=3D"pun">:</span><span class=3D"pln"=
>
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"number"</span><span class=3D"pln">
        </span><span class=3D"kwd">break</span><span class=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"pun">~</span><span class=3D"str">/fo*/</span><span class=3D"pun">=
:</span><span class=3D"pln"> </span><span class=3D"com">// toString() repre=
sentation of x matches the pattern?</span><span class=3D"pln">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"foo regex"</span><span class=3D"pln">
        </span><span class=3D"kwd">break</span><span class=3D"pln">

    </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><span=
 class=3D"pun">{</span><span class=3D"pln"> it </span><span class=3D"pun">&=
lt;</span><span class=3D"pln"> </span><span class=3D"lit">0</span><span cla=
ss=3D"pln"> </span><span class=3D"pun">}:</span><span class=3D"pln"> </span=
><span class=3D"com">// or { x &lt; 0 }</span><span class=3D"pln">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"negative"</span><span class=3D"pln">
        </span><span class=3D"kwd">break</span><span class=3D"pln">

    </span><span class=3D"kwd">default</span><span class=3D"pun">:</span><s=
pan class=3D"pln">
        result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </=
span><span class=3D"str">"default"</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> result </span>=
<span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D=
"str">"number"</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Switch supports the following kinds of comparisons:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>Class case values match if the switch value is an instance of the class<=
/p>
</li>
<li>
<p>Regular expression case values match if the <code>toString()</code> repr=
esentation of the switch value matches the regex</p>
</li>
<li>
<p>Collection case values match if the switch value is contained in the col=
lection. This also includes ranges (since they are Lists)</p>
</li>
<li>
<p>Closure case values match if the calling the closure returns a result wh=
ich is true according to the <a href=3D"http://groovy-lang.org/semantics.ht=
ml#Groovy-Truth">Groovy truth</a></p>
</li>
<li>
<p>If none of the above are used then the case value matches if the case va=
lue equals the switch value</p>
</li>
</ul>
</div>
<div class=3D"admonitionblock note">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-note" title=3D"Note"></i>
</td>
<td class=3D"content">
When using a closure case value, the default <code>it</code> parameter is a=
ctually the switch value (in our example, variable <code>x</code>).
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_looping_structures"><a class=3D"anchor" href=3D"http://groovy-la=
ng.org/semantics.html#_looping_structures"></a>1.3.2. Looping structures</h=
4>
<div class=3D"sect4">
<h5 id=3D"_classic_for_loop"><a class=3D"anchor" href=3D"http://groovy-lang=
.org/semantics.html#_classic_for_loop"></a>Classic for loop</h5>
<div class=3D"paragraph">
<p>Groovy supports the standard Java / C for loop:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> message </span><span class=3D"pun">=3D</span><span cla=
ss=3D"pln"> </span><span class=3D"str">''</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln"> i </sp=
an><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D=
"lit">0</span><span class=3D"pun">;</span><span class=3D"pln"> i </span><sp=
an class=3D"pun">&lt;</span><span class=3D"pln"> </span><span class=3D"lit"=
>5</span><span class=3D"pun">;</span><span class=3D"pln"> i</span><span cla=
ss=3D"pun">++)</span><span class=3D"pln"> </span><span class=3D"pun">{</spa=
n><span class=3D"pln">
    message </span><span class=3D"pun">+=3D</span><span class=3D"pln"> </sp=
an><span class=3D"str">'Hi '</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> message </span=
><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=
=3D"str">'Hi Hi Hi Hi Hi '</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_enhanced_classic_java_style_for_loop"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#_enhanced_classic_java_style_for_=
loop"></a>Enhanced classic Java-style for loop</h5>
<div class=3D"paragraph">
<p>The more elaborate form of Java=E2=80=99s classic for loop with comma-se=
parate expressions
is now supported. Example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> facts </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> </span><span class=3D"pun">[]</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> count </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">5=
</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln"> fact <=
/span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=
=3D"lit">1</span><span class=3D"pun">,</span><span class=3D"pln"> i </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"li=
t">1</span><span class=3D"pun">;</span><span class=3D"pln"> i </span><span =
class=3D"pun">&lt;=3D</span><span class=3D"pln"> count</span><span class=3D=
"pun">;</span><span class=3D"pln"> i</span><span class=3D"pun">++,</span><s=
pan class=3D"pln"> fact </span><span class=3D"pun">*=3D</span><span class=
=3D"pln"> i</span><span class=3D"pun">)</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
    facts </span><span class=3D"pun">&lt;&lt;</span><span class=3D"pln"> fa=
ct
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> facts </span><=
span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"=
pun">[</span><span class=3D"lit">1</span><span class=3D"pun">,</span><span =
class=3D"pln"> </span><span class=3D"lit">2</span><span class=3D"pun">,</sp=
an><span class=3D"pln"> </span><span class=3D"lit">6</span><span class=3D"p=
un">,</span><span class=3D"pln"> </span><span class=3D"lit">24</span><span =
class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"lit">120</=
span><span class=3D"pun">]</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_multi_assignment_in_combination_with_for_loop"><a class=3D"ancho=
r" href=3D"http://groovy-lang.org/semantics.html#_multi_assignment_in_combi=
nation_with_for_loop"></a>Multi-assignment in combination with for loop</h5=
>
<div class=3D"paragraph">
<p>Groovy has supported multi-assignment statements since Groovy 1.6:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"com">// multi-assi=
gnment with types</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"pln"> x</=
span><span class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D=
"kwd">int</span><span class=3D"pln"> y</span><span class=3D"pun">)</span><s=
pan class=3D"pln"> </span><span class=3D"pun">=3D</span><span class=3D"pln"=
> </span><span class=3D"pun">[</span><span class=3D"str">'foo'</span><span =
class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"lit">42</s=
pan><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"str">"$x $y"</span><span class=3D"pln"> </span><span class=3D"pun">=
=3D=3D</span><span class=3D"pln"> </span><span class=3D"str">'foo 42'</span=
></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>These can now appear in for loops:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"com">// multi-assi=
gnment goes loopy</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> baNums </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">=
[]</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"kwd">def</span><span class=3D"pln"> </span=
><span class=3D"pun">(</span><span class=3D"typ">String</span><span class=
=3D"pln"> u</span><span class=3D"pun">,</span><span class=3D"pln"> </span><=
span class=3D"kwd">int</span><span class=3D"pln"> v</span><span class=3D"pu=
n">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D</span><span =
class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"str">'bar'=
</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span class=
=3D"lit">42</span><span class=3D"pun">];</span><span class=3D"pln"> v </spa=
n><span class=3D"pun">&lt;</span><span class=3D"pln"> </span><span class=3D=
"lit">45</span><span class=3D"pun">;</span><span class=3D"pln"> u</span><sp=
an class=3D"pun">++,</span><span class=3D"pln"> v</span><span class=3D"pun"=
>++)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span cl=
ass=3D"pln">
    baNums </span><span class=3D"pun">&lt;&lt;</span><span class=3D"pln"> <=
/span><span class=3D"str">"$u $v"</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> baNums </span>=
<span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D=
"pun">[</span><span class=3D"str">'bar 42'</span><span class=3D"pun">,</spa=
n><span class=3D"pln"> </span><span class=3D"str">'bas 43'</span><span clas=
s=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"str">'bat 44'<=
/span><span class=3D"pun">]</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_for_in_loop"><a class=3D"anchor" href=3D"http://groovy-lang.org/=
semantics.html#_for_in_loop"></a>for in loop</h5>
<div class=3D"paragraph">
<p>The for loop in Groovy is much simpler and works with any kind of array,=
 collection, Map, etc.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"com">// iterate ov=
er a range</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> x </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">0</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln"> i </span><span class=3D"kwd">in</spa=
n><span class=3D"pln"> </span><span class=3D"lit">0.</span><span class=3D"p=
un">.</span><span class=3D"lit">9</span><span class=3D"pln"> </span><span c=
lass=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</spa=
n><span class=3D"pln">
    x </span><span class=3D"pun">+=3D</span><span class=3D"pln"> i
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>45</span><span class=3D"pln">

</span><span class=3D"com">// iterate over a list</span><span class=3D"pln"=
>
x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"lit">0</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln"> i </span><span class=3D"kwd">in</spa=
n><span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"li=
t">0</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span cl=
ass=3D"lit">1</span><span class=3D"pun">,</span><span class=3D"pln"> </span=
><span class=3D"lit">2</span><span class=3D"pun">,</span><span class=3D"pln=
"> </span><span class=3D"lit">3</span><span class=3D"pun">,</span><span cla=
ss=3D"pln"> </span><span class=3D"lit">4</span><span class=3D"pun">]</span>=
<span class=3D"pln"> </span><span class=3D"pun">)</span><span class=3D"pln"=
> </span><span class=3D"pun">{</span><span class=3D"pln">
    x </span><span class=3D"pun">+=3D</span><span class=3D"pln"> i
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>10</span><span class=3D"pln">

</span><span class=3D"com">// iterate over an array</span><span class=3D"pl=
n">
</span><span class=3D"kwd">def</span><span class=3D"pln"> array </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(=
</span><span class=3D"lit">0.</span><span class=3D"pun">.</span><span class=
=3D"lit">4</span><span class=3D"pun">).</span><span class=3D"pln">toArray</=
span><span class=3D"pun">()</span><span class=3D"pln">
x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"lit">0</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln"> i </span><span class=3D"kwd">in</spa=
n><span class=3D"pln"> array </span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    x </span><span class=3D"pun">+=3D</span><span class=3D"pln"> i
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>10</span><span class=3D"pln">

</span><span class=3D"com">// iterate over a map</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> map </span><span =
class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">[</=
span><span class=3D"str">'abc'</span><span class=3D"pun">:</span><span clas=
s=3D"lit">1</span><span class=3D"pun">,</span><span class=3D"pln"> </span><=
span class=3D"str">'def'</span><span class=3D"pun">:</span><span class=3D"l=
it">2</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span c=
lass=3D"str">'xyz'</span><span class=3D"pun">:</span><span class=3D"lit">3<=
/span><span class=3D"pun">]</span><span class=3D"pln">
x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"lit">0</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln"> e </span><span class=3D"kwd">in</spa=
n><span class=3D"pln"> map </span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    x </span><span class=3D"pun">+=3D</span><span class=3D"pln"> e</span><s=
pan class=3D"pun">.</span><span class=3D"pln">value
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>6</span><span class=3D"pln">

</span><span class=3D"com">// iterate over values in a map</span><span clas=
s=3D"pln">
x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"lit">0</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln"> v </span><span class=3D"kwd">in</spa=
n><span class=3D"pln"> map</span><span class=3D"pun">.</span><span class=3D=
"pln">values</span><span class=3D"pun">()</span><span class=3D"pln"> </span=
><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">
    x </span><span class=3D"pun">+=3D</span><span class=3D"pln"> v
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>6</span><span class=3D"pln">

</span><span class=3D"com">// iterate over the characters in a string</span=
><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> text </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str">"a=
bc"</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> list </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">[]=
</span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"pln">c </span><span class=3D"kwd">in</span=
><span class=3D"pln"> text</span><span class=3D"pun">)</span><span class=3D=
"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">add</span><s=
pan class=3D"pun">(</span><span class=3D"pln">c</span><span class=3D"pun">)=
</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> list </span><s=
pan class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"p=
un">[</span><span class=3D"str">"a"</span><span class=3D"pun">,</span><span=
 class=3D"pln"> </span><span class=3D"str">"b"</span><span class=3D"pun">,<=
/span><span class=3D"pln"> </span><span class=3D"str">"c"</span><span class=
=3D"pun">]</span></code></pre>
</div>
</div>
<div class=3D"admonitionblock note">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-note" title=3D"Note"></i>
</td>
<td class=3D"content">
Groovy also supports the Java colon variation with colons: <code>for (char =
c : text) {}</code>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_while_loop"><a class=3D"anchor" href=3D"http://groovy-lang.org/s=
emantics.html#_while_loop"></a>while loop</h5>
<div class=3D"paragraph">
<p>Groovy supports the usual while {=E2=80=A6=E2=80=8B} loops like Java:</p=
>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> x </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"lit">0</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> y </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</sp=
an><span class=3D"pln">

</span><span class=3D"kwd">while</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">(</span><span class=3D"pln"> y</span><span class=3D"pun">--</sp=
an><span class=3D"pln"> </span><span class=3D"pun">&gt;</span><span class=
=3D"pln"> </span><span class=3D"lit">0</span><span class=3D"pln"> </span><s=
pan class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{=
</span><span class=3D"pln">
    x</span><span class=3D"pun">++</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> x </span><span=
 class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit"=
>5</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_do_while_loop"><a class=3D"anchor" href=3D"http://groovy-lang.or=
g/semantics.html#_do_while_loop"></a>do/while loop</h5>
<div class=3D"paragraph">
<p>Java=E2=80=99s class do/while loop is now supported. Example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"com">// classic Ja=
va-style do..while loop</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> count </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">5=
</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> fact </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">1<=
/span><span class=3D"pln">
</span><span class=3D"kwd">do</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
    fact </span><span class=3D"pun">*=3D</span><span class=3D"pln"> count</=
span><span class=3D"pun">--</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">while</span><span class=3D"pun">(</span><span class=3D"pln">count =
</span><span class=3D"pun">&gt;</span><span class=3D"pln"> </span><span cla=
ss=3D"lit">1</span><span class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> fact </span><s=
pan class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"l=
it">120</span></code></pre>
</div>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_exception_handling"><a class=3D"anchor" href=3D"http://groovy-la=
ng.org/semantics.html#_exception_handling"></a>1.3.3. Exception handling</h=
4>
<div class=3D"paragraph">
<p>Exception handling is the same as Java.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_try_catch_finally"><a class=3D"anchor" href=3D"http://groovy-lan=
g.org/semantics.html#_try_catch_finally"></a>1.3.4. try / catch / finally</=
h4>
<div class=3D"paragraph">
<p>You can specify a complete <code>try-catch-finally</code>, a <code>try-c=
atch</code>, or a <code>try-finally</code> set of blocks.</p>
</div>
<div class=3D"admonitionblock note">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-note" title=3D"Note"></i>
</td>
<td class=3D"content">
Braces are required around each block=E2=80=99s body.
</td>
</tr>
</tbody></table>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">try</span><sp=
an class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"str">'moo'</span><span class=3D"pun">.</span><spa=
n class=3D"pln">toLong</span><span class=3D"pun">()</span><span class=3D"pl=
n">   </span><span class=3D"com">// this will generate an exception</span><=
span class=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><sp=
an class=3D"kwd">false</span><span class=3D"pln">     </span><span class=3D=
"com">// asserting that this point should never be reached</span><span clas=
s=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">catch</span><span class=3D"pln"> </span><span class=3D"pun">(</spa=
n><span class=3D"pln"> e </span><span class=3D"pun">)</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> e </span><=
span class=3D"kwd">in</span><span class=3D"pln"> </span><span class=3D"typ"=
>NumberFormatException</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>We can put code within a 'finally' clause following a matching 'try' cla=
use, so that regardless of whether the code in the 'try' clause throws an e=
xception, the code in the finally clause will always execute:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> z
</span><span class=3D"kwd">try</span><span class=3D"pln"> </span><span clas=
s=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> i </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">7=
</span><span class=3D"pun">,</span><span class=3D"pln"> j </span><span clas=
s=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">0</span=
><span class=3D"pln">
    </span><span class=3D"kwd">try</span><span class=3D"pln"> </span><span =
class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"kwd">def</span><span class=3D"pln"> k </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> i </span><span class=3D"=
pun">/</span><span class=3D"pln"> j
        </span><span class=3D"kwd">assert</span><span class=3D"pln"> </span=
><span class=3D"kwd">false</span><span class=3D"pln">        </span><span c=
lass=3D"com">//never reached due to Exception in previous line</span><span =
class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln"> </span><span cl=
ass=3D"kwd">finally</span><span class=3D"pln"> </span><span class=3D"pun">{=
</span><span class=3D"pln">
        z </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span>=
<span class=3D"str">'reached here'</span><span class=3D"pln">  </span><span=
 class=3D"com">//always executed even if Exception thrown</span><span class=
=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">catch</span><span class=3D"pln"> </span><span class=3D"pun">(</spa=
n><span class=3D"pln"> e </span><span class=3D"pun">)</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> e </span><=
span class=3D"kwd">in</span><span class=3D"pln"> </span><span class=3D"typ"=
>ArithmeticException</span><span class=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> z </span><=
span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"=
str">'reached here'</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_multi_catch"><a class=3D"anchor" href=3D"http://groovy-lang.org/=
semantics.html#_multi_catch"></a>1.3.5. Multi-catch</h4>
<div class=3D"paragraph">
<p>With the multi catch block (since Groovy 2.0), we=E2=80=99re able to def=
ine several exceptions to be catch and treated by the same catch block:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">try</span><sp=
an class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"com">/* ... */</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">catch</span><span class=3D"pln"> </span><span class=3D"pun">(</spa=
n><span class=3D"pln"> </span><span class=3D"typ">IOException</span><span c=
lass=3D"pln"> </span><span class=3D"pun">|</span><span class=3D"pln"> </spa=
n><span class=3D"typ">NullPointerException</span><span class=3D"pln"> e </s=
pan><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln">
    </span><span class=3D"com">/* one block to handle 2 exceptions */</span=
><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_arm_try_with_resources"><a class=3D"anchor" href=3D"http://groov=
y-lang.org/semantics.html#_arm_try_with_resources"></a>1.3.6. ARM Try with =
resources</h4>
<div class=3D"paragraph">
<p>Groovy often provides better alternatives to Java 7=E2=80=99s <code>try<=
/code>-with-resources statement for Automatic Resource Management (ARM).
That syntax is now supported for Java programmers migrating to Groovy and s=
till wanting to use the old style:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">FromResource</span><span cla=
ss=3D"pln"> </span><span class=3D"kwd">extends</span><span class=3D"pln"> <=
/span><span class=3D"typ">ByteArrayInputStream</span><span class=3D"pln"> <=
/span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"lit">@Override</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> close</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"kwd=
">throws</span><span class=3D"pln"> </span><span class=3D"typ">IOException<=
/span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
        </span><span class=3D"kwd">super</span><span class=3D"pun">.</span>=
<span class=3D"pln">close</span><span class=3D"pun">()</span><span class=3D=
"pln">
        println </span><span class=3D"str">"FromResource closing"</span><sp=
an class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">

    </span><span class=3D"typ">FromResource</span><span class=3D"pun">(</sp=
an><span class=3D"typ">String</span><span class=3D"pln"> input</span><span =
class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</sp=
an><span class=3D"pln">
        </span><span class=3D"kwd">super</span><span class=3D"pun">(</span>=
<span class=3D"pln">input</span><span class=3D"pun">.</span><span class=3D"=
pln">toLowerCase</span><span class=3D"pun">().</span><span class=3D"pln">by=
tes</span><span class=3D"pun">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">ToResource</span><span class=3D"pln"> </span><span class=3D"kwd=
">extends</span><span class=3D"pln"> </span><span class=3D"typ">ByteArrayOu=
tputStream</span><span class=3D"pln"> </span><span class=3D"pun">{</span><s=
pan class=3D"pln">
    </span><span class=3D"lit">@Override</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> close</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"kwd=
">throws</span><span class=3D"pln"> </span><span class=3D"typ">IOException<=
/span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
        </span><span class=3D"kwd">super</span><span class=3D"pun">.</span>=
<span class=3D"pln">close</span><span class=3D"pun">()</span><span class=3D=
"pln">
        println </span><span class=3D"str">"ToResource closing"</span><span=
 class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">def</span><span class=3D"pln"> wrestle</span><sp=
an class=3D"pun">(</span><span class=3D"pln">s</span><span class=3D"pun">)<=
/span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
    </span><span class=3D"kwd">try</span><span class=3D"pln"> </span><span =
class=3D"pun">(</span><span class=3D"pln">
            </span><span class=3D"typ">FromResource</span><span class=3D"pl=
n"> </span><span class=3D"kwd">from</span><span class=3D"pln"> </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">ne=
w</span><span class=3D"pln"> </span><span class=3D"typ">FromResource</span>=
<span class=3D"pun">(</span><span class=3D"pln">s</span><span class=3D"pun"=
>)</span><span class=3D"pln">
            </span><span class=3D"typ">ToResource</span><span class=3D"pln"=
> to </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span=
 class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">To=
Resource</span><span class=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{</span><span class=3D"pln">
        to </span><span class=3D"pun">&lt;&lt;</span><span class=3D"pln"> <=
/span><span class=3D"kwd">from</span><span class=3D"pln">
        </span><span class=3D"kwd">return</span><span class=3D"pln"> to</sp=
an><span class=3D"pun">.</span><span class=3D"pln">toString</span><span cla=
ss=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">def</span><span class=3D"pln"> wrestle2</span><s=
pan class=3D"pun">(</span><span class=3D"pln">s</span><span class=3D"pun">)=
</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
    </span><span class=3D"typ">FromResource</span><span class=3D"pln"> </sp=
an><span class=3D"kwd">from</span><span class=3D"pln"> </span><span class=
=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</spa=
n><span class=3D"pln"> </span><span class=3D"typ">FromResource</span><span =
class=3D"pun">(</span><span class=3D"pln">s</span><span class=3D"pun">)</sp=
an><span class=3D"pln">
    </span><span class=3D"kwd">try</span><span class=3D"pln"> </span><span =
class=3D"pun">(</span><span class=3D"kwd">from</span><span class=3D"pun">;<=
/span><span class=3D"pln"> </span><span class=3D"typ">ToResource</span><spa=
n class=3D"pln"> to </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span c=
lass=3D"typ">ToResource</span><span class=3D"pun">())</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> </span><span =
class=3D"com">// Enhanced try-with-resources in Java 9+</span><span class=
=3D"pln">
        to </span><span class=3D"pun">&lt;&lt;</span><span class=3D"pln"> <=
/span><span class=3D"kwd">from</span><span class=3D"pln">
        </span><span class=3D"kwd">return</span><span class=3D"pln"> to</sp=
an><span class=3D"pun">.</span><span class=3D"pln">toString</span><span cla=
ss=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> wrestle</span>=
<span class=3D"pun">(</span><span class=3D"str">"ARM was here!"</span><span=
 class=3D"pun">).</span><span class=3D"pln">contains</span><span class=3D"p=
un">(</span><span class=3D"str">'arm'</span><span class=3D"pun">)</span><sp=
an class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> wrestle2</span=
><span class=3D"pun">(</span><span class=3D"str">"ARM was here!"</span><spa=
n class=3D"pun">).</span><span class=3D"pln">contains</span><span class=3D"=
pun">(</span><span class=3D"str">'arm'</span><span class=3D"pun">)</span></=
code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Which yields the following output:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre>ToResource closing
FromResource closing
ToResource closing
FromResource closing</pre>
</div>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_power_assertion"><a class=3D"anchor" href=3D"http://groovy-lang.=
org/semantics.html#_power_assertion"></a>1.4. Power assertion</h3>
<div class=3D"paragraph">
<p>Unlike Java with which Groovy shares the <code>assert</code> keyword, th=
e latter in Groovy behaves very differently. First of all,
an assertion in Groovy is always executed, independently of the <code>-ea</=
code> flag of the JVM. It makes this a first class choice
for unit tests. The notion of "power asserts" is directly related to how th=
e Groovy <code>assert</code> behaves.</p>
</div>
<div class=3D"paragraph">
<p>A power assertion is decomposed into 3 parts:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre>assert [left expression] =3D=3D [right expression] : (optional message=
)</pre>
</div>
</div>
<div class=3D"paragraph">
<p>The result of the assertion is very different from what you would get in=
 Java. If the assertion is true, then nothing
happens. If the assertion is false, then it provides a visual representatio=
n of the value of each sub-expressions of the
expression being asserted. For example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"lit">1</span><span class=3D"pun"=
>+</span><span class=3D"lit">1</span><span class=3D"pln"> </span><span clas=
s=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit">3</s=
pan></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Will yield:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre>Caught: Assertion failed:

assert 1+1 =3D=3D 3
        |  |
        2  false</pre>
</div>
</div>
<div class=3D"paragraph">
<p>Power asserts become very interesting when the expressions are more comp=
lex, like in the next example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> x </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"lit">2</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> y </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">7</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> z </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> calc </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">{<=
/span><span class=3D"pln"> a</span><span class=3D"pun">,</span><span class=
=3D"pln">b </span><span class=3D"pun">-&gt;</span><span class=3D"pln"> a</s=
pan><span class=3D"pun">*</span><span class=3D"pln">b</span><span class=3D"=
pun">+</span><span class=3D"lit">1</span><span class=3D"pln"> </span><span =
class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> calc</span><sp=
an class=3D"pun">(</span><span class=3D"pln">x</span><span class=3D"pun">,<=
/span><span class=3D"pln">y</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </sp=
an><span class=3D"pun">[</span><span class=3D"pln">x</span><span class=3D"p=
un">,</span><span class=3D"pln">z</span><span class=3D"pun">].</span><span =
class=3D"pln">sum</span><span class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Which will print the value for each sub-expression:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> calc</span><span class=3D"pun">(</span><span class=3D"=
pln">x</span><span class=3D"pun">,</span><span class=3D"pln">y</span><span =
class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=
=3D</span><span class=3D"pln"> </span><span class=3D"pun">[</span><span cla=
ss=3D"pln">x</span><span class=3D"pun">,</span><span class=3D"pln">z</span>=
<span class=3D"pun">].</span><span class=3D"pln">sum</span><span class=3D"p=
un">()</span><span class=3D"pln">
       </span><span class=3D"pun">|</span><span class=3D"pln">    </span><s=
pan class=3D"pun">|</span><span class=3D"pln"> </span><span class=3D"pun">|=
</span><span class=3D"pln">  </span><span class=3D"pun">|</span><span class=
=3D"pln">   </span><span class=3D"pun">|</span><span class=3D"pln"> </span>=
<span class=3D"pun">|</span><span class=3D"pln">  </span><span class=3D"pun=
">|</span><span class=3D"pln">
       </span><span class=3D"lit">15</span><span class=3D"pln">   </span><s=
pan class=3D"lit">2</span><span class=3D"pln"> </span><span class=3D"lit">7=
</span><span class=3D"pln">  </span><span class=3D"pun">|</span><span class=
=3D"pln">   </span><span class=3D"lit">2</span><span class=3D"pln"> </span>=
<span class=3D"lit">5</span><span class=3D"pln">  </span><span class=3D"lit=
">7</span><span class=3D"pln">
                 </span><span class=3D"kwd">false</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>In case you don=E2=80=99t want a pretty printed error message like above=
, you can fallback to a custom error message by
changing the optional message part of the assertion, like in this example:<=
/p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> x </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"lit">2</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> y </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">7</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> z </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> calc </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">{<=
/span><span class=3D"pln"> a</span><span class=3D"pun">,</span><span class=
=3D"pln">b </span><span class=3D"pun">-&gt;</span><span class=3D"pln"> a</s=
pan><span class=3D"pun">*</span><span class=3D"pln">b</span><span class=3D"=
pun">+</span><span class=3D"lit">1</span><span class=3D"pln"> </span><span =
class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> calc</span><sp=
an class=3D"pun">(</span><span class=3D"pln">x</span><span class=3D"pun">,<=
/span><span class=3D"pln">y</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> z</s=
pan><span class=3D"pun">*</span><span class=3D"pln">z </span><span class=3D=
"pun">:</span><span class=3D"pln"> </span><span class=3D"str">'Incorrect co=
mputation result'</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Which will print the following error message:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Incorrect</sp=
an><span class=3D"pln"> computation result</span><span class=3D"pun">.</spa=
n><span class=3D"pln"> </span><span class=3D"typ">Expression</span><span cl=
ass=3D"pun">:</span><span class=3D"pln"> </span><span class=3D"pun">(</span=
><span class=3D"pln">calc</span><span class=3D"pun">.</span><span class=3D"=
pln">call</span><span class=3D"pun">(</span><span class=3D"pln">x</span><sp=
an class=3D"pun">,</span><span class=3D"pln"> y</span><span class=3D"pun">)=
</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span c=
lass=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">z </sp=
an><span class=3D"pun">*</span><span class=3D"pln"> z</span><span class=3D"=
pun">)).</span><span class=3D"pln"> </span><span class=3D"typ">Values</span=
><span class=3D"pun">:</span><span class=3D"pln"> z </span><span class=3D"p=
un">=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</span><span=
 class=3D"pun">,</span><span class=3D"pln"> z </span><span class=3D"pun">=
=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</span></code></=
pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_labeled_statements"><a class=3D"anchor" href=3D"http://groovy-la=
ng.org/semantics.html#_labeled_statements"></a>1.5. Labeled statements</h3>
<div class=3D"paragraph">
<p>Any statement can be associated with a label. Labels do not impact the s=
emantics of the code and can be used to make
the code easier to read like in the following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">given</span><=
span class=3D"pun">:</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> x </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">1=
</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> y </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">2=
</span><span class=3D"pln">
</span><span class=3D"kwd">when</span><span class=3D"pun">:</span><span cla=
ss=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> z </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> x</span><span class=3D"pun">=
+</span><span class=3D"pln">y
</span><span class=3D"kwd">then</span><span class=3D"pun">:</span><span cla=
ss=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> z </span><=
span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"=
lit">3</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Despite not changing the semantics of the labelled statement, it is poss=
ible to use labels in the <code>break</code> instruction
as a target for jump, as in the next example. However, even if this is allo=
wed, this coding style is in general considered
a bad practice:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">for</span><sp=
an class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"kwd">in=
t</span><span class=3D"pln"> i</span><span class=3D"pun">=3D</span><span cl=
ass=3D"lit">0</span><span class=3D"pun">;</span><span class=3D"pln">i</span=
><span class=3D"pun">&lt;</span><span class=3D"lit">10</span><span class=3D=
"pun">;</span><span class=3D"pln">i</span><span class=3D"pun">++)</span><sp=
an class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span =
class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln"> j<=
/span><span class=3D"pun">=3D</span><span class=3D"lit">0</span><span class=
=3D"pun">;</span><span class=3D"pln">j</span><span class=3D"pun">&lt;</span=
><span class=3D"pln">i</span><span class=3D"pun">;</span><span class=3D"pln=
">j</span><span class=3D"pun">++)</span><span class=3D"pln"> </span><span c=
lass=3D"pun">{</span><span class=3D"pln">
        println </span><span class=3D"str">"j=3D$j"</span><span class=3D"pl=
n">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"pln">j </span><span class=3D"pun">=
=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit">5</span><span =
class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</sp=
an><span class=3D"pln">
            </span><span class=3D"kwd">break</span><span class=3D"pln"> </s=
pan><span class=3D"kwd">exit</span><span class=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"kwd">exit</span><span class=3D"pun">:</span><span=
 class=3D"pln"> println </span><span class=3D"str">"i=3D$i"</span><span cla=
ss=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>It is important to understand that by default labels have no impact on t=
he semantics of the code, however they belong to the abstract
syntax tree (AST) so it is possible for an AST transformation to use that i=
nformation to perform transformations over
the code, hence leading to different semantics. This is in particular what =
the <a href=3D"http://spockframework.github.io/spock/docs/current/index.htm=
l">Spock Framework</a>
does to make testing easier.</p>
</div>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"_expressions"><a class=3D"anchor" href=3D"http://groovy-lang.org/=
semantics.html#_expressions"></a>2. Expressions</h2>
<div class=3D"sectionbody">
<div class=3D"paragraph">
<p>(TBD)</p>
</div>
<div class=3D"sect2">
<h3 id=3D"gpath_expressions"><a class=3D"anchor" href=3D"http://groovy-lang=
.org/semantics.html#gpath_expressions"></a>2.1. GPath expressions</h3>
<div class=3D"paragraph">
<p><code>GPath</code> is a path expression language integrated into Groovy =
which allows parts of nested structured data to be identified. In this
sense, it has similar aims and scope as XPath does for XML.  GPath is often=
 used in the context of processing XML, but it really applies
to any object graph.  Where XPath uses a filesystem-like path notation, a t=
ree hierarchy with parts separated by a slash <code>/</code>, GPath <strong=
>use a
dot-object notation</strong> to perform object navigation.</p>
</div>
<div class=3D"paragraph">
<p>As an example, you can specify a path to an object or element of interes=
t:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>a.b.c</code> =E2=86=92 for XML, yields all the <code>c</code> elem=
ents inside <code>b</code> inside <code>a</code></p>
</li>
<li>
<p><code>a.b.c</code> =E2=86=92 for POJOs, yields the <code>c</code> proper=
ties for all the <code>b</code> properties of <code>a</code> (sort of like =
<code>a.getB().getC()</code> in JavaBeans)</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>In both cases, the GPath expression can be viewed as a query on an objec=
t graph.  For POJOs, the object graph is most often built by the
program being written through object instantiation and composition; for XML=
 processing, the object graph is the result of <code>parsing</code>
the XML text, most often with classes like XmlParser or XmlSlurper. See <a =
href=3D"https://docs.groovy-lang.org/latest/html/documentation/xml-userguid=
e.html#Processing%20XML">Processing XML</a>
for more in-depth details on consuming XML in Groovy.</p>
</div>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
<div class=3D"paragraph">
<p>When querying the object graph generated from XmlParser or XmlSlurper, a=
 GPath expression can refer to attributes defined on elements with
the <code>@</code> notation:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>a["@href"]</code> =E2=86=92 map-like notation : the href attribute=
 of all the a elements</p>
</li>
<li>
<p><code>a.'@href'</code>  =E2=86=92 property notation : an alternative way=
 of expressing this</p>
</li>
<li>
<p><code>a.@href</code>    =E2=86=92 direct notation : yet another alternat=
ive way of expressing this</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class=3D"sect3">
<h4 id=3D"_object_navigation"><a class=3D"anchor" href=3D"http://groovy-lan=
g.org/semantics.html#_object_navigation"></a>2.1.1. Object navigation</h4>
<div class=3D"paragraph">
<p>Let=E2=80=99s see an example of a GPath expression on a simple <em>objec=
t graph</em>, the one obtained using java reflection.  Suppose you are in a=
 non-static method of a
class having another method named <code>aMethodFoo</code></p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">void</span><s=
pan class=3D"pln"> aMethodFoo</span><span class=3D"pun">()</span><span clas=
s=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> println =
</span><span class=3D"str">"This is aMethodFoo."</span><span class=3D"pln">=
 </span><span class=3D"pun">}</span><span class=3D"pln"> </span><i class=3D=
"conum" data-value=3D"0"></i><b><span class=3D"pun">(</span><span class=3D"=
lit">0</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>the following GPath expression will get the name of that method:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"str"=
>'aMethodFoo'</span><span class=3D"pun">]</span><span class=3D"pln"> </span=
><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=
=3D"kwd">this</span><span class=3D"pun">.</span><span class=3D"kwd">class</=
span><span class=3D"pun">.</span><span class=3D"pln">methods</span><span cl=
ass=3D"pun">.</span><span class=3D"pln">name</span><span class=3D"pun">.</s=
pan><span class=3D"pln">grep</span><span class=3D"pun">(~</span><span class=
=3D"str">/.*Foo/</span><span class=3D"pun">)</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p><em>More precisely</em>, the above GPath expression produces a list of S=
tring, each being the name of an existing method on <code>this</code> where=
 that name ends with <code>Foo</code>.</p>
</div>
<div class=3D"paragraph">
<p>Now, given the following methods also defined in that class:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">void</span><s=
pan class=3D"pln"> aMethodBar</span><span class=3D"pun">()</span><span clas=
s=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> println =
</span><span class=3D"str">"This is aMethodBar."</span><span class=3D"pln">=
 </span><span class=3D"pun">}</span><span class=3D"pln"> </span><i class=3D=
"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"=
lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> anotherFooMethod=
</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln"> println </span><span class=3D"str">"T=
his is anotherFooMethod."</span><span class=3D"pln"> </span><span class=3D"=
pun">}</span><span class=3D"pln"> </span><i class=3D"conum" data-value=3D"2=
"></i><b><span class=3D"pun">(</span><span class=3D"lit">2</span><span clas=
s=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> aSecondMethodBar=
</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln"> println </span><span class=3D"str">"T=
his is aSecondMethodBar."</span><span class=3D"pln"> </span><span class=3D"=
pun">}</span><span class=3D"pln"> </span><i class=3D"conum" data-value=3D"3=
"></i><b><span class=3D"pun">(</span><span class=3D"lit">3</span><span clas=
s=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>then the following GPath expression will get the names of <strong>(1)</s=
trong> and <strong>(3)</strong>, but not <strong>(2)</strong> or <strong>(0=
)</strong>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"str"=
>'aMethodBar'</span><span class=3D"pun">,</span><span class=3D"pln"> </span=
><span class=3D"str">'aSecondMethodBar'</span><span class=3D"pun">]</span><=
span class=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln"=
> </span><span class=3D"typ">Set</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"kwd">th=
is</span><span class=3D"pun">.</span><span class=3D"kwd">class</span><span =
class=3D"pun">.</span><span class=3D"pln">methods</span><span class=3D"pun"=
>.</span><span class=3D"pln">name</span><span class=3D"pun">.</span><span c=
lass=3D"pln">grep</span><span class=3D"pun">(~</span><span class=3D"str">/.=
*Bar/</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span c=
lass=3D"kwd">as</span><span class=3D"pln"> </span><span class=3D"typ">Set</=
span></code></pre>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_expression_deconstruction"><a class=3D"anchor" href=3D"http://gr=
oovy-lang.org/semantics.html#_expression_deconstruction"></a>2.1.2. Express=
ion Deconstruction</h4>
<div class=3D"paragraph">
<p>We can decompose the expression <code>this.class.methods.name.grep(~/.*B=
ar/)</code> to get an idea of how a GPath is evaluated:</p>
</div>
<div class=3D"dlist">
<dl>
<dt class=3D"hdlist1"><code>this.class</code></dt>
<dd>
<p>property accessor, equivalent to <code>this.getClass()</code> in Java, y=
ields a <code>Class</code> object.</p>
</dd>
<dt class=3D"hdlist1"><code>this.class.methods</code></dt>
<dd>
<p>property accessor, equivalent to <code>this.getClass().getMethods()</cod=
e>, yields an array of <code>Method</code> objects.</p>
</dd>
<dt class=3D"hdlist1"><code>this.class.methods.name</code></dt>
<dd>
<p>apply a property accessor on each element of an array and produce a list=
 of the results.</p>
</dd>
<dt class=3D"hdlist1"><code>this.class.methods.name.grep(=E2=80=A6=E2=80=8B=
)</code></dt>
<dd>
<p>call method <code>grep</code> on each element of the list yielded by <co=
de>this.class.methods.name</code> and produce a list of the results.</p>
</dd>
</dl>
</div>
<div class=3D"admonitionblock warning">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-warning" title=3D"Warning"></i>
</td>
<td class=3D"content">
A sub-expression like <code>this.class.methods</code> yields an array becau=
se this is what calling <code>this.getClass().getMethods()</code> in Java
would produce. <code>GPath</code> expressions do not have a convention wher=
e a <code>s</code> means a list or anything like that.
</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>One powerful feature of GPath expression is that property access on a co=
llection is converted to a <em>property access on each element of the colle=
ction</em> with
the results collected into a collection. Therefore, the expression <code>th=
is.class.methods.name</code> could be expressed as follows in Java:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-java" data-lang=3D"java"><span class=3D"typ">List</span><span =
class=3D"pun">&lt;</span><span class=3D"typ">String</span><span class=3D"pu=
n">&gt;</span><span class=3D"pln"> methodNames </span><span class=3D"pun">=
=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</span><span c=
lass=3D"pln"> </span><span class=3D"typ">ArrayList</span><span class=3D"pun=
">&lt;</span><span class=3D"typ">String</span><span class=3D"pun">&gt;();</=
span><span class=3D"pln">
</span><span class=3D"kwd">for</span><span class=3D"pln"> </span><span clas=
s=3D"pun">(</span><span class=3D"typ">Method</span><span class=3D"pln"> met=
hod </span><span class=3D"pun">:</span><span class=3D"pln"> </span><span cl=
ass=3D"kwd">this</span><span class=3D"pun">.</span><span class=3D"pln">getC=
lass</span><span class=3D"pun">().</span><span class=3D"pln">getMethods</sp=
an><span class=3D"pun">())</span><span class=3D"pln"> </span><span class=3D=
"pun">{</span><span class=3D"pln">
   methodNames</span><span class=3D"pun">.</span><span class=3D"pln">add</s=
pan><span class=3D"pun">(</span><span class=3D"pln">method</span><span clas=
s=3D"pun">.</span><span class=3D"pln">getName</span><span class=3D"pun">())=
;</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">return</span><span class=3D"pln"> methodNames</s=
pan><span class=3D"pun">;</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Array access notation can also be used in a GPath expression where a col=
lection is present :</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"str">'aSecondMethodBar'</span><s=
pan class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"p=
ln"> </span><span class=3D"kwd">this</span><span class=3D"pun">.</span><spa=
n class=3D"kwd">class</span><span class=3D"pun">.</span><span class=3D"pln"=
>methods</span><span class=3D"pun">.</span><span class=3D"pln">name</span><=
span class=3D"pun">.</span><span class=3D"pln">grep</span><span class=3D"pu=
n">(~</span><span class=3D"str">/.*Bar/</span><span class=3D"pun">).</span>=
<span class=3D"pln">sort</span><span class=3D"pun">()[</span><span class=3D=
"lit">1</span><span class=3D"pun">]</span></code></pre>
</div>
</div>
<div class=3D"admonitionblock note">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-note" title=3D"Note"></i>
</td>
<td class=3D"content">
array access are zero-based in GPath expressions
</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_gpath_for_xml_navigation"><a class=3D"anchor" href=3D"http://gro=
ovy-lang.org/semantics.html#_gpath_for_xml_navigation"></a>2.1.3. GPath for=
 XML navigation</h4>
<div class=3D"paragraph">
<p>Here is an example with a XML document and various form of GPath express=
ions:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> xmlText </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"str">"""
              | &lt;root&gt;
              |   &lt;level&gt;
              |      &lt;sublevel id=3D'1'&gt;
              |        &lt;keyVal&gt;
              |          &lt;key&gt;mykey&lt;/key&gt;
              |          &lt;value&gt;value 123&lt;/value&gt;
              |        &lt;/keyVal&gt;
              |      &lt;/sublevel&gt;
              |      &lt;sublevel id=3D'2'&gt;
              |        &lt;keyVal&gt;
              |          &lt;key&gt;anotherKey&lt;/key&gt;
              |          &lt;value&gt;42&lt;/value&gt;
              |        &lt;/keyVal&gt;
              |        &lt;keyVal&gt;
              |          &lt;key&gt;mykey&lt;/key&gt;
              |          &lt;value&gt;fizzbuzz&lt;/value&gt;
              |        &lt;/keyVal&gt;
              |      &lt;/sublevel&gt;
              |   &lt;/level&gt;
              | &lt;/root&gt;
              """</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> root </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">ne=
w</span><span class=3D"pln"> </span><span class=3D"typ">XmlSlurper</span><s=
pan class=3D"pun">().</span><span class=3D"pln">parseText</span><span class=
=3D"pun">(</span><span class=3D"pln">xmlText</span><span class=3D"pun">.</s=
pan><span class=3D"pln">stripMargin</span><span class=3D"pun">())</span><sp=
an class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> root</span><sp=
an class=3D"pun">.</span><span class=3D"pln">level</span><span class=3D"pun=
">.</span><span class=3D"pln">size</span><span class=3D"pun">()</span><span=
 class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"=
> </span><span class=3D"lit">1</span><span class=3D"pln"> </span><i class=
=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=
=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> root</span><sp=
an class=3D"pun">.</span><span class=3D"pln">level</span><span class=3D"pun=
">.</span><span class=3D"pln">sublevel</span><span class=3D"pun">.</span><s=
pan class=3D"pln">size</span><span class=3D"pun">()</span><span class=3D"pl=
n"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><sp=
an class=3D"lit">2</span><span class=3D"pln"> </span><i class=3D"conum" dat=
a-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit">2</spa=
n><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> root</span><sp=
an class=3D"pun">.</span><span class=3D"pln">level</span><span class=3D"pun=
">.</span><span class=3D"pln">sublevel</span><span class=3D"pun">.</span><s=
pan class=3D"pln">findAll </span><span class=3D"pun">{</span><span class=3D=
"pln"> it</span><span class=3D"pun">.</span><span class=3D"lit">@id</span><=
span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"=
pln"> </span><span class=3D"lit">1</span><span class=3D"pln"> </span><span =
class=3D"pun">}.</span><span class=3D"pln">size</span><span class=3D"pun">(=
)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span =
class=3D"pln"> </span><span class=3D"lit">1</span><span class=3D"pln"> </sp=
an><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</span><=
span class=3D"lit">3</span><span class=3D"pun">)</span></b><span class=3D"p=
ln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> root</span><sp=
an class=3D"pun">.</span><span class=3D"pln">level</span><span class=3D"pun=
">.</span><span class=3D"pln">sublevel</span><span class=3D"pun">[</span><s=
pan class=3D"lit">1</span><span class=3D"pun">].</span><span class=3D"pln">=
keyVal</span><span class=3D"pun">[</span><span class=3D"lit">0</span><span =
class=3D"pun">].</span><span class=3D"pln">key</span><span class=3D"pun">.<=
/span><span class=3D"pln">text</span><span class=3D"pun">()</span><span cla=
ss=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </=
span><span class=3D"str">'anotherKey'</span><span class=3D"pln"> </span><i =
class=3D"conum" data-value=3D"4"></i><b><span class=3D"pun">(</span><span c=
lass=3D"lit">4</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>There is one <code>level</code> node under <code>root</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>There are two <code>sublevel</code> nodes under <code>root/level</code>=
</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>There is one element <code>sublevel</code> having an attribute <code>id=
</code> with value <code>1</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>Text value of <code>key</code> element of first <code>keyVal</code> ele=
ment of second <code>sublevel</code> element under <code>root/level</code> =
is 'anotherKey'</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"_promotion_and_coercion"><a class=3D"anchor" href=3D"http://groov=
y-lang.org/semantics.html#_promotion_and_coercion"></a>3. Promotion and coe=
rcion</h2>
<div class=3D"sectionbody">
<div class=3D"sect2">
<h3 id=3D"_number_promotion"><a class=3D"anchor" href=3D"http://groovy-lang=
.org/semantics.html#_number_promotion"></a>3.1. Number promotion</h3>
<div class=3D"paragraph">
<p>The rules of number promotion are specified in the section on <a href=3D=
"http://groovy-lang.org/semantics.html#_math_operations">math operations</a=
>.</p>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"closure-coercion"><a class=3D"anchor" href=3D"http://groovy-lang.=
org/semantics.html#closure-coercion"></a>3.2. Closure to type coercion</h3>
<div class=3D"sect3">
<h4 id=3D"_assigning_a_closure_to_a_sam_type"><a class=3D"anchor" href=3D"h=
ttp://groovy-lang.org/semantics.html#_assigning_a_closure_to_a_sam_type"></=
a>3.2.1. Assigning a closure to a SAM type</h4>
<div class=3D"paragraph">
<p>A SAM type is a type which defines a single abstract method. This includ=
es:</p>
</div>
<div class=3D"listingblock">
<div class=3D"title">Functional interfaces</div>
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">Predicate</span><span cl=
ass=3D"pun">&lt;</span><span class=3D"pln">T</span><span class=3D"pun">&gt;=
</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
    </span><span class=3D"kwd">boolean</span><span class=3D"pln"> accept</s=
pan><span class=3D"pun">(</span><span class=3D"pln">T obj</span><span class=
=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"listingblock">
<div class=3D"title">Abstract classes with single abstract method</div>
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">abstract</spa=
n><span class=3D"pln"> </span><span class=3D"kwd">class</span><span class=
=3D"pln"> </span><span class=3D"typ">Greeter</span><span class=3D"pln"> </s=
pan><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><=
span class=3D"typ">String</span><span class=3D"pln"> getName</span><span cl=
ass=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> greet</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">
        println </span><span class=3D"str">"Hello, $name"</span><span class=
=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Any closure can be converted into a SAM type using the <code>as</code> o=
perator:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Predicate</sp=
an><span class=3D"pln"> filter </span><span class=3D"pun">=3D</span><span c=
lass=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> it</s=
pan><span class=3D"pun">.</span><span class=3D"pln">contains </span><span c=
lass=3D"str">'G'</span><span class=3D"pln"> </span><span class=3D"pun">}</s=
pan><span class=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D=
"pln"> </span><span class=3D"typ">Predicate</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> filter</span><=
span class=3D"pun">.</span><span class=3D"pln">accept</span><span class=3D"=
pun">(</span><span class=3D"str">'Groovy'</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">true</span><span class=3D"pln">

</span><span class=3D"typ">Greeter</span><span class=3D"pln"> greeter </spa=
n><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln"> </span><span class=3D"str">'Groovy'</span=
><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln=
"> </span><span class=3D"kwd">as</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Greeter</span><span class=3D"pln">
greeter</span><span class=3D"pun">.</span><span class=3D"pln">greet</span><=
span class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>However, the <code>as Type</code> expression is optional since Groovy 2.=
2.0. You can omit it and simply write:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Predicate</sp=
an><span class=3D"pln"> filter </span><span class=3D"pun">=3D</span><span c=
lass=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> it</s=
pan><span class=3D"pun">.</span><span class=3D"pln">contains </span><span c=
lass=3D"str">'G'</span><span class=3D"pln"> </span><span class=3D"pun">}</s=
pan><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> filter</span><=
span class=3D"pun">.</span><span class=3D"pln">accept</span><span class=3D"=
pun">(</span><span class=3D"str">'Groovy'</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">true</span><span class=3D"pln">

</span><span class=3D"typ">Greeter</span><span class=3D"pln"> greeter </spa=
n><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln"> </span><span class=3D"str">'Groovy'</span=
><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln=
">
greeter</span><span class=3D"pun">.</span><span class=3D"pln">greet</span><=
span class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>which means you are also allowed to use method pointers, as shown in the=
 following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">boolean</span=
><span class=3D"pln"> doFilter</span><span class=3D"pun">(</span><span clas=
s=3D"typ">String</span><span class=3D"pln"> s</span><span class=3D"pun">)</=
span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D=
"pln"> s</span><span class=3D"pun">.</span><span class=3D"pln">contains</sp=
an><span class=3D"pun">(</span><span class=3D"str">'G'</span><span class=3D=
"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span=
 class=3D"pln">

</span><span class=3D"typ">Predicate</span><span class=3D"pln"> filter </sp=
an><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D=
"kwd">this</span><span class=3D"pun">.&amp;</span><span class=3D"pln">doFil=
ter
</span><span class=3D"kwd">assert</span><span class=3D"pln"> filter</span><=
span class=3D"pun">.</span><span class=3D"pln">accept</span><span class=3D"=
pun">(</span><span class=3D"str">'Groovy'</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">true</span><span class=3D"pln">

</span><span class=3D"typ">Greeter</span><span class=3D"pln"> greeter </spa=
n><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"=
typ">GroovySystem</span><span class=3D"pun">.&amp;</span><span class=3D"pln=
">getVersion
greeter</span><span class=3D"pun">.</span><span class=3D"pln">greet</span><=
span class=3D"pun">()</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_calling_a_method_accepting_a_sam_type_with_a_closure"><a class=
=3D"anchor" href=3D"http://groovy-lang.org/semantics.html#_calling_a_method=
_accepting_a_sam_type_with_a_closure"></a>3.2.2. Calling a method accepting=
 a SAM type with a closure</h4>
<div class=3D"paragraph">
<p>The second and probably more important use case for closure to SAM type =
coercion is calling a method which accepts
a SAM type. Imagine the following method:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">public</span>=
<span class=3D"pln"> </span><span class=3D"pun">&lt;</span><span class=3D"p=
ln">T</span><span class=3D"pun">&gt;</span><span class=3D"pln"> </span><spa=
n class=3D"typ">List</span><span class=3D"pun">&lt;</span><span class=3D"pl=
n">T</span><span class=3D"pun">&gt;</span><span class=3D"pln"> filter</span=
><span class=3D"pun">(</span><span class=3D"typ">List</span><span class=3D"=
pun">&lt;</span><span class=3D"pln">T</span><span class=3D"pun">&gt;</span>=
<span class=3D"pln"> source</span><span class=3D"pun">,</span><span class=
=3D"pln"> </span><span class=3D"typ">Predicate</span><span class=3D"pun">&l=
t;</span><span class=3D"pln">T</span><span class=3D"pun">&gt;</span><span c=
lass=3D"pln"> predicate</span><span class=3D"pun">)</span><span class=3D"pl=
n"> </span><span class=3D"pun">{</span><span class=3D"pln">
    source</span><span class=3D"pun">.</span><span class=3D"pln">findAll </=
span><span class=3D"pun">{</span><span class=3D"pln"> predicate</span><span=
 class=3D"pun">.</span><span class=3D"pln">accept</span><span class=3D"pun"=
>(</span><span class=3D"pln">it</span><span class=3D"pun">)</span><span cla=
ss=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Then you can call it with a closure, without having to create an explici=
t implementation of the interface:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> filter</span><span class=3D"pun">([</span><span class=
=3D"str">'Java'</span><span class=3D"pun">,</span><span class=3D"str">'Groo=
vy'</span><span class=3D"pun">],</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{</span><span class=3D"pln"> it</span><span class=3D"pun">.</sp=
an><span class=3D"pln">contains </span><span class=3D"str">'G'</span><span =
class=3D"pun">}</span><span class=3D"pln"> </span><span class=3D"kwd">as</s=
pan><span class=3D"pln"> </span><span class=3D"typ">Predicate</span><span c=
lass=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D=
</span><span class=3D"pln"> </span><span class=3D"pun">[</span><span class=
=3D"str">'Groovy'</span><span class=3D"pun">]</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>But since Groovy 2.2.0, you are also able to omit the explicit coercion =
and call the method as if it used a closure:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> filter</span><span class=3D"pun">([</span><span class=
=3D"str">'Java'</span><span class=3D"pun">,</span><span class=3D"str">'Groo=
vy'</span><span class=3D"pun">])</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{</span><span class=3D"pln"> it</span><span class=3D"pun">.</sp=
an><span class=3D"pln">contains </span><span class=3D"str">'G'</span><span =
class=3D"pun">}</span><span class=3D"pln"> </span><span class=3D"pun">=3D=
=3D</span><span class=3D"pln"> </span><span class=3D"pun">[</span><span cla=
ss=3D"str">'Groovy'</span><span class=3D"pun">]</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>As you can see, this has the advantage of letting you use the closure sy=
ntax for method calls, that is to say put the
closure outside of the parenthesis, improving the readability of your code.=
</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_closure_to_arbitrary_type_coercion"><a class=3D"anchor" href=3D"=
http://groovy-lang.org/semantics.html#_closure_to_arbitrary_type_coercion">=
</a>3.2.3. Closure to arbitrary type coercion</h4>
<div class=3D"paragraph">
<p>In addition to SAM types, a closure can be coerced to any type and in pa=
rticular interfaces. Let=E2=80=99s define the
following interface:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">FooBar</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> foo</span><sp=
an class=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> bar</span><s=
pan class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>You can coerce a closure into the interface using the <code>as</code> ke=
yword:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> impl </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> println </spa=
n><span class=3D"str">'ok'</span><span class=3D"pun">;</span><span class=3D=
"pln"> </span><span class=3D"lit">123</span><span class=3D"pln"> </span><sp=
an class=3D"pun">}</span><span class=3D"pln"> </span><span class=3D"kwd">as=
</span><span class=3D"pln"> </span><span class=3D"typ">FooBar</span></code>=
</pre>
</div>
</div>
<div class=3D"paragraph">
<p>This produces a class for which all methods are implemented using the cl=
osure:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> impl</span><span class=3D"pun">.</span><span class=3D"=
pln">foo</span><span class=3D"pun">()</span><span class=3D"pln"> </span><sp=
an class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"li=
t">123</span><span class=3D"pln">
impl</span><span class=3D"pun">.</span><span class=3D"pln">bar</span><span =
class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>But it is also possible to coerce a closure to any class. For example, w=
e can replace the <code>interface</code> that we defined
with <code>class</code> without changing the assertions:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">FooBar</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> foo</span><sp=
an class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">{=
</span><span class=3D"pln"> </span><span class=3D"lit">1</span><span class=
=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> bar</span><s=
pan class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=
{</span><span class=3D"pln"> println </span><span class=3D"str">'bar'</span=
><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln=
">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">def</span><span class=3D"pln"> impl </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">{<=
/span><span class=3D"pln"> println </span><span class=3D"str">'ok'</span><s=
pan class=3D"pun">;</span><span class=3D"pln"> </span><span class=3D"lit">1=
23</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span clas=
s=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln"> </span>=
<span class=3D"typ">FooBar</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> impl</span><sp=
an class=3D"pun">.</span><span class=3D"pln">foo</span><span class=3D"pun">=
()</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span=
 class=3D"pln"> </span><span class=3D"lit">123</span><span class=3D"pln">
impl</span><span class=3D"pun">.</span><span class=3D"pln">bar</span><span =
class=3D"pun">()</span></code></pre>
</div>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_map_to_type_coercion"><a class=3D"anchor" href=3D"http://groovy-=
lang.org/semantics.html#_map_to_type_coercion"></a>3.3. Map to type coercio=
n</h3>
<div class=3D"paragraph">
<p>Usually using a single closure to implement an interface or a class with=
 multiple methods is not the way to go. As an
alternative, Groovy allows you to coerce a map into an interface or a class=
. In that case, keys of the map are
interpreted as method names, while the values are the method implementation=
. The following example illustrates the
coercion of a map into an <code>Iterator</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> map
map </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span =
class=3D"pun">[</span><span class=3D"pln">
  i</span><span class=3D"pun">:</span><span class=3D"pln"> </span><span cla=
ss=3D"lit">10</span><span class=3D"pun">,</span><span class=3D"pln">
  hasNext</span><span class=3D"pun">:</span><span class=3D"pln"> </span><sp=
an class=3D"pun">{</span><span class=3D"pln"> map</span><span class=3D"pun"=
>.</span><span class=3D"pln">i </span><span class=3D"pun">&gt;</span><span =
class=3D"pln"> </span><span class=3D"lit">0</span><span class=3D"pln"> </sp=
an><span class=3D"pun">},</span><span class=3D"pln">
  </span><span class=3D"kwd">next</span><span class=3D"pun">:</span><span c=
lass=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> map</=
span><span class=3D"pun">.</span><span class=3D"pln">i</span><span class=3D=
"pun">--</span><span class=3D"pln"> </span><span class=3D"pun">},</span><sp=
an class=3D"pln">
</span><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> iter </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> map </span><span class=3D"kwd=
">as</span><span class=3D"pln"> </span><span class=3D"typ">Iterator</span><=
/code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Of course this is a rather contrived example, but illustrates the concep=
t. You only need to implement those methods
that are actually called, but if a method is called that doesn=E2=80=99t ex=
ist in the map a <code>MissingMethodException</code> or an
<code>UnsupportedOperationException</code> is thrown, depending on the argu=
ments passed to the call,
as in the following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> X </span><span class=3D"pun">{</span><span class=3D=
"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> f</span><spa=
n class=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> g</span><spa=
n class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln"> =
n</span><span class=3D"pun">)</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> h</span><spa=
n class=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"pln=
"> s</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span cl=
ass=3D"kwd">int</span><span class=3D"pln"> n</span><span class=3D"pun">)</s=
pan><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

x </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">[</span><span class=3D"pln"> f</span><span class=3D"pun">:</spa=
n><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pl=
n">println </span><span class=3D"str">"f called"</span><span class=3D"pun">=
}</span><span class=3D"pln"> </span><span class=3D"pun">]</span><span class=
=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln"> X
x</span><span class=3D"pun">.</span><span class=3D"pln">f</span><span class=
=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"com">// method=
 exists</span><span class=3D"pln">
x</span><span class=3D"pun">.</span><span class=3D"pln">g</span><span class=
=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"com">// Missin=
gMethodException here</span><span class=3D"pln">
x</span><span class=3D"pun">.</span><span class=3D"pln">g</span><span class=
=3D"pun">(</span><span class=3D"lit">5</span><span class=3D"pun">)</span><s=
pan class=3D"pln"> </span><span class=3D"com">// UnsupportedOperationExcept=
ion here</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The type of the exception depends on the call itself:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>MissingMethodException</code> if the arguments of the call do not =
match those from the interface/class</p>
</li>
<li>
<p><code>UnsupportedOperationException</code> if the arguments of the call =
match one of the overloaded methods of the interface/class</p>
</li>
</ul>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_string_to_enum_coercion"><a class=3D"anchor" href=3D"http://groo=
vy-lang.org/semantics.html#_string_to_enum_coercion"></a>3.4. String to enu=
m coercion</h3>
<div class=3D"paragraph">
<p>Groovy allows transparent <code>String</code> (or <code>GString</code>) =
to enum values coercion. Imagine you define the following enum:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">enum</span><s=
pan class=3D"pln"> </span><span class=3D"typ">State</span><span class=3D"pl=
n"> </span><span class=3D"pun">{</span><span class=3D"pln">
    up</span><span class=3D"pun">,</span><span class=3D"pln">
    down
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>then you can assign a string to the enum without having to use an explic=
it <code>as</code> coercion:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">State</span><=
span class=3D"pln"> st </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"str">'up'</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> st </span><spa=
n class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ=
">State</span><span class=3D"pun">.</span><span class=3D"pln">up</span></co=
de></pre>
</div>
</div>
<div class=3D"paragraph">
<p>It is also possible to use a <code>GString</code> as the value:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> val </span><span class=3D"pun">=3D</span><span class=3D"p=
ln"> </span><span class=3D"str">"up"</span><span class=3D"pln">
</span><span class=3D"typ">State</span><span class=3D"pln"> st </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str">"$=
{val}"</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> st </span><spa=
n class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ=
">State</span><span class=3D"pun">.</span><span class=3D"pln">up</span></co=
de></pre>
</div>
</div>
<div class=3D"paragraph">
<p>However, this would throw a runtime error (<code>IllegalArgumentExceptio=
n</code>):</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">State</span><=
span class=3D"pln"> st </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"str">'not an enum value'</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Note that it is also possible to use implicit coercion in switch stateme=
nts:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">State</span><=
span class=3D"pln"> switchState</span><span class=3D"pun">(</span><span cla=
ss=3D"typ">State</span><span class=3D"pln"> st</span><span class=3D"pun">)<=
/span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
    </span><span class=3D"kwd">switch</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"pln">st</span><span class=3D"pun">)=
</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
        </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><=
span class=3D"str">'up'</span><span class=3D"pun">:</span><span class=3D"pl=
n">
            </span><span class=3D"kwd">return</span><span class=3D"pln"> </=
span><span class=3D"typ">State</span><span class=3D"pun">.</span><span clas=
s=3D"pln">down </span><span class=3D"com">// explicit constant</span><span =
class=3D"pln">
        </span><span class=3D"kwd">case</span><span class=3D"pln"> </span><=
span class=3D"str">'down'</span><span class=3D"pun">:</span><span class=3D"=
pln">
            </span><span class=3D"kwd">return</span><span class=3D"pln"> </=
span><span class=3D"str">'up'</span><span class=3D"pln"> </span><span class=
=3D"com">// implicit coercion for return types</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>in particular, see how the <code>case</code> use string constants. But i=
f you call a method that uses an enum with a <code>String</code>
argument, you still have to use an explicit <code>as</code> coercion:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> switchState</span><span class=3D"pun">(</span><span cl=
ass=3D"str">'up'</span><span class=3D"pln"> </span><span class=3D"kwd">as</=
span><span class=3D"pln"> </span><span class=3D"typ">State</span><span clas=
s=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</s=
pan><span class=3D"pln"> </span><span class=3D"typ">State</span><span class=
=3D"pun">.</span><span class=3D"pln">down
</span><span class=3D"kwd">assert</span><span class=3D"pln"> switchState</s=
pan><span class=3D"pun">(</span><span class=3D"typ">State</span><span class=
=3D"pun">.</span><span class=3D"pln">down</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"typ">State</span><span class=3D"pun">.</spa=
n><span class=3D"pln">up</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_custom_type_coercion"><a class=3D"anchor" href=3D"http://groovy-=
lang.org/semantics.html#_custom_type_coercion"></a>3.5. Custom type coercio=
n</h3>
<div class=3D"paragraph">
<p>It is possible for a class to define custom coercion strategies by imple=
menting the <code>asType</code> method. Custom coercion
is invoked using the <code>as</code> operator and is never implicit. As an =
example,
imagine you defined two classes, <code>Polar</code> and <code>Cartesian</co=
de>, like in the following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Polar</span><span class=3D"p=
ln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">double</span><span class=3D"pln"> r
    </span><span class=3D"kwd">double</span><span class=3D"pln"> phi
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Cartesian</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln">
   </span><span class=3D"kwd">double</span><span class=3D"pln"> x
   </span><span class=3D"kwd">double</span><span class=3D"pln"> y
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>And that you want to convert from polar coordinates to cartesian coordin=
ates. One way of doing this is to define
the <code>asType</code> method in the <code>Polar</code> class:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> asType</span><span class=3D"pun">(</span><span class=3D"t=
yp">Class</span><span class=3D"pln"> target</span><span class=3D"pun">)</sp=
an><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"p=
ln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"typ">Cartesian</span><span class=3D"pun=
">=3D=3D</span><span class=3D"pln">target</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln=
">
        </span><span class=3D"kwd">return</span><span class=3D"pln"> </span=
><span class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"t=
yp">Cartesian</span><span class=3D"pun">(</span><span class=3D"pln">x</span=
><span class=3D"pun">:</span><span class=3D"pln"> r</span><span class=3D"pu=
n">*</span><span class=3D"pln">cos</span><span class=3D"pun">(</span><span =
class=3D"pln">phi</span><span class=3D"pun">),</span><span class=3D"pln"> y=
</span><span class=3D"pun">:</span><span class=3D"pln"> r</span><span class=
=3D"pun">*</span><span class=3D"pln">sin</span><span class=3D"pun">(</span>=
<span class=3D"pln">phi</span><span class=3D"pun">))</span><span class=3D"p=
ln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>which allows you to use the <code>as</code> coercion operator:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> sigma </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> </span><span class=3D"lit">1E-16</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> polar </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">n=
ew</span><span class=3D"pln"> </span><span class=3D"typ">Polar</span><span =
class=3D"pun">(</span><span class=3D"pln">r</span><span class=3D"pun">:</sp=
an><span class=3D"lit">1.0</span><span class=3D"pun">,</span><span class=3D=
"pln">phi</span><span class=3D"pun">:</span><span class=3D"pln">PI</span><s=
pan class=3D"pun">/</span><span class=3D"lit">2</span><span class=3D"pun">)=
</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> cartesian </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> polar </span><span class=
=3D"kwd">as</span><span class=3D"pln"> </span><span class=3D"typ">Cartesian=
</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> abs</span><spa=
n class=3D"pun">(</span><span class=3D"pln">cartesian</span><span class=3D"=
pun">.</span><span class=3D"pln">x</span><span class=3D"pun">-</span><span =
class=3D"pln">sigma</span><span class=3D"pun">)</span><span class=3D"pln"> =
</span><span class=3D"pun">&lt;</span><span class=3D"pln"> sigma</span></co=
de></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Putting it all together, the <code>Polar</code> class looks like this:</=
p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Polar</span><span class=3D"p=
ln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">double</span><span class=3D"pln"> r
    </span><span class=3D"kwd">double</span><span class=3D"pln"> phi
    </span><span class=3D"kwd">def</span><span class=3D"pln"> asType</span>=
<span class=3D"pun">(</span><span class=3D"typ">Class</span><span class=3D"=
pln"> target</span><span class=3D"pun">)</span><span class=3D"pln"> </span>=
<span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"typ">Cartesian</span><span class=3D=
"pun">=3D=3D</span><span class=3D"pln">target</span><span class=3D"pun">)</=
span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D=
"pln">
            </span><span class=3D"kwd">return</span><span class=3D"pln"> </=
span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span class=
=3D"typ">Cartesian</span><span class=3D"pun">(</span><span class=3D"pln">x<=
/span><span class=3D"pun">:</span><span class=3D"pln"> r</span><span class=
=3D"pun">*</span><span class=3D"pln">cos</span><span class=3D"pun">(</span>=
<span class=3D"pln">phi</span><span class=3D"pun">),</span><span class=3D"p=
ln"> y</span><span class=3D"pun">:</span><span class=3D"pln"> r</span><span=
 class=3D"pun">*</span><span class=3D"pln">sin</span><span class=3D"pun">(<=
/span><span class=3D"pln">phi</span><span class=3D"pun">))</span><span clas=
s=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>but it is also possible to define <code>asType</code> outside of the <co=
de>Polar</code> class, which can be practical if you want to define
custom coercion strategies for "closed" classes or classes for which you do=
n=E2=80=99t own the source code, for example using
a metaclass:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Polar</span><=
span class=3D"pun">.</span><span class=3D"pln">metaClass</span><span class=
=3D"pun">.</span><span class=3D"pln">asType </span><span class=3D"pun">=3D<=
/span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln"> </span><span class=3D"typ">Class</span><span class=3D"pln"> targe=
t </span><span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"typ">Cartesian</span><span class=3D"pun=
">=3D=3D</span><span class=3D"pln">target</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln=
">
        </span><span class=3D"kwd">return</span><span class=3D"pln"> </span=
><span class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"t=
yp">Cartesian</span><span class=3D"pun">(</span><span class=3D"pln">x</span=
><span class=3D"pun">:</span><span class=3D"pln"> r</span><span class=3D"pu=
n">*</span><span class=3D"pln">cos</span><span class=3D"pun">(</span><span =
class=3D"pln">phi</span><span class=3D"pun">),</span><span class=3D"pln"> y=
</span><span class=3D"pun">:</span><span class=3D"pln"> r</span><span class=
=3D"pun">*</span><span class=3D"pln">sin</span><span class=3D"pun">(</span>=
<span class=3D"pln">phi</span><span class=3D"pun">))</span><span class=3D"p=
ln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_class_literals_vs_variables_and_the_as_operator"><a class=3D"anc=
hor" href=3D"http://groovy-lang.org/semantics.html#_class_literals_vs_varia=
bles_and_the_as_operator"></a>3.6. Class literals vs variables and the as o=
perator</h3>
<div class=3D"paragraph">
<p>Using the <code>as</code> keyword is only possible if you have a static =
reference to a class, like in the following code:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">Greeter</span><span clas=
s=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> greet</span>=
<span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> greeter </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln"> println </span><span class=3D"str">'Hello, Gr=
oovy!'</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span =
class=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln"> </s=
pan><span class=3D"typ">Greeter</span><span class=3D"pln"> </span><span cla=
ss=3D"com">// Greeter is known statically</span><span class=3D"pln">
greeter</span><span class=3D"pun">.</span><span class=3D"pln">greet</span><=
span class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>But what if you get the class by reflection, for example by calling <cod=
e>Class.forName</code>?</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Class</span><=
span class=3D"pln"> clazz </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"typ">Class</span><span class=3D"pun">.</spa=
n><span class=3D"pln">forName</span><span class=3D"pun">(</span><span class=
=3D"str">'Greeter'</span><span class=3D"pun">)</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Trying to use the reference to the class with the <code>as</code> keywor=
d would fail:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">greeter </spa=
n><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln"> println </span><span class=3D"str">'Hello=
, Groovy!'</span><span class=3D"pln"> </span><span class=3D"pun">}</span><s=
pan class=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln">=
 clazz
</span><span class=3D"com">// throws:</span><span class=3D"pln">
</span><span class=3D"com">// unable to resolve class clazz</span><span cla=
ss=3D"pln">
</span><span class=3D"com">// @ line 9, column 40.</span><span class=3D"pln=
">
</span><span class=3D"com">//   greeter =3D { println 'Hello, Groovy!' } as=
 clazz</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>It is failing because the <code>as</code> keyword only works with class =
literals. Instead, you need to call the <code>asType</code> method:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">greeter </spa=
n><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln"> println </span><span class=3D"str">'Hello=
, Groovy!'</span><span class=3D"pln"> </span><span class=3D"pun">}.</span><=
span class=3D"pln">asType</span><span class=3D"pun">(</span><span class=3D"=
pln">clazz</span><span class=3D"pun">)</span><span class=3D"pln">
greeter</span><span class=3D"pun">.</span><span class=3D"pln">greet</span><=
span class=3D"pun">()</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"_optionality"><a class=3D"anchor" href=3D"http://groovy-lang.org/=
semantics.html#_optionality"></a>4. Optionality</h2>
<div class=3D"sectionbody">
<div class=3D"sect2">
<h3 id=3D"_optional_parentheses"><a class=3D"anchor" href=3D"http://groovy-=
lang.org/semantics.html#_optional_parentheses"></a>4.1. Optional parenthese=
s</h3>
<div class=3D"paragraph">
<p>Method calls can omit the parentheses if there is at least one parameter=
 and there is no ambiguity:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">println </spa=
n><span class=3D"str">'Hello World'</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> maximum </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"typ"=
>Math</span><span class=3D"pun">.</span><span class=3D"pln">max </span><spa=
n class=3D"lit">5</span><span class=3D"pun">,</span><span class=3D"pln"> </=
span><span class=3D"lit">10</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Parentheses are required for method calls without parameters or ambiguou=
s method calls:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">println</span=
><span class=3D"pun">()</span><span class=3D"pln">
println</span><span class=3D"pun">(</span><span class=3D"typ">Math</span><s=
pan class=3D"pun">.</span><span class=3D"pln">max</span><span class=3D"pun"=
>(</span><span class=3D"lit">5</span><span class=3D"pun">,</span><span clas=
s=3D"pln"> </span><span class=3D"lit">10</span><span class=3D"pun">))</span=
></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_optional_semicolons"><a class=3D"anchor" href=3D"http://groovy-l=
ang.org/semantics.html#_optional_semicolons"></a>4.2. Optional semicolons</=
h3>
<div class=3D"paragraph">
<p>In Groovy semicolons at the end of the line can be omitted, if the line =
contains only a single statement.</p>
</div>
<div class=3D"paragraph">
<p>This means that:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"kwd">true</span><span class=3D"p=
un">;</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>can be more idiomatically written as:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"kwd">true</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Multiple statements in a line require semicolons to separate them:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">boolean</span=
><span class=3D"pln"> a </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> </span><span class=3D"kwd">true</span><span class=3D"pun">;</span><s=
pan class=3D"pln"> </span><span class=3D"kwd">assert</span><span class=3D"p=
ln"> a</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_optional_return_keyword"><a class=3D"anchor" href=3D"http://groo=
vy-lang.org/semantics.html#_optional_return_keyword"></a>4.3. Optional retu=
rn keyword</h3>
<div class=3D"paragraph">
<p>In Groovy, the last expression evaluated in the body of a method or a cl=
osure is returned. This means that the <code>return</code> keyword is optio=
nal.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pln"> add</span><span class=3D"pun">(</span><span class=3D"kwd"=
>int</span><span class=3D"pln"> a</span><span class=3D"pun">,</span><span c=
lass=3D"pln"> </span><span class=3D"kwd">int</span><span class=3D"pln"> b</=
span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D=
"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">return</span><span class=3D"pln"> a</span><s=
pan class=3D"pun">+</span><span class=3D"pln">b
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> add</span><spa=
n class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">,</=
span><span class=3D"pln"> </span><span class=3D"lit">2</span><span class=3D=
"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span>=
<span class=3D"pln"> </span><span class=3D"lit">3</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Can be shortened to:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pln"> add</span><span class=3D"pun">(</span><span class=3D"kwd"=
>int</span><span class=3D"pln"> a</span><span class=3D"pun">,</span><span c=
lass=3D"pln"> </span><span class=3D"kwd">int</span><span class=3D"pln"> b</=
span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D=
"pun">{</span><span class=3D"pln">
    a</span><span class=3D"pun">+</span><span class=3D"pln">b
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> add</span><spa=
n class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">,</=
span><span class=3D"pln"> </span><span class=3D"lit">2</span><span class=3D=
"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span>=
<span class=3D"pln"> </span><span class=3D"lit">3</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_optional_public_keyword"><a class=3D"anchor" href=3D"http://groo=
vy-lang.org/semantics.html#_optional_public_keyword"></a>4.4. Optional publ=
ic keyword</h3>
<div class=3D"paragraph">
<p>By default, Groovy classes and methods are <code>public</code>. Therefor=
e this class:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">public</span>=
<span class=3D"pln"> </span><span class=3D"kwd">class</span><span class=3D"=
pln"> </span><span class=3D"typ">Server</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">public</span><span class=3D"pln"> </span><sp=
an class=3D"typ">String</span><span class=3D"pln"> toString</span><span cla=
ss=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">{</span=
><span class=3D"pln"> </span><span class=3D"str">"a server"</span><span cla=
ss=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>is identical to this class:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Server</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> toString</=
span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"str">"a server"=
</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=
=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"Groovy-Truth"><a class=3D"anchor" href=3D"http://groovy-lang.org/=
semantics.html#Groovy-Truth"></a>5. The Groovy Truth</h2>
<div class=3D"sectionbody">
<div class=3D"paragraph">
<p>Groovy decides whether a expression is true or false by applying the rul=
es given below.</p>
</div>
<div class=3D"sect2">
<h3 id=3D"_boolean_expressions"><a class=3D"anchor" href=3D"http://groovy-l=
ang.org/semantics.html#_boolean_expressions"></a>5.1. Boolean expressions</=
h3>
<div class=3D"paragraph">
<p>True if the corresponding Boolean value is <code>true</code>.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"kwd">true</span><span class=3D"p=
ln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"kwd">false</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_collections_and_arrays"><a class=3D"anchor" href=3D"http://groov=
y-lang.org/semantics.html#_collections_and_arrays"></a>5.2. Collections and=
 Arrays</h3>
<div class=3D"paragraph">
<p>Non-empty Collections and arrays are true.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"lit"=
>1</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span clas=
s=3D"lit">2</span><span class=3D"pun">,</span><span class=3D"pln"> </span><=
span class=3D"lit">3</span><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">![]</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_matchers"><a class=3D"anchor" href=3D"http://groovy-lang.org/sem=
antics.html#_matchers"></a>5.3. Matchers</h3>
<div class=3D"paragraph">
<p>True if the Matcher has at least one match.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"str"=
>'a'</span><span class=3D"pln"> </span><span class=3D"pun">=3D~</span><span=
 class=3D"pln"> </span><span class=3D"pun">/</span><span class=3D"pln">a</s=
pan><span class=3D"pun">/)</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!(</span><span class=3D"str">'a'</span><span class=3D"pln"> </=
span><span class=3D"pun">=3D~</span><span class=3D"pln"> </span><span class=
=3D"pun">/</span><span class=3D"pln">b</span><span class=3D"pun">/)</span><=
/code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_iterators_and_enumerations"><a class=3D"anchor" href=3D"http://g=
roovy-lang.org/semantics.html#_iterators_and_enumerations"></a>5.4. Iterato=
rs and Enumerations</h3>
<div class=3D"paragraph">
<p>Iterators and Enumerations with further elements are coerced to true.</p=
>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"lit"=
>0</span><span class=3D"pun">].</span><span class=3D"pln">iterator</span><s=
pan class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">![].</span><span class=3D"pln">iterator</span><span class=3D"p=
un">()</span><span class=3D"pln">
</span><span class=3D"typ">Vector</span><span class=3D"pln"> v </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">[<=
/span><span class=3D"lit">0</span><span class=3D"pun">]</span><span class=
=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln"> </span><=
span class=3D"typ">Vector</span><span class=3D"pln">
</span><span class=3D"typ">Enumeration</span><span class=3D"pln"> enumerati=
on </span><span class=3D"pun">=3D</span><span class=3D"pln"> v</span><span =
class=3D"pun">.</span><span class=3D"pln">elements</span><span class=3D"pun=
">()</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> enumeration
enumeration</span><span class=3D"pun">.</span><span class=3D"pln">nextEleme=
nt</span><span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"pln">enumeration</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_maps"><a class=3D"anchor" href=3D"http://groovy-lang.org/semanti=
cs.html#_maps"></a>5.5. Maps</h3>
<div class=3D"paragraph">
<p>Non-empty Maps are evaluated to true.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"str"=
>'one'</span><span class=3D"pln"> </span><span class=3D"pun">:</span><span =
class=3D"pln"> </span><span class=3D"lit">1</span><span class=3D"pun">]</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">![:]</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_strings"><a class=3D"anchor" href=3D"http://groovy-lang.org/sema=
ntics.html#_strings"></a>5.6. Strings</h3>
<div class=3D"paragraph">
<p>Non-empty Strings, GStrings and CharSequences are coerced to true.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"str">'a'</span><span class=3D"pl=
n">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"str">''</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> nonEmpty </span><=
span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str=
">'a'</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"str">"$nonEmpty"</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> empty </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str">'=
'</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"str">"$empty"</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_numbers"><a class=3D"anchor" href=3D"http://groovy-lang.org/sema=
ntics.html#_numbers"></a>5.7. Numbers</h3>
<div class=3D"paragraph">
<p>Non-zero numbers are true.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"lit">1</span><span class=3D"pln"=
>
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"lit">3.5</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"lit">0</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_object_references"><a class=3D"anchor" href=3D"http://groovy-lan=
g.org/semantics.html#_object_references"></a>5.8. Object References</h3>
<div class=3D"paragraph">
<p>Non-null object references are coerced to true.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pl=
n"> </span><span class=3D"typ">Object</span><span class=3D"pun">()</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"kwd">null</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_customizing_the_truth_with_asboolean_methods"><a class=3D"anchor=
" href=3D"http://groovy-lang.org/semantics.html#_customizing_the_truth_with=
_asboolean_methods"></a>5.9. Customizing the truth with asBoolean() methods=
</h3>
<div class=3D"paragraph">
<p>In order to customize whether groovy evaluates your object to <code>true=
</code> or <code>false</code> implement the <code>asBoolean()</code> method=
:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Color</span><span class=3D"p=
ln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> name

    </span><span class=3D"kwd">boolean</span><span class=3D"pln"> asBoolean=
</span><span class=3D"pun">(){</span><span class=3D"pln">
        name </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> <=
/span><span class=3D"str">'green'</span><span class=3D"pln"> </span><span c=
lass=3D"pun">?</span><span class=3D"pln"> </span><span class=3D"kwd">true</=
span><span class=3D"pln"> </span><span class=3D"pun">:</span><span class=3D=
"pln"> </span><span class=3D"kwd">false</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Groovy will call this method to coerce your object to a boolean value, e=
.g.:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pl=
n"> </span><span class=3D"typ">Color</span><span class=3D"pun">(</span><spa=
n class=3D"pln">name</span><span class=3D"pun">:</span><span class=3D"pln">=
 </span><span class=3D"str">'green'</span><span class=3D"pun">)</span><span=
 class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> </span><span c=
lass=3D"pun">!</span><span class=3D"kwd">new</span><span class=3D"pln"> </s=
pan><span class=3D"typ">Color</span><span class=3D"pun">(</span><span class=
=3D"pln">name</span><span class=3D"pun">:</span><span class=3D"pln"> </span=
><span class=3D"str">'red'</span><span class=3D"pun">)</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"_typing"><a class=3D"anchor" href=3D"http://groovy-lang.org/seman=
tics.html#_typing"></a>6. Typing</h2>
<div class=3D"sectionbody">
<div class=3D"sect2">
<h3 id=3D"_optional_typing"><a class=3D"anchor" href=3D"http://groovy-lang.=
org/semantics.html#_optional_typing"></a>6.1. Optional typing</h3>
<div class=3D"paragraph">
<p>Optional typing is the idea that a program can work even if you don=E2=
=80=99t put an explicit type on a variable. Being a dynamic
language, Groovy naturally implements that feature, for example when you de=
clare a variable:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> aString </span><span class=3D"pun">=3D</span><span cla=
ss=3D"pln"> </span><span class=3D"str">'foo'</span><span class=3D"pln">    =
                  </span><i class=3D"conum" data-value=3D"1"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> aString</span>=
<span class=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span cla=
ss=3D"pun">()</span><span class=3D"pln">                </span><i class=3D"=
conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"l=
it">2</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>foo</code> is declared using an explicit type, <code>String</code=
></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we can call the <code>toUpperCase</code> method on a <code>String</code=
></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Groovy will let you write this instead:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> aString </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"str">'foo'</span><span class=3D"pln">      =
                   </span><i class=3D"conum" data-value=3D"1"></i><b><span =
class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</sp=
an></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> aString</span>=
<span class=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span cla=
ss=3D"pun">()</span><span class=3D"pln">                </span><i class=3D"=
conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"l=
it">2</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>foo</code> is declared using <code>def</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we can still call the <code>toUpperCase</code> method, because the type=
 of <code>aString</code> is resolved at runtime</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>So it doesn=E2=80=99t matter that you use an explicit type here. It is i=
n particular interesting when you combine this feature
with <a href=3D"http://groovy-lang.org/semantics.html#static-type-checking"=
>static type checking</a>, because the type checker performs type inference=
.</p>
</div>
<div class=3D"paragraph">
<p>Likewise, Groovy doesn=E2=80=99t make it mandatory to declare the types =
of a parameter in a method:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> concat</span><span class=3D"pun">(</span><span class=
=3D"typ">String</span><span class=3D"pln"> a</span><span class=3D"pun">,</s=
pan><span class=3D"pln"> </span><span class=3D"typ">String</span><span clas=
s=3D"pln"> b</span><span class=3D"pun">)</span><span class=3D"pln"> </span>=
<span class=3D"pun">{</span><span class=3D"pln">
    a</span><span class=3D"pun">+</span><span class=3D"pln">b
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> concat</span><=
span class=3D"pun">(</span><span class=3D"str">'foo'</span><span class=3D"p=
un">,</span><span class=3D"str">'bar'</span><span class=3D"pun">)</span><sp=
an class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pl=
n"> </span><span class=3D"str">'foobar'</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>can be rewritten using <code>def</code> as both return type and paramete=
r types, in order to take advantage of duck typing, as
illustrated in this example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> concat</span><span class=3D"pun">(</span><span class=3D"k=
wd">def</span><span class=3D"pln"> a</span><span class=3D"pun">,</span><spa=
n class=3D"pln"> </span><span class=3D"kwd">def</span><span class=3D"pln"> =
b</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">                              </span><=
i class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span=
 class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    a</span><span class=3D"pun">+</span><span class=3D"pln">b
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> concat</span><=
span class=3D"pun">(</span><span class=3D"str">'foo'</span><span class=3D"p=
un">,</span><span class=3D"str">'bar'</span><span class=3D"pun">)</span><sp=
an class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pl=
n"> </span><span class=3D"str">'foobar'</span><span class=3D"pln">         =
         </span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"p=
un">(</span><span class=3D"lit">2</span><span class=3D"pun">)</span></b><sp=
an class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> concat</span><=
span class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">=
,</span><span class=3D"lit">2</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </sp=
an><span class=3D"lit">3</span><span class=3D"pln">                        =
         </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"p=
un">(</span><span class=3D"lit">3</span><span class=3D"pun">)</span></b></c=
ode></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>both the return type and the parameter types use <code>def</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>it makes it possible to use the method with <code>String</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>but also with <code>int</code> since the <code>plus</code> method is de=
fined</td>
</tr>
</tbody></table>
</div>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
Using the <code>def</code> keyword here is recommended to describe the inte=
nt of a method which is supposed to work on any
type, but technically, we could use <code>Object</code> instead and the res=
ult would be the same: <code>def</code> is, in Groovy, strictly
equivalent to using <code>Object</code>.
</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Eventually, the type can be removed altogether from both the return type=
 and the descriptor. But if you want to remove
it from the return type, you then need to add an explicit modifier for the =
method, so that the compiler can make a difference
between a method declaration and a method call, like illustrated in this ex=
ample:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">private</span=
><span class=3D"pln"> concat</span><span class=3D"pun">(</span><span class=
=3D"pln">a</span><span class=3D"pun">,</span><span class=3D"pln">b</span><s=
pan class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{=
</span><span class=3D"pln">                                   </span><i cla=
ss=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span clas=
s=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    a</span><span class=3D"pun">+</span><span class=3D"pln">b
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> concat</span><=
span class=3D"pun">(</span><span class=3D"str">'foo'</span><span class=3D"p=
un">,</span><span class=3D"str">'bar'</span><span class=3D"pun">)</span><sp=
an class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pl=
n"> </span><span class=3D"str">'foobar'</span><span class=3D"pln">         =
         </span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"p=
un">(</span><span class=3D"lit">2</span><span class=3D"pun">)</span></b><sp=
an class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> concat</span><=
span class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">=
,</span><span class=3D"lit">2</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </sp=
an><span class=3D"lit">3</span><span class=3D"pln">                        =
         </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"p=
un">(</span><span class=3D"lit">3</span><span class=3D"pun">)</span></b></c=
ode></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>if we want to omit the return type, an explicit modifier has to be set.=
</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>it is still possible to use the method with <code>String</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>and also with <code>int</code></td>
</tr>
</tbody></table>
</div>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
Omitting types is in general considered a bad practice in method parameters=
 or method return types for public APIs.
While using <code>def</code> in a local variable is not really a problem be=
cause the visibility of the variable is limited to the
method itself, while set on a method parameter, <code>def</code> will be co=
nverted to <code>Object</code> in the method signature, making it
difficult for users to know which is the expected type of the arguments. Th=
is means that you should limit this to cases
where you are explicitly relying on duck typing.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"static-type-checking"><a class=3D"anchor" href=3D"http://groovy-l=
ang.org/semantics.html#static-type-checking"></a>6.2. Static type checking<=
/h3>
<div class=3D"paragraph">
<p>By default, Groovy performs minimal type checking at compile time. Since=
 it is primarily a dynamic language,
most checks that a static compiler would normally do aren=E2=80=99t possibl=
e at compile time. A method added via runtime
metaprogramming might alter a class or object=E2=80=99s runtime behavior. L=
et=E2=80=99s illustrate why in the
following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Person</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln">              =
                                            </span><i class=3D"conum" data-=
value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1</span>=
<span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> firstName
    </span><span class=3D"typ">String</span><span class=3D"pln"> lastName
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> p </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</=
span><span class=3D"pln"> </span><span class=3D"typ">Person</span><span cla=
ss=3D"pun">(</span><span class=3D"pln">firstName</span><span class=3D"pun">=
:</span><span class=3D"pln"> </span><span class=3D"str">'Raymond'</span><sp=
an class=3D"pun">,</span><span class=3D"pln"> lastName</span><span class=3D=
"pun">:</span><span class=3D"pln"> </span><span class=3D"str">'Devos'</span=
><span class=3D"pun">)</span><span class=3D"pln">             </span><i cla=
ss=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span clas=
s=3D"lit">2</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> p</span><span =
class=3D"pun">.</span><span class=3D"pln">formattedName </span><span class=
=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"str">'Raym=
ond Devos'</span><span class=3D"pln">                               </span>=
<i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</span><spa=
n class=3D"lit">3</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the <code>Person</code> class only defines two properties, <code>firstN=
ame</code> and <code>lastName</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we can create an instance of Person</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>and call a method named <code>formattedName</code></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>It is quite common in dynamic languages for code such as the above examp=
le not to throw any error. How can this be?
In Java, this would typically fail at compile time. However, in Groovy, it =
will not fail at compile time, and if coded
correctly, will also not fail at runtime. In fact, to make this work at run=
time, <strong>one</strong> possibility is to rely on
runtime metaprogramming. So just adding this line after the declaration of =
the <code>Person</code> class is enough:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Person</span>=
<span class=3D"pun">.</span><span class=3D"pln">metaClass</span><span class=
=3D"pun">.</span><span class=3D"pln">getFormattedName </span><span class=3D=
"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">{</span><sp=
an class=3D"pln"> </span><span class=3D"str">"$delegate.firstName $delegate=
.lastName"</span><span class=3D"pln"> </span><span class=3D"pun">}</span></=
code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>This means that in general, in Groovy, you can=E2=80=99t make any assump=
tion about the type of an object beyond its declaration
type, and even if you know it, you can=E2=80=99t determine at compile time =
what method will be called, or which property will
be retrieved. It has a lot of interest, going from writing DSLs to testing,=
 which is discussed in other sections of this
manual.</p>
</div>
<div class=3D"paragraph">
<p>However, if your program doesn=E2=80=99t rely on dynamic features and th=
at you come from the static world (in particular, from
a Java mindset), not catching such "errors" at compile time can be surprisi=
ng. As we have seen in the previous example,
the compiler cannot be sure this is an error. To make it aware that it is, =
you have to explicitly instruct the compiler
that you are switching to a type checked mode. This can be done by annotati=
ng a class or a method with <code>@groovy.transform.TypeChecked</code>.</p>
</div>
<div class=3D"paragraph">
<p>When type checking is activated, the compiler performs much more work:</=
p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>type inference is activated, meaning that even if you use <code>def</cod=
e> on a local variable for example, the type checker will be
able to infer the type of the variable from the assignments</p>
</li>
<li>
<p>method calls are resolved at compile time, meaning that if a method is n=
ot declared on a class, the compiler will throw an error</p>
</li>
<li>
<p>in general, all the compile time errors that you are used to find in a s=
tatic language will appear: method not found, property not found,
incompatible types for method calls, number precision errors, =E2=80=A6=E2=
=80=8B</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>In this section, we will describe the behavior of the type checker in va=
rious situations and explain the limits of using
<code>@TypeChecked</code> on your code.</p>
</div>
<div class=3D"sect3">
<h4 id=3D"_the_code_typechecked_code_annotation"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#_the_code_typechecked_code_annota=
tion"></a>6.2.1. The <code>@TypeChecked</code> annotation</h4>
<div class=3D"sect4">
<h5 id=3D"_activating_type_checking_at_compile_time"><a class=3D"anchor" hr=
ef=3D"http://groovy-lang.org/semantics.html#_activating_type_checking_at_co=
mpile_time"></a>Activating type checking at compile time</h5>
<div class=3D"paragraph">
<p>The <code>groovy.transform.TypeChecked</code> annotation enables type ch=
ecking. It can be placed on a class:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Calculator</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> sum</span><sp=
an class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln">=
 x</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span clas=
s=3D"kwd">int</span><span class=3D"pln"> y</span><span class=3D"pun">)</spa=
n><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pl=
n"> x</span><span class=3D"pun">+</span><span class=3D"pln">y </span><span =
class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Or on a method:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Calculator</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"lit">@groovy</span><span class=3D"pun">.</span><s=
pan class=3D"pln">transform</span><span class=3D"pun">.</span><span class=
=3D"typ">TypeChecked</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> sum</span><sp=
an class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln">=
 x</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span clas=
s=3D"kwd">int</span><span class=3D"pln"> y</span><span class=3D"pun">)</spa=
n><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pl=
n"> x</span><span class=3D"pun">+</span><span class=3D"pln">y </span><span =
class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>In the first case, all methods, properties, fields, inner classes, =E2=
=80=A6=E2=80=8B of the annotated class will be type checked, whereas
in the second case, only the method and potential closures or anonymous inn=
er classes that it contains will be type checked.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_skipping_sections"><a class=3D"anchor" href=3D"http://groovy-lan=
g.org/semantics.html#_skipping_sections"></a>Skipping sections</h5>
<div class=3D"paragraph">
<p>The scope of type checking can be restricted. For example, if a class is=
 type checked, you can instruct the type checker
to skip a method by annotating it with <code>@TypeChecked(TypeCheckingMode.=
SKIP)</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"typ">Ty=
peChecked</span><span class=3D"pln">
</span><span class=3D"kwd">import</span><span class=3D"pln"> groovy</span><=
span class=3D"pun">.</span><span class=3D"pln">transform</span><span class=
=3D"pun">.</span><span class=3D"typ">TypeCheckingMode</span><span class=3D"=
pln">

</span><span class=3D"lit">@TypeChecked</span><span class=3D"pln">         =
                               </span><i class=3D"conum" data-value=3D"1"><=
/i><b><span class=3D"pun">(</span><span class=3D"lit">1</span><span class=
=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">GreetingService</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> greeting</=
span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">                             </span><i=
 class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span =
class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=3D"pln">
        doGreet</span><span class=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">

    </span><span class=3D"lit">@TypeChecked</span><span class=3D"pun">(</sp=
an><span class=3D"typ">TypeCheckingMode</span><span class=3D"pun">.</span><=
span class=3D"pln">SKIP</span><span class=3D"pun">)</span><span class=3D"pl=
n">             </span><i class=3D"conum" data-value=3D"3"></i><b><span cla=
ss=3D"pun">(</span><span class=3D"lit">3</span><span class=3D"pun">)</span>=
</b><span class=3D"pln">
    </span><span class=3D"kwd">private</span><span class=3D"pln"> </span><s=
pan class=3D"typ">String</span><span class=3D"pln"> doGreet</span><span cla=
ss=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">{</span=
><span class=3D"pln">
        </span><span class=3D"kwd">def</span><span class=3D"pln"> b </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kw=
d">new</span><span class=3D"pln"> </span><span class=3D"typ">SentenceBuilde=
r</span><span class=3D"pun">()</span><span class=3D"pln">
        b</span><span class=3D"pun">.</span><span class=3D"typ">Hello</span=
><span class=3D"pun">.</span><span class=3D"kwd">my</span><span class=3D"pu=
n">.</span><span class=3D"pln">name</span><span class=3D"pun">.</span><span=
 class=3D"kwd">is</span><span class=3D"pun">.</span><span class=3D"typ">Joh=
n</span><span class=3D"pln">                     </span><i class=3D"conum" =
data-value=3D"4"></i><b><span class=3D"pun">(</span><span class=3D"lit">4</=
span><span class=3D"pun">)</span></b><span class=3D"pln">
        b
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> s </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</=
span><span class=3D"pln"> </span><span class=3D"typ">GreetingService</span>=
<span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> s</span><span =
class=3D"pun">.</span><span class=3D"pln">greeting</span><span class=3D"pun=
">()</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><sp=
an class=3D"pln"> </span><span class=3D"str">'Hello my name is John'</span>=
</code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the <code>GreetingService</code> class is marked as type checked</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>so the <code>greeting</code> method is automatically type checked</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>but <code>doGreet</code> is marked with <code>SKIP</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>the type checker doesn=E2=80=99t complain about missing properties here=
</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>In the previous example, <code>SentenceBuilder</code> relies on dynamic =
code. There=E2=80=99s no real <code>Hello</code> method or property, so the
type checker would normally complain and compilation would fail. Since the =
method that uses the builder is marked with
<code>TypeCheckingMode.SKIP</code>, type checking is <em>skipped</em> for t=
his method, so the code will compile, even if the rest of the
class is type checked.</p>
</div>
<div class=3D"paragraph">
<p>The following sections describe the semantics of type checking in Groovy=
.</p>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_type_checking_assignments"><a class=3D"anchor" href=3D"http://gr=
oovy-lang.org/semantics.html#_type_checking_assignments"></a>6.2.2. Type ch=
ecking assignments</h4>
<div class=3D"paragraph">
<p>An object <code>o</code> of type <code>A</code> can be assigned to a var=
iable of type <code>T</code> if and only if:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>T</code> equals <code>A</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Date</span><s=
pan class=3D"pln"> now </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><spa=
n class=3D"typ">Date</span><span class=3D"pun">()</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is one of <code>String</code>, <code>boolean<=
/code>, <code>Boolean</code> or <code>Class</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> s </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><spa=
n class=3D"typ">Date</span><span class=3D"pun">()</span><span class=3D"pln"=
> </span><span class=3D"com">// implicit call to toString</span><span class=
=3D"pln">
</span><span class=3D"typ">Boolean</span><span class=3D"pln"> boxed </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"st=
r">'some string'</span><span class=3D"pln">       </span><span class=3D"com=
">// Groovy truth</span><span class=3D"pln">
</span><span class=3D"kwd">boolean</span><span class=3D"pln"> prim </span><=
span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str=
">'some string'</span><span class=3D"pln">        </span><span class=3D"com=
">// Groovy truth</span><span class=3D"pln">
</span><span class=3D"typ">Class</span><span class=3D"pln"> clazz </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str"=
>'java.lang.String'</span><span class=3D"pln">    </span><span class=3D"com=
">// class coercion</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>o</code> is null and <code>T</code> is not a primitive=
 type</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> s </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"kwd">null</span><span class=3D"pln">         </=
span><span class=3D"com">// passes</span><span class=3D"pln">
</span><span class=3D"kwd">int</span><span class=3D"pln"> i </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">null<=
/span><span class=3D"pln">            </span><span class=3D"com">// fails</=
span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is an array and <code>A</code> is an array an=
d the component type of <code>A</code> is assignable to the component type =
of <code>T</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pun">[]</span><span class=3D"pln"> i </span><span class=3D"pun"=
>=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</span><span =
class=3D"pln"> </span><span class=3D"kwd">int</span><span class=3D"pun">[</=
span><span class=3D"lit">4</span><span class=3D"pun">]</span><span class=3D=
"pln">        </span><span class=3D"com">// passes</span><span class=3D"pln=
">
</span><span class=3D"kwd">int</span><span class=3D"pun">[]</span><span cla=
ss=3D"pln"> i </span><span class=3D"pun">=3D</span><span class=3D"pln"> </s=
pan><span class=3D"kwd">new</span><span class=3D"pln"> </span><span class=
=3D"typ">String</span><span class=3D"pun">[</span><span class=3D"lit">4</sp=
an><span class=3D"pun">]</span><span class=3D"pln">     </span><span class=
=3D"com">// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is an array and <code>A</code> is a list and =
the component type of <code>A</code> is assignable to the component type of=
 <code>T</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pun">[]</span><span class=3D"pln"> i </span><span class=3D"pun"=
>=3D</span><span class=3D"pln"> </span><span class=3D"pun">[</span><span cl=
ass=3D"lit">1</span><span class=3D"pun">,</span><span class=3D"lit">2</span=
><span class=3D"pun">,</span><span class=3D"lit">3</span><span class=3D"pun=
">]</span><span class=3D"pln">               </span><span class=3D"com">// =
passes</span><span class=3D"pln">
</span><span class=3D"kwd">int</span><span class=3D"pun">[]</span><span cla=
ss=3D"pln"> i </span><span class=3D"pun">=3D</span><span class=3D"pln"> </s=
pan><span class=3D"pun">[</span><span class=3D"lit">1</span><span class=3D"=
pun">,</span><span class=3D"lit">2</span><span class=3D"pun">,</span><span =
class=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </=
span><span class=3D"typ">Date</span><span class=3D"pun">()]</span><span cla=
ss=3D"pln">     </span><span class=3D"com">// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is a superclass of <code>A</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">AbstractList<=
/span><span class=3D"pln"> list </span><span class=3D"pun">=3D</span><span =
class=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </=
span><span class=3D"typ">ArrayList</span><span class=3D"pun">()</span><span=
 class=3D"pln">     </span><span class=3D"com">// passes</span><span class=
=3D"pln">
</span><span class=3D"typ">LinkedList</span><span class=3D"pln"> list </spa=
n><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"=
kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">ArrayList</s=
pan><span class=3D"pun">()</span><span class=3D"pln">       </span><span cl=
ass=3D"com">// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is an interface implemented by <code>A</code>=
</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">List</span><s=
pan class=3D"pln"> list </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><sp=
an class=3D"typ">ArrayList</span><span class=3D"pun">()</span><span class=
=3D"pln">             </span><span class=3D"com">// passes</span><span clas=
s=3D"pln">
</span><span class=3D"typ">RandomAccess</span><span class=3D"pln"> list </s=
pan><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=
=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">LinkedLi=
st</span><span class=3D"pun">()</span><span class=3D"pln">    </span><span =
class=3D"com">// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> or <code>A</code> are a primitive type and th=
eir boxed types are assignable</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pln"> i </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"lit">0</span><span class=3D"pln">
</span><span class=3D"typ">Integer</span><span class=3D"pln"> bi </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">=
1</span><span class=3D"pln">
</span><span class=3D"kwd">int</span><span class=3D"pln"> x </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</=
span><span class=3D"pln"> </span><span class=3D"typ">Integer</span><span cl=
ass=3D"pun">(</span><span class=3D"lit">123</span><span class=3D"pun">)</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">double</span><span class=3D"pln"> d </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">ne=
w</span><span class=3D"pln"> </span><span class=3D"typ">Float</span><span c=
lass=3D"pun">(</span><span class=3D"lit">5f</span><span class=3D"pun">)</sp=
an></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> extends <code>groovy.lang.Closure</code> and =
<code>A</code> is a SAM-type (single abstract method type)</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Runnable</spa=
n><span class=3D"pln"> r </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> println <=
/span><span class=3D"str">'Hello'</span><span class=3D"pln"> </span><span c=
lass=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">interface</span><span class=3D"pln"> </span><spa=
n class=3D"typ">SAMType</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> doSomething</=
span><span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"typ">SAMType</span><span class=3D"pln"> sam </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln"> </span><span class=3D"lit">123</span><span cl=
ass=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> sam</span><spa=
n class=3D"pun">.</span><span class=3D"pln">doSomething</span><span class=
=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</s=
pan><span class=3D"pln"> </span><span class=3D"lit">123</span><span class=
=3D"pln">
</span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><span=
 class=3D"kwd">class</span><span class=3D"pln"> </span><span class=3D"typ">=
AbstractSAM</span><span class=3D"pln"> </span><span class=3D"pun">{</span><=
span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> calc</span><s=
pan class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=
{</span><span class=3D"pln"> </span><span class=3D"lit">2</span><span class=
=3D"pun">*</span><span class=3D"pln"> value</span><span class=3D"pun">()</s=
pan><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"=
pln">
    </span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><=
span class=3D"kwd">int</span><span class=3D"pln"> value</span><span class=
=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"typ">AbstractSAM</span><span class=3D"pln"> c </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln"> </span><span class=3D"lit">123</span><span =
class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> c</span><span =
class=3D"pun">.</span><span class=3D"pln">calc</span><span class=3D"pun">()=
</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span c=
lass=3D"pln"> </span><span class=3D"lit">246</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> and <code>A</code> derive from <code>java.lan=
g.Number</code> and conform to the following table</p>
</li>
</ul>
</div>
<table id=3D"number-assignment" class=3D"tableblock frame-all grid-all spre=
ad">
<caption class=3D"title">Table 1. Number types (java.lang.XXX)</caption>
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 25%;">
<col style=3D"width: 50%;">
</colgroup>
<thead>
<tr>
<th class=3D"tableblock halign-left valign-top">T</th>
<th class=3D"tableblock halign-left valign-top">A</th>
<th class=3D"tableblock halign-left valign-top">Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Dou=
ble</p></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Any=
 but BigDecimal or BigInteger</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Double</span>=
<span class=3D"pln"> d1 </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> </span><span class=3D"lit">4d</span><span class=3D"pln">
</span><span class=3D"typ">Double</span><span class=3D"pln"> d2 </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">4=
f</span><span class=3D"pln">
</span><span class=3D"typ">Double</span><span class=3D"pln"> d3 </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">4=
l</span><span class=3D"pln">
</span><span class=3D"typ">Double</span><span class=3D"pln"> d4 </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">4=
i</span><span class=3D"pln">
</span><span class=3D"typ">Double</span><span class=3D"pln"> d5 </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(=
</span><span class=3D"kwd">short</span><span class=3D"pun">)</span><span cl=
ass=3D"pln"> </span><span class=3D"lit">4</span><span class=3D"pln">
</span><span class=3D"typ">Double</span><span class=3D"pln"> d6 </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(=
</span><span class=3D"kwd">byte</span><span class=3D"pun">)</span><span cla=
ss=3D"pln"> </span><span class=3D"lit">4</span></code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Flo=
at</p></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Any=
 type but BigDecimal, BigInteger or Double</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Float</span><=
span class=3D"pln"> f1 </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"lit">4f</span><span class=3D"pln">
</span><span class=3D"typ">Float</span><span class=3D"pln"> f2 </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">4l=
</span><span class=3D"pln">
</span><span class=3D"typ">Float</span><span class=3D"pln"> f3 </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">4i=
</span><span class=3D"pln">
</span><span class=3D"typ">Float</span><span class=3D"pln"> f4 </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(<=
/span><span class=3D"kwd">short</span><span class=3D"pun">)</span><span cla=
ss=3D"pln"> </span><span class=3D"lit">4</span><span class=3D"pln">
</span><span class=3D"typ">Float</span><span class=3D"pln"> f5 </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(<=
/span><span class=3D"kwd">byte</span><span class=3D"pun">)</span><span clas=
s=3D"pln"> </span><span class=3D"lit">4</span></code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Lon=
g</p></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Any=
 type but BigDecimal, BigInteger, Double or Float</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Long</span><s=
pan class=3D"pln"> l1 </span><span class=3D"pun">=3D</span><span class=3D"p=
ln"> </span><span class=3D"lit">4l</span><span class=3D"pln">
</span><span class=3D"typ">Long</span><span class=3D"pln"> l2 </span><span =
class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">4i<=
/span><span class=3D"pln">
</span><span class=3D"typ">Long</span><span class=3D"pln"> l3 </span><span =
class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(</=
span><span class=3D"kwd">short</span><span class=3D"pun">)</span><span clas=
s=3D"pln"> </span><span class=3D"lit">4</span><span class=3D"pln">
</span><span class=3D"typ">Long</span><span class=3D"pln"> l4 </span><span =
class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(</=
span><span class=3D"kwd">byte</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"lit">4</span></code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Int=
eger</p></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Any=
 type but BigDecimal, BigInteger, Double, Float or Long</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Integer</span=
><span class=3D"pln"> i1 </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"lit">4i</span><span class=3D"pln">
</span><span class=3D"typ">Integer</span><span class=3D"pln"> i2 </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">=
(</span><span class=3D"kwd">short</span><span class=3D"pun">)</span><span c=
lass=3D"pln"> </span><span class=3D"lit">4</span><span class=3D"pln">
</span><span class=3D"typ">Integer</span><span class=3D"pln"> i3 </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">=
(</span><span class=3D"kwd">byte</span><span class=3D"pun">)</span><span cl=
ass=3D"pln"> </span><span class=3D"lit">4</span></code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Sho=
rt</p></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Any=
 type but BigDecimal, BigInteger, Double, Float, Long or Integer</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Short</span><=
span class=3D"pln"> s1 </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">(</span><span class=3D"kwd">short</span><s=
pan class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"lit">4=
</span><span class=3D"pln">
</span><span class=3D"typ">Short</span><span class=3D"pln"> s2 </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">(<=
/span><span class=3D"kwd">byte</span><span class=3D"pun">)</span><span clas=
s=3D"pln"> </span><span class=3D"lit">4</span></code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Byt=
e</p></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Byt=
e</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Byte</span><s=
pan class=3D"pln"> b1 </span><span class=3D"pun">=3D</span><span class=3D"p=
ln"> </span><span class=3D"pun">(</span><span class=3D"kwd">byte</span><spa=
n class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"lit">4</=
span></code></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class=3D"sect3">
<h4 id=3D"_list_and_map_constructors"><a class=3D"anchor" href=3D"http://gr=
oovy-lang.org/semantics.html#_list_and_map_constructors"></a>6.2.3. List an=
d map constructors</h4>
<div class=3D"paragraph">
<p>In addition to the assignment rules above, if an assignment is deemed in=
valid, in type checked mode, a <em>list</em> literal or a <em>map</em> lite=
ral <code>A</code> can be assigned
to a variable of type <code>T</code> if:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>the assignment is a variable declaration and <code>A</code> is a list li=
teral and <code>T</code> has a constructor whose parameters match the types=
 of the elements in the list literal</p>
</li>
<li>
<p>the assignment is a variable declaration and <code>A</code> is a map lit=
eral and <code>T</code> has a no-arg constructor and a property for each of=
 the map keys</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>For example, instead of writing:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TupleConstructor</span><span class=3D=
"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Person</span><span class=3D"pln"> </span><span class=3D"pun">{<=
/span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> firstName
    </span><span class=3D"typ">String</span><span class=3D"pln"> lastName
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"typ">Person</span><span class=3D"pln"> classic </span=
><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"k=
wd">new</span><span class=3D"pln"> </span><span class=3D"typ">Person</span>=
<span class=3D"pun">(</span><span class=3D"str">'Ada'</span><span class=3D"=
pun">,</span><span class=3D"str">'Lovelace'</span><span class=3D"pun">)</sp=
an></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>You can use a "list constructor":</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Person</span>=
<span class=3D"pln"> list </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"str">'Ada'</spa=
n><span class=3D"pun">,</span><span class=3D"str">'Lovelace'</span><span cl=
ass=3D"pun">]</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>or a "map constructor":</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Person</span>=
<span class=3D"pln"> map </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"pun">[</span><span class=3D"pln">firstName<=
/span><span class=3D"pun">:</span><span class=3D"str">'Ada'</span><span cla=
ss=3D"pun">,</span><span class=3D"pln"> lastName</span><span class=3D"pun">=
:</span><span class=3D"str">'Lovelace'</span><span class=3D"pun">]</span></=
code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>If you use a map constructor, additional checks are done on the keys of =
the map to check if a property of the same name
is defined. For example, the following will fail at compile time:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TupleConstructor</span><span class=3D=
"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Person</span><span class=3D"pln"> </span><span class=3D"pun">{<=
/span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> firstName
    </span><span class=3D"typ">String</span><span class=3D"pln"> lastName
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"typ">Person</span><span class=3D"pln"> map </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">=
[</span><span class=3D"pln">firstName</span><span class=3D"pun">:</span><sp=
an class=3D"str">'Ada'</span><span class=3D"pun">,</span><span class=3D"pln=
"> lastName</span><span class=3D"pun">:</span><span class=3D"str">'Lovelace=
'</span><span class=3D"pun">,</span><span class=3D"pln"> age</span><span cl=
ass=3D"pun">:</span><span class=3D"pln"> </span><span class=3D"lit">24</spa=
n><span class=3D"pun">]</span><span class=3D"pln">     </span><i class=3D"c=
onum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"li=
t">1</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>The type checker will throw an error <code>No such property: age for cl=
ass: Person</code> at compile time</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_method_resolution"><a class=3D"anchor" href=3D"http://groovy-lan=
g.org/semantics.html#_method_resolution"></a>6.2.4. Method resolution</h4>
<div class=3D"paragraph">
<p>In type checked mode, methods are resolved at compile time. Resolution w=
orks by name and arguments. The return type is
irrelevant to method selection. Types of arguments are matched against the =
types of the parameters following those rules:</p>
</div>
<div class=3D"paragraph">
<p>An argument <code>o</code> of type <code>A</code> can be used for a para=
meter of type <code>T</code> if and only if:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>T</code> equals <code>A</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pln"> sum</span><span class=3D"pun">(</span><span class=3D"kwd"=
>int</span><span class=3D"pln"> x</span><span class=3D"pun">,</span><span c=
lass=3D"pln"> </span><span class=3D"kwd">int</span><span class=3D"pln"> y</=
span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D=
"pun">{</span><span class=3D"pln">
    x</span><span class=3D"pun">+</span><span class=3D"pln">y
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> sum</span><spa=
n class=3D"pun">(</span><span class=3D"lit">3</span><span class=3D"pun">,</=
span><span class=3D"lit">4</span><span class=3D"pun">)</span><span class=3D=
"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span>=
<span class=3D"lit">7</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is a <code>String</code> and <code>A</code> i=
s a <code>GString</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> format</span><span class=3D"pun">(</span><span class=
=3D"typ">String</span><span class=3D"pln"> str</span><span class=3D"pun">)<=
/span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
    </span><span class=3D"str">"Result: $str"</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> format</span><=
span class=3D"pun">(</span><span class=3D"str">"${3+4}"</span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</sp=
an><span class=3D"pln"> </span><span class=3D"str">"Result: 7"</span></code=
></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>o</code> is null and <code>T</code> is not a primitive=
 type</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> format</span><span class=3D"pun">(</span><span class=
=3D"kwd">int</span><span class=3D"pln"> value</span><span class=3D"pun">)</=
span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D=
"pln">
    </span><span class=3D"str">"Result: $value"</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> format</span><=
span class=3D"pun">(</span><span class=3D"lit">7</span><span class=3D"pun">=
)</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span =
class=3D"pln"> </span><span class=3D"str">"Result: 7"</span><span class=3D"=
pln">
format</span><span class=3D"pun">(</span><span class=3D"kwd">null</span><sp=
an class=3D"pun">)</span><span class=3D"pln">           </span><span class=
=3D"com">// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is an array and <code>A</code> is an array an=
d the component type of <code>A</code> is assignable to the component type =
of <code>T</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> format</span><span class=3D"pun">(</span><span class=
=3D"typ">String</span><span class=3D"pun">[]</span><span class=3D"pln"> val=
ues</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cla=
ss=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"str">"Result: ${values.join(' ')}"</span><span cl=
ass=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> format</span><=
span class=3D"pun">([</span><span class=3D"str">'a'</span><span class=3D"pu=
n">,</span><span class=3D"str">'b'</span><span class=3D"pun">]</span><span =
class=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D"pln"> </s=
pan><span class=3D"typ">String</span><span class=3D"pun">[])</span><span cl=
ass=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> <=
/span><span class=3D"str">"Result: a b"</span><span class=3D"pln">
format</span><span class=3D"pun">([</span><span class=3D"lit">1</span><span=
 class=3D"pun">,</span><span class=3D"lit">2</span><span class=3D"pun">]</s=
pan><span class=3D"pln"> </span><span class=3D"kwd">as</span><span class=3D=
"pln"> </span><span class=3D"kwd">int</span><span class=3D"pun">[])</span><=
span class=3D"pln">              </span><span class=3D"com">// fails</span>=
</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is a superclass of <code>A</code></p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> format</span><span class=3D"pun">(</span><span class=
=3D"typ">AbstractList</span><span class=3D"pln"> list</span><span class=3D"=
pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span =
class=3D"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">join</span><=
span class=3D"pun">(</span><span class=3D"str">','</span><span class=3D"pun=
">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
format</span><span class=3D"pun">(</span><span class=3D"kwd">new</span><spa=
n class=3D"pln"> </span><span class=3D"typ">ArrayList</span><span class=3D"=
pun">())</span><span class=3D"pln">              </span><span class=3D"com"=
>// passes</span><span class=3D"pln">
</span><span class=3D"typ">String</span><span class=3D"pln"> format</span><=
span class=3D"pun">(</span><span class=3D"typ">LinkedList</span><span class=
=3D"pln"> list</span><span class=3D"pun">)</span><span class=3D"pln"> </spa=
n><span class=3D"pun">{</span><span class=3D"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">join</span><=
span class=3D"pun">(</span><span class=3D"str">','</span><span class=3D"pun=
">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
format</span><span class=3D"pun">(</span><span class=3D"kwd">new</span><spa=
n class=3D"pln"> </span><span class=3D"typ">ArrayList</span><span class=3D"=
pun">())</span><span class=3D"pln">              </span><span class=3D"com"=
>// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> is an interface implemented by <code>A</code>=
</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> format</span><span class=3D"pun">(</span><span class=
=3D"typ">List</span><span class=3D"pln"> list</span><span class=3D"pun">)</=
span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D=
"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">join</span><=
span class=3D"pun">(</span><span class=3D"str">','</span><span class=3D"pun=
">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
format</span><span class=3D"pun">(</span><span class=3D"kwd">new</span><spa=
n class=3D"pln"> </span><span class=3D"typ">ArrayList</span><span class=3D"=
pun">())</span><span class=3D"pln">                  </span><span class=3D"=
com">// passes</span><span class=3D"pln">
</span><span class=3D"typ">String</span><span class=3D"pln"> format</span><=
span class=3D"pun">(</span><span class=3D"typ">RandomAccess</span><span cla=
ss=3D"pln"> list</span><span class=3D"pun">)</span><span class=3D"pln"> </s=
pan><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"str">'foo'</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
format</span><span class=3D"pun">(</span><span class=3D"kwd">new</span><spa=
n class=3D"pln"> </span><span class=3D"typ">LinkedList</span><span class=3D=
"pun">())</span><span class=3D"pln">                 </span><span class=3D"=
com">// fails</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> or <code>A</code> are a primitive type and th=
eir boxed types are assignable</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pln"> sum</span><span class=3D"pun">(</span><span class=3D"kwd"=
>int</span><span class=3D"pln"> x</span><span class=3D"pun">,</span><span c=
lass=3D"pln"> </span><span class=3D"typ">Integer</span><span class=3D"pln">=
 y</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span clas=
s=3D"pun">{</span><span class=3D"pln">
    x</span><span class=3D"pun">+</span><span class=3D"pln">y
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> sum</span><spa=
n class=3D"pun">(</span><span class=3D"lit">3</span><span class=3D"pun">,</=
span><span class=3D"pln"> </span><span class=3D"kwd">new</span><span class=
=3D"pln"> </span><span class=3D"typ">Integer</span><span class=3D"pun">(</s=
pan><span class=3D"lit">4</span><span class=3D"pun">))</span><span class=3D=
"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span>=
<span class=3D"lit">7</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> sum</span><spa=
n class=3D"pun">(</span><span class=3D"kwd">new</span><span class=3D"pln"> =
</span><span class=3D"typ">Integer</span><span class=3D"pun">(</span><span =
class=3D"lit">3</span><span class=3D"pun">),</span><span class=3D"pln"> </s=
pan><span class=3D"lit">4</span><span class=3D"pun">)</span><span class=3D"=
pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><=
span class=3D"lit">7</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> sum</span><spa=
n class=3D"pun">(</span><span class=3D"kwd">new</span><span class=3D"pln"> =
</span><span class=3D"typ">Integer</span><span class=3D"pun">(</span><span =
class=3D"lit">3</span><span class=3D"pun">),</span><span class=3D"pln"> </s=
pan><span class=3D"kwd">new</span><span class=3D"pln"> </span><span class=
=3D"typ">Integer</span><span class=3D"pun">(</span><span class=3D"lit">4</s=
pan><span class=3D"pun">))</span><span class=3D"pln"> </span><span class=3D=
"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"lit">7</span>=
<span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> sum</span><spa=
n class=3D"pun">(</span><span class=3D"kwd">new</span><span class=3D"pln"> =
</span><span class=3D"typ">Integer</span><span class=3D"pun">(</span><span =
class=3D"lit">3</span><span class=3D"pun">),</span><span class=3D"pln"> </s=
pan><span class=3D"lit">4</span><span class=3D"pun">)</span><span class=3D"=
pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><=
span class=3D"lit">7</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> extends <code>groovy.lang.Closure</code> and =
<code>A</code> is a SAM-type (single abstract method type)</p>
<div class=3D"exampleblock result">
<div class=3D"content">
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">SAMType</span><span clas=
s=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> doSomething</=
span><span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">int</span><span class=3D"pln"> twice</span><span=
 class=3D"pun">(</span><span class=3D"typ">SAMType</span><span class=3D"pln=
"> sam</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span =
class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"lit">2</sp=
an><span class=3D"pun">*</span><span class=3D"pln">sam</span><span class=3D=
"pun">.</span><span class=3D"pln">doSomething</span><span class=3D"pun">()<=
/span><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=
=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> twice </span><=
span class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"lit">=
123</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span cla=
ss=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </=
span><span class=3D"lit">246</span><span class=3D"pln">
</span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><span=
 class=3D"kwd">class</span><span class=3D"pln"> </span><span class=3D"typ">=
AbstractSAM</span><span class=3D"pln"> </span><span class=3D"pun">{</span><=
span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> calc</span><s=
pan class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=
{</span><span class=3D"pln"> </span><span class=3D"lit">2</span><span class=
=3D"pun">*</span><span class=3D"pln"> value</span><span class=3D"pun">()</s=
pan><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"=
pln">
    </span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><=
span class=3D"kwd">int</span><span class=3D"pln"> value</span><span class=
=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">int</span><span class=3D"pln"> eightTimes</span>=
<span class=3D"pun">(</span><span class=3D"typ">AbstractSAM</span><span cla=
ss=3D"pln"> sam</span><span class=3D"pun">)</span><span class=3D"pln"> </sp=
an><span class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"l=
it">4</span><span class=3D"pun">*</span><span class=3D"pln">sam</span><span=
 class=3D"pun">.</span><span class=3D"pln">calc</span><span class=3D"pun">(=
)</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=
=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> eightTimes </s=
pan><span class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"=
lit">123</span><span class=3D"pln"> </span><span class=3D"pun">}</span><spa=
n class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln=
"> </span><span class=3D"lit">984</span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><em>or</em> <code>T</code> and <code>A</code> derive from <code>java.lan=
g.Number</code> and conform to the same rules as <a href=3D"http://groovy-l=
ang.org/semantics.html#number-assignment">assignment of numbers</a></p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>If a method with the appropriate name and arguments is not found at comp=
ile time, an error is thrown. The difference with "normal" Groovy is
illustrated in the following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">MyService</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething<=
/span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
        printLine </span><span class=3D"str">'Do something'</span><span cla=
ss=3D"pln">            </span><i class=3D"conum" data-value=3D"1"></i><b><s=
pan class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)=
</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>printLine</code> is an error, but since we=E2=80=99re in a dynami=
c mode, the error is not caught at compile time</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The example above shows a class that Groovy will be able to compile. How=
ever, if you try to create an instance of <code>MyService</code> and call t=
he
<code>doSomething</code> method, then it will fail <strong>at runtime</stro=
ng>, because <code>printLine</code> doesn=E2=80=99t exist. Of course, we al=
ready showed how Groovy could make
this a perfectly valid call, for example by catching <code>MethodMissingExc=
eption</code> or implementing a custom meta-class, but if you know you=E2=
=80=99re
not in such a case, <code>@TypeChecked</code> comes handy:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">MyService</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething<=
/span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
        printLine </span><span class=3D"str">'Do something'</span><span cla=
ss=3D"pln">            </span><i class=3D"conum" data-value=3D"1"></i><b><s=
pan class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)=
</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>printLine</code> is this time a compile-time error</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Just adding <code>@TypeChecked</code> will trigger compile time method r=
esolution. The type checker will try to find a method <code>printLine</code=
> accepting
a <code>String</code> on the <code>MyService</code> class, but cannot find =
one. It will fail compilation with the following message:</p>
</div>
<div class=3D"paragraph">
<p><code>Cannot find matching method MyService#printLine(java.lang.String)<=
/code></p>
</div>
<div class=3D"exampleblock">
<div class=3D"content">
<div class=3D"admonitionblock important">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-important" title=3D"Important"></i>
</td>
<td class=3D"content">
It is important to understand the logic behind the type checker: it is a co=
mpile-time check, so by definition, the type checker
is not aware of any kind of <strong>runtime</strong> metaprogramming that y=
ou do. This means that code which is perfectly valid without <code>@TypeChe=
cked</code> will
<strong>not</strong> compile anymore if you activate type checking. This is=
 in particular true if you think of duck typing:<br>
</td>
</tr>
</tbody></table>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Duck</span><span class=3D"pl=
n"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> quack</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">              </span><i class=3D"conum" data-=
value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1</span>=
<span class=3D"pun">)</span></b><span class=3D"pln">
        println </span><span class=3D"str">'Quack!'</span><span class=3D"pl=
n">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">QuackingBird</span><span class=3D"pln"> </span><span class=3D"p=
un">{</span><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> quack</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">              </span><i class=3D"conum" data-=
value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit">2</span>=
<span class=3D"pun">)</span></b><span class=3D"pln">
        println </span><span class=3D"str">'Quack!'</span><span class=3D"pl=
n">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"lit">@groovy</span><span class=3D"pun">.</span><span =
class=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"ty=
p">TypeChecked</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> accept</span><sp=
an class=3D"pun">(</span><span class=3D"pln">quacker</span><span class=3D"p=
un">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span c=
lass=3D"pln">
    quacker</span><span class=3D"pun">.</span><span class=3D"pln">quack</sp=
an><span class=3D"pun">()</span><span class=3D"pln">             </span><i =
class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</span><span c=
lass=3D"lit">3</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
accept</span><span class=3D"pun">(</span><span class=3D"kwd">new</span><spa=
n class=3D"pln"> </span><span class=3D"typ">Duck</span><span class=3D"pun">=
())</span><span class=3D"pln">              </span><i class=3D"conum" data-=
value=3D"4"></i><b><span class=3D"pun">(</span><span class=3D"lit">4</span>=
<span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>we define a <code>Duck</code> class which defines a <code>quack</code> =
method</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we define another <code>QuackingBird</code> class which also defines a =
<code>quack</code> method</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td><code>quacker</code> is loosely typed, so since the method is <code>@Ty=
peChecked</code>, we will obtain a compile-time error</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>even if in non type-checked Groovy, this would have passed</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>There are possible workarounds, like introducing an interface, but basic=
ally, by activating type checking, you gain type safety
but you loose some features of the language. Hopefully, Groovy introduces s=
ome features like flow typing to reduce the gap between
type-checked and non type-checked Groovy.</p>
</div>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"type-inference"><a class=3D"anchor" href=3D"http://groovy-lang.or=
g/semantics.html#type-inference"></a>6.2.5. Type inference</h4>
<div class=3D"sect4">
<h5 id=3D"_principles"><a class=3D"anchor" href=3D"http://groovy-lang.org/s=
emantics.html#_principles"></a>Principles</h5>
<div class=3D"paragraph">
<p>When code is annotated with <code>@TypeChecked</code>, the compiler perf=
orms type inference. It doesn=E2=80=99t simply rely on static types, but al=
so uses various
techniques to infer the types of variables, return types, literals, =E2=80=
=A6=E2=80=8B so that the code remains as clean as possible even if you acti=
vate the
type checker.</p>
</div>
<div class=3D"paragraph">
<p>The simplest example is inferring the type of a variable:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> message </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"str">'Welcome to Groovy!'</span><span class=
=3D"pln">              </span><i class=3D"conum" data-value=3D"1"></i><b><s=
pan class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)=
</span></b><span class=3D"pln">
println message</span><span class=3D"pun">.</span><span class=3D"pln">toUpp=
erCase</span><span class=3D"pun">()</span><span class=3D"pln">             =
      </span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun"=
>(</span><span class=3D"lit">2</span><span class=3D"pun">)</span></b><span =
class=3D"pln">
println message</span><span class=3D"pun">.</span><span class=3D"pln">upper=
</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"com">// compile time error   </span><i class=3D"conum" data-value=3D"3"=
></i><b><span class=3D"com">(3)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>a variable is declared using the <code>def</code> keyword</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>calling <code>toUpperCase</code> is allowed by the type checker</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>calling <code>upper</code> will fail at compile time</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The reason the call to <code>toUpperCase</code> works is because the typ=
e of <code>message</code> was <em>inferred</em> as being a <code>String</co=
de>.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_variables_vs_fields_in_type_inference"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#_variables_vs_fields_in_type_infe=
rence"></a>Variables vs fields in type inference</h5>
<div class=3D"paragraph">
<p>It is worth noting that although the compiler performs type inference on=
 local variables, it does <strong>not</strong> perform any kind
of type inference on fields, always falling back to the <strong>declared ty=
pe</strong> of a field. To illustrate this, let=E2=80=99s take a
look at this example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">SomeClass</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> someUntypedFi=
eld                                                                </span><=
i class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span=
 class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> someTypedF=
ield                                                               </span><=
i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span=
 class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=3D"pln">

    </span><span class=3D"kwd">void</span><span class=3D"pln"> someMethod</=
span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
        someUntypedField </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"str">'123'</span><span class=3D"pln">      =
                                                  </span><i class=3D"conum"=
 data-value=3D"3"></i><b><span class=3D"pun">(</span><span class=3D"lit">3<=
/span><span class=3D"pun">)</span></b><span class=3D"pln">
        someUntypedField </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> someUntypedField</span><span class=3D"pun">.</span><span class=3D=
"pln">toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln">  =
</span><span class=3D"com">// compile-time error        </span><i class=3D"=
conum" data-value=3D"4"></i><b><span class=3D"com">(4)</span></b><span clas=
s=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">

    </span><span class=3D"kwd">void</span><span class=3D"pln"> someSafeMeth=
od</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span cla=
ss=3D"pun">{</span><span class=3D"pln">
        someTypedField </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"str">'123'</span><span class=3D"pln">          =
                                                </span><i class=3D"conum" d=
ata-value=3D"5"></i><b><span class=3D"pun">(</span><span class=3D"lit">5</s=
pan><span class=3D"pun">)</span></b><span class=3D"pln">
        someTypedField </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> someTypedField</span><span class=3D"pun">.</span><span class=3D"pln">=
toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln">        =
                           </span><i class=3D"conum" data-value=3D"6"></i><=
b><span class=3D"pun">(</span><span class=3D"lit">6</span><span class=3D"pu=
n">)</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">

    </span><span class=3D"kwd">void</span><span class=3D"pln"> someMethodUs=
ingLocalVariable</span><span class=3D"pun">()</span><span class=3D"pln"> </=
span><span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"kwd">def</span><span class=3D"pln"> localVari=
able </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span=
 class=3D"str">'123'</span><span class=3D"pln">                            =
                           </span><i class=3D"conum" data-value=3D"7"></i><=
b><span class=3D"pun">(</span><span class=3D"lit">7</span><span class=3D"pu=
n">)</span></b><span class=3D"pln">
        someUntypedField </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> localVariable</span><span class=3D"pun">.</span><span class=3D"pl=
n">toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln">     =
                             </span><i class=3D"conum" data-value=3D"8"></i=
><b><span class=3D"pun">(</span><span class=3D"lit">8</span><span class=3D"=
pun">)</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>someUntypedField</code> uses <code>def</code> as a declaration ty=
pe</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td><code>someTypedField</code> uses <code>String</code> as a declaration t=
ype</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>we can assign <strong>anything</strong> to <code>someUntypedField</code=
></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>yet calling <code>toUpperCase</code> fails at compile time because the =
field is not typed properly</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"5"></i><b>5</b></td>
<td>we can assign a <code>String</code> to a field of type <code>String</co=
de></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"6"></i><b>6</b></td>
<td>and this time <code>toUpperCase</code> is allowed</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"7"></i><b>7</b></td>
<td>if we assign a <code>String</code> to a local variable</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"8"></i><b>8</b></td>
<td>then calling <code>toUpperCase</code> is allowed on the local variable<=
/td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Why such a difference? The reason is <em>thread safety</em>. At compile =
time, we can=E2=80=99t make <strong>any</strong> guarantee about the type o=
f
a field. Any thread can access any field at any time and between the moment=
 a field is assigned a variable of some
type in a method and the time is is used the line after, another thread may=
 have changed the contents of the field. This
is not the case for local variables: we know if they "escape" or not, so we=
 can make sure that the type of a variable is
constant (or not) over time. Note that even if a field is final, the JVM ma=
kes no guarantee about it, so the type checker
doesn=E2=80=99t behave differently if a field is final or not.</p>
</div>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
This is one of the reasons why we recommend to use <strong>typed</strong> f=
ields. While using <code>def</code> for local variables is perfectly
fine thanks to type inference, this is not the case for fields, which also =
belong to the public API of a class, hence the
type is important.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_collection_literal_type_inference"><a class=3D"anchor" href=3D"h=
ttp://groovy-lang.org/semantics.html#_collection_literal_type_inference"></=
a>Collection literal type inference</h5>
<div class=3D"paragraph">
<p>Groovy provides a syntax for various type literals. There are three nati=
ve collection literals in Groovy:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>lists, using the <code>[]</code> literal</p>
</li>
<li>
<p>maps, using the <code>[:]</code> literal</p>
</li>
<li>
<p>ranges, using <code>from..to</code> (inclusive) and <code>from..&lt;to</=
code> (exclusive)</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>The inferred type of a literal depends on the elements of the literal, a=
s illustrated in the following table:</p>
</div>
<table class=3D"tableblock frame-all grid-all spread">
<colgroup>
<col style=3D"width: 40%;">
<col style=3D"width: 60%;">
</colgroup>
<thead>
<tr>
<th class=3D"tableblock halign-left valign-top">Literal</th>
<th class=3D"tableblock halign-left valign-top">Inferred type</th>
</tr>
</thead>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> list </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">[]</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>java.util.List</code></p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> list </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">[</span><span class=3D"str">'foo'</span><s=
pan class=3D"pun">,</span><span class=3D"str">'bar'</span><span class=3D"pu=
n">]</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>java.util.List&lt;String&gt;</code></p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> list </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">[</span><span class=3D"str">"${foo}"</span=
><span class=3D"pun">,</span><span class=3D"str">"${bar}"</span><span class=
=3D"pun">]</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>java.util.List&lt;GString&gt;</code> be careful, a <code>GString</=
code> is <strong>not</strong> a <code>String</code>!</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> map </span><span class=3D"pun">=3D</span><span class=3D"p=
ln"> </span><span class=3D"pun">[:]</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>java.util.LinkedHashMap</code></p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> map1 </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"pun">[</span><span class=3D"pln">someKey</span>=
<span class=3D"pun">:</span><span class=3D"pln"> </span><span class=3D"str"=
>'someValue'</span><span class=3D"pun">]</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> map2 </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">[<=
/span><span class=3D"str">'someKey'</span><span class=3D"pun">:</span><span=
 class=3D"pln"> </span><span class=3D"str">'someValue'</span><span class=3D=
"pun">]</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>java.util.LinkedHashMap&lt;String,String&gt;</code></p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> map </span><span class=3D"pun">=3D</span><span class=3D"p=
ln"> </span><span class=3D"pun">[</span><span class=3D"str">"${someKey}"</s=
pan><span class=3D"pun">:</span><span class=3D"pln"> </span><span class=3D"=
str">'someValue'</span><span class=3D"pun">]</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>java.util.LinkedHashMap&lt;GString,String&gt;</code> be careful, t=
he key is a <code>GString</code>!</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> intRange </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"lit">0.</span><=
span class=3D"pun">.</span><span class=3D"lit">10</span><span class=3D"pun"=
>)</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>groovy.lang.IntRange</code></p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> charRange </span><span class=3D"pun">=3D</span><span clas=
s=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"str">'a'</span=
><span class=3D"pun">..</span><span class=3D"str">'z'</span><span class=3D"=
pun">)</span></code></pre>
</div>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>groovy.lang.Range&lt;String&gt;</code> : uses the type of the boun=
ds to infer the component type of the range</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class=3D"paragraph">
<p>As you can see, with the noticeable exception of the <code>IntRange</cod=
e>, the inferred type makes use of generics types to describe
the contents of a collection. In case the collection contains elements of d=
ifferent types, the type checker still performs
type inference of the components, but uses the notion of <a href=3D"http://=
groovy-lang.org/semantics.html#section-lub">least upper bound</a>.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"section-lub"><a class=3D"anchor" href=3D"http://groovy-lang.org/s=
emantics.html#section-lub"></a>Least upper bound</h5>
<div class=3D"paragraph">
<p>In Groovy, the <em>least upper bound</em> of two types <code>A</code> an=
d <code>B</code> is defined as a type which:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>superclass corresponds to the common super class of <code>A</code> and <=
code>B</code></p>
</li>
<li>
<p>interfaces correspond to the interfaces implemented by both <code>A</cod=
e> and <code>B</code></p>
</li>
<li>
<p>if <code>A</code> or <code>B</code> is a primitive type and that <code>A=
</code> isn=E2=80=99t equal to <code>B</code>, the least upper bound of <co=
de>A</code> and <code>B</code> is the least
upper bound of their wrapper types</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>If <code>A</code> and <code>B</code> only have one (1) interface in comm=
on and that their common superclass is <code>Object</code>, then the LUB of=
 both
is the common interface.</p>
</div>
<div class=3D"paragraph">
<p>The least upper bound represents the minimal type to which both <code>A<=
/code> and <code>B</code> can be assigned. So for example, if <code>A</code=
> and <code>B</code>
are both <code>String</code>, then the LUB (least upper bound) of both is a=
lso <code>String</code>.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Top</span><span class=3D"pln=
"> </span><span class=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Bottom1</span><span class=3D"pln"> </span><span class=3D"kwd">e=
xtends</span><span class=3D"pln"> </span><span class=3D"typ">Top</span><spa=
n class=3D"pln"> </span><span class=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Bottom2</span><span class=3D"pln"> </span><span class=3D"kwd">e=
xtends</span><span class=3D"pln"> </span><span class=3D"typ">Top</span><spa=
n class=3D"pln"> </span><span class=3D"pun">{}</span><span class=3D"pln">

</span><span class=3D"kwd">assert</span><span class=3D"pln"> leastUpperBoun=
d</span><span class=3D"pun">(</span><span class=3D"typ">String</span><span =
class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">Strin=
g</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=
=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ">Strin=
g</span><span class=3D"pln">                    </span><i class=3D"conum" d=
ata-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1</s=
pan><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> leastUpperBoun=
d</span><span class=3D"pun">(</span><span class=3D"typ">ArrayList</span><sp=
an class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">Li=
nkedList</span><span class=3D"pun">)</span><span class=3D"pln"> </span><spa=
n class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ=
">AbstractList</span><span class=3D"pln">       </span><i class=3D"conum" d=
ata-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit">2</s=
pan><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> leastUpperBoun=
d</span><span class=3D"pun">(</span><span class=3D"typ">ArrayList</span><sp=
an class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">Li=
st</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span clas=
s=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ">List=
</span><span class=3D"pln">                     </span><i class=3D"conum" d=
ata-value=3D"3"></i><b><span class=3D"pun">(</span><span class=3D"lit">3</s=
pan><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> leastUpperBoun=
d</span><span class=3D"pun">(</span><span class=3D"typ">List</span><span cl=
ass=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">List</s=
pan><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"=
pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ">List</spa=
n><span class=3D"pln">                          </span><i class=3D"conum" d=
ata-value=3D"4"></i><b><span class=3D"pun">(</span><span class=3D"lit">4</s=
pan><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> leastUpperBoun=
d</span><span class=3D"pun">(</span><span class=3D"typ">Bottom1</span><span=
 class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">Bott=
om2</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cla=
ss=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ">Top=
</span><span class=3D"pln">                     </span><i class=3D"conum" d=
ata-value=3D"5"></i><b><span class=3D"pun">(</span><span class=3D"lit">5</s=
pan><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> leastUpperBoun=
d</span><span class=3D"pun">(</span><span class=3D"typ">List</span><span cl=
ass=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">Seriali=
zable</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span c=
lass=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"typ">O=
bject</span><span class=3D"pln">                </span><i class=3D"conum" d=
ata-value=3D"6"></i><b><span class=3D"pun">(</span><span class=3D"lit">6</s=
pan><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the LUB of <code>String</code> and <code>String</code> is <code>String<=
/code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>the LUB of <code>ArrayList</code> and <code>LinkedList</code> is their =
common super type, <code>AbstractList</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>the LUB of <code>ArrayList</code> and <code>List</code> is their only c=
ommon interface, <code>List</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>the LUB of two identical interfaces is the interface itself</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"5"></i><b>5</b></td>
<td>the LUB of <code>Bottom1</code> and <code>Bottom2</code> is their super=
class <code>Top</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"6"></i><b>6</b></td>
<td>the LUB of two types which have nothing in common is <code>Object</code=
></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>In those examples, the LUB is always representable as a normal, JVM supp=
orted, type. But Groovy internally represents the LUB
as a type which can be more complex, and that you wouldn=E2=80=99t be able =
to use to define a variable for example. To illustrate this,
let=E2=80=99s continue with this example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">Foo</span><span class=3D=
"pln"> </span><span class=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Top</span><span class=3D"pln"> </span><span class=3D"pun">{}</s=
pan><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Bottom</span><span class=3D"pln"> </span><span class=3D"kwd">ex=
tends</span><span class=3D"pln"> </span><span class=3D"typ">Top</span><span=
 class=3D"pln"> </span><span class=3D"kwd">implements</span><span class=3D"=
pln"> </span><span class=3D"typ">Serializable</span><span class=3D"pun">,</=
span><span class=3D"pln"> </span><span class=3D"typ">Foo</span><span class=
=3D"pln"> </span><span class=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">SerializableFooImpl</span><span class=3D"pln"> </span><span cla=
ss=3D"kwd">implements</span><span class=3D"pln"> </span><span class=3D"typ"=
>Serializable</span><span class=3D"pun">,</span><span class=3D"pln"> </span=
><span class=3D"typ">Foo</span><span class=3D"pln"> </span><span class=3D"p=
un">{}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>What is the least upper bound of <code>Bottom</code> and <code>Serializa=
bleFooImpl</code>? They don=E2=80=99t have a common super class (apart from=
 <code>Object</code>),
but they do share 2 interfaces (<code>Serializable</code> and <code>Foo</co=
de>), so their least upper bound is a type which represents the union of
two interfaces (<code>Serializable</code> and <code>Foo</code>). This type =
cannot be defined in the source code, yet Groovy knows about it.</p>
</div>
<div class=3D"paragraph">
<p>In the context of collection type inference (and generic type inference =
in general), this becomes handy, because the type of the
components is inferred as the least upper bound. We can illustrate why this=
 is important in the following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">Greeter</span><span clas=
s=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> </span><=
span class=3D"kwd">void</span><span class=3D"pln"> greet</span><span class=
=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">}</span><=
span class=3D"pln">                  </span><i class=3D"conum" data-value=
=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1</span><span=
 class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">interface</span><span class=3D"pln"> </span><spa=
n class=3D"typ">Salute</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln"> </span><span class=3D"kwd">void</span><span =
class=3D"pln"> salute</span><span class=3D"pun">()</span><span class=3D"pln=
"> </span><span class=3D"pun">}</span><span class=3D"pln">                 =
 </span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</s=
pan><span class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=
=3D"pln">

</span><span class=3D"kwd">class</span><span class=3D"pln"> A </span><span =
class=3D"kwd">implements</span><span class=3D"pln"> </span><span class=3D"t=
yp">Greeter</span><span class=3D"pun">,</span><span class=3D"pln"> </span><=
span class=3D"typ">Salute</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln">                </span><i class=3D"conum" =
data-value=3D"3"></i><b><span class=3D"pun">(</span><span class=3D"lit">3</=
span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> greet</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln"> println </span><span class=3D"str">"Hello, I=
'm A!"</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span =
class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> salute</span=
><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln"> println </span><span class=3D"str">"Bye fro=
m A!"</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span c=
lass=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> B </span><span =
class=3D"kwd">implements</span><span class=3D"pln"> </span><span class=3D"t=
yp">Greeter</span><span class=3D"pun">,</span><span class=3D"pln"> </span><=
span class=3D"typ">Salute</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln">                </span><i class=3D"conum" =
data-value=3D"4"></i><b><span class=3D"pun">(</span><span class=3D"lit">4</=
span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> greet</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln"> println </span><span class=3D"str">"Hello, I=
'm B!"</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span =
class=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> salute</span=
><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln"> println </span><span class=3D"str">"Bye fro=
m B!"</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span c=
lass=3D"pln">
    </span><span class=3D"kwd">void</span><span class=3D"pln"> </span><span=
 class=3D"kwd">exit</span><span class=3D"pun">()</span><span class=3D"pln">=
 </span><span class=3D"pun">{</span><span class=3D"pln"> println </span><sp=
an class=3D"str">'No way!'</span><span class=3D"pln"> </span><span class=3D=
"pun">}</span><span class=3D"pln">               </span><i class=3D"conum" =
data-value=3D"5"></i><b><span class=3D"pun">(</span><span class=3D"lit">5</=
span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> list </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">[<=
/span><span class=3D"kwd">new</span><span class=3D"pln"> A</span><span clas=
s=3D"pun">(),</span><span class=3D"pln"> </span><span class=3D"kwd">new</sp=
an><span class=3D"pln"> B</span><span class=3D"pun">()]</span><span class=
=3D"pln">                       </span><i class=3D"conum" data-value=3D"6">=
</i><b><span class=3D"pun">(</span><span class=3D"lit">6</span><span class=
=3D"pun">)</span></b><span class=3D"pln">
list</span><span class=3D"pun">.</span><span class=3D"pln">each </span><spa=
n class=3D"pun">{</span><span class=3D"pln">
    it</span><span class=3D"pun">.</span><span class=3D"pln">greet</span><s=
pan class=3D"pun">()</span><span class=3D"pln">                            =
          </span><i class=3D"conum" data-value=3D"7"></i><b><span class=3D"=
pun">(</span><span class=3D"lit">7</span><span class=3D"pun">)</span></b><s=
pan class=3D"pln">
    it</span><span class=3D"pun">.</span><span class=3D"pln">salute</span><=
span class=3D"pun">()</span><span class=3D"pln">                           =
          </span><i class=3D"conum" data-value=3D"8"></i><b><span class=3D"=
pun">(</span><span class=3D"lit">8</span><span class=3D"pun">)</span></b><s=
pan class=3D"pln">
    it</span><span class=3D"pun">.</span><span class=3D"kwd">exit</span><sp=
an class=3D"pun">()</span><span class=3D"pln">                             =
          </span><i class=3D"conum" data-value=3D"9"></i><b><span class=3D"=
pun">(</span><span class=3D"lit">9</span><span class=3D"pun">)</span></b><s=
pan class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the <code>Greeter</code> interface defines a single method, <code>greet=
</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>the <code>Salute</code>  interface defines a single method, <code>salut=
e</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>class <code>A</code> implements both <code>Greeter</code> and <code>Sal=
ute</code> but there=E2=80=99s no explicit interface extending both</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>same for <code>B</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"5"></i><b>5</b></td>
<td>but <code>B</code> defines an additional <code>exit</code> method</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"6"></i><b>6</b></td>
<td>the type of <code>list</code> is inferred as "list of the LUB of <code>=
A</code> and `B`"</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"7"></i><b>7</b></td>
<td>so it is possible to call <code>greet</code> which is defined on both <=
code>A</code> and <code>B</code> through the <code>Greeter</code> interface=
</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"8"></i><b>8</b></td>
<td>and it is possible to call <code>salute</code> which is defined on both=
 <code>A</code> and <code>B</code> through the <code>Salute</code> interfac=
e</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"9"></i><b>9</b></td>
<td>yet calling <code>exit</code> is a compile time error because it doesn=
=E2=80=99t belong to the LUB of <code>A</code> and <code>B</code> (only def=
ined in <code>B</code>)</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The error message will look like:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre>[Static type checking] - Cannot find matching method Greeter or Salute=
#exit()</pre>
</div>
</div>
<div class=3D"paragraph">
<p>which indicates that the <code>exit</code> method is neither defines on =
<code>Greeter</code> nor <code>Salute</code>, which are the two interfaces =
defined
in the least upper bound of <code>A</code> and <code>B</code>.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_instanceof_inference"><a class=3D"anchor" href=3D"http://groovy-=
lang.org/semantics.html#_instanceof_inference"></a>instanceof inference</h5=
>
<div class=3D"paragraph">
<p>In normal, non type checked, Groovy, you can write things like:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Greeter</span><span class=3D=
"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> greeting</=
span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"str">'Hello'</s=
pan><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"=
pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething</spa=
n><span class=3D"pun">(</span><span class=3D"kwd">def</span><span class=3D"=
pln"> o</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span=
 class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">o </span><span class=3D"kwd">insta=
nceof</span><span class=3D"pln"> </span><span class=3D"typ">Greeter</span><=
span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">=
{</span><span class=3D"pln">     </span><i class=3D"conum" data-value=3D"1"=
></i><b><span class=3D"pun">(</span><span class=3D"lit">1</span><span class=
=3D"pun">)</span></b><span class=3D"pln">
        println o</span><span class=3D"pun">.</span><span class=3D"pln">gre=
eting</span><span class=3D"pun">()</span><span class=3D"pln">        </span=
><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><sp=
an class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=3D"pln=
">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

doSomething</span><span class=3D"pun">(</span><span class=3D"kwd">new</span=
><span class=3D"pln"> </span><span class=3D"typ">Greeter</span><span class=
=3D"pun">())</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>guard the method call with an <code>instanceof</code> check</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>make the call</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The method call works because of dynamic dispatch (the method is selecte=
d at runtime). The equivalent code in Java would
require to cast <code>o</code> to a <code>Greeter</code> before calling the=
 <code>greeting</code> method, because methods are selected at compile time=
:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">if</span><spa=
n class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">o <=
/span><span class=3D"kwd">instanceof</span><span class=3D"pln"> </span><spa=
n class=3D"typ">Greeter</span><span class=3D"pun">)</span><span class=3D"pl=
n"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">System</span><span class=3D"pun">.</span><sp=
an class=3D"kwd">out</span><span class=3D"pun">.</span><span class=3D"pln">=
println</span><span class=3D"pun">(((</span><span class=3D"typ">Greeter</sp=
an><span class=3D"pun">)</span><span class=3D"pln">o</span><span class=3D"p=
un">).</span><span class=3D"pln">greeting</span><span class=3D"pun">());</s=
pan><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>However, in Groovy, even if you add <code>@TypeChecked</code> (and thus =
activate type checking) on the <code>doSomething</code> method, the
cast is <strong>not</strong> necessary. The compiler embeds <em>instanceof<=
/em> inference that makes the cast optional.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"section-flow-typing"><a class=3D"anchor" href=3D"http://groovy-la=
ng.org/semantics.html#section-flow-typing"></a>Flow typing</h5>
<div class=3D"paragraph">
<p>Flow typing is an important concept of Groovy in type checked mode and a=
n extension of type inference. The idea is that
the compiler is capable of inferring the type of variables in the flow of t=
he code, not just at initialization:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">void</span><span class=3D"pln"> flowTyping</span=
><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> o </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str">'=
foo'</span><span class=3D"pln">                       </span><i class=3D"co=
num" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit=
">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    o </span><span class=3D"pun">=3D</span><span class=3D"pln"> o</span><sp=
an class=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=
=3D"pun">()</span><span class=3D"pln">                 </span><i class=3D"c=
onum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"li=
t">2</span><span class=3D"pun">)</span></b><span class=3D"pln">
    o </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"lit">9d</span><span class=3D"pln">                              =
</span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</sp=
an><span class=3D"lit">3</span><span class=3D"pun">)</span></b><span class=
=3D"pln">
    o </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"typ">Math</span><span class=3D"pun">.</span><span class=3D"pln">=
sqrt</span><span class=3D"pun">(</span><span class=3D"pln">o</span><span cl=
ass=3D"pun">)</span><span class=3D"pln">                    </span><i class=
=3D"conum" data-value=3D"4"></i><b><span class=3D"pun">(</span><span class=
=3D"lit">4</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>first, <code>o</code> is declared using <code>def</code> and assigned a=
 <code>String</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>the compiler inferred that <code>o</code> is a <code>String</code>, so =
calling <code>toUpperCase</code> is allowed</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td><code>o</code> is reassigned with a <code>double</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>calling <code>Math.sqrt</code> passes compilation because the compiler =
knows that at this point, <code>o</code> is a <code>double</code></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>So the type checker is <em>aware</em> of the fact that the concrete type=
 of a variable is different over time. In particular,
if you replace the last assignment with:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">o </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"lit">9=
d</span><span class=3D"pln">
o </span><span class=3D"pun">=3D</span><span class=3D"pln"> o</span><span c=
lass=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=3D"p=
un">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The type checker will now fail at compile time, because it knows that <c=
ode>o</code> is a <code>double</code> when <code>toUpperCase</code> is call=
ed,
so it=E2=80=99s a type error.</p>
</div>
<div class=3D"paragraph">
<p>It is important to understand that it is not the fact of declaring a var=
iable with <code>def</code> that triggers type inference.
Flow typing works for <strong>any</strong> variable of any type. Declaring =
a variable with an explicit type only constrains what you
can assign to the variable:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">void</span><span class=3D"pln"> flowTypingWithEx=
plicitType</span><span class=3D"pun">()</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">List</span><span class=3D"pln"> list </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pu=
n">[</span><span class=3D"str">'a'</span><span class=3D"pun">,</span><span =
class=3D"str">'b'</span><span class=3D"pun">,</span><span class=3D"str">'c'=
</span><span class=3D"pun">]</span><span class=3D"pln">           </span><i=
 class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span =
class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    list </span><span class=3D"pun">=3D</span><span class=3D"pln"> list</sp=
an><span class=3D"pun">*.</span><span class=3D"pln">toUpperCase</span><span=
 class=3D"pun">()</span><span class=3D"pln">          </span><i class=3D"co=
num" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit=
">2</span><span class=3D"pun">)</span></b><span class=3D"pln">
    list </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><=
span class=3D"str">'foo'</span><span class=3D"pln">                        =
</span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</sp=
an><span class=3D"lit">3</span><span class=3D"pun">)</span></b><span class=
=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>list</code> is declared as an unchecked <code>List</code> and ass=
igned a list literal of `String`s</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>this line passes compilation because of flow typing: the type checker k=
nows that <code>list</code> is at this point a <code>List&lt;String&gt;</co=
de></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>but you can=E2=80=99t assign a <code>String</code> to a <code>List</cod=
e> so this is a type checking error</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>You can also note that even if the variable is declared <strong>without<=
/strong> generics information, the type checker knows what is
the component type. Therefore, such code would fail compilation:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">void</span><span class=3D"pln"> flowTypingWithEx=
plicitType</span><span class=3D"pun">()</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">List</span><span class=3D"pln"> list </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pu=
n">[</span><span class=3D"str">'a'</span><span class=3D"pun">,</span><span =
class=3D"str">'b'</span><span class=3D"pun">,</span><span class=3D"str">'c'=
</span><span class=3D"pun">]</span><span class=3D"pln">           </span><i=
 class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span =
class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">add</span><s=
pan class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)=
</span><span class=3D"pln">                         </span><i class=3D"conu=
m" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit">=
2</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>list</code> is inferred as <code>List&lt;String&gt;</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>so adding an <code>int</code> to a <code>List&lt;String&gt;</code> is a=
 compile-time error</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Fixing this requires adding an explicit generic type to the declaration:=
</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">void</span><span class=3D"pln"> flowTypingWithEx=
plicitType</span><span class=3D"pun">()</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">List</span><span class=3D"pun">&lt;?</span><=
span class=3D"pln"> </span><span class=3D"kwd">extends</span><span class=3D=
"pln"> </span><span class=3D"typ">Serializable</span><span class=3D"pun">&g=
t;</span><span class=3D"pln"> list </span><span class=3D"pun">=3D</span><sp=
an class=3D"pln"> </span><span class=3D"pun">[]</span><span class=3D"pln"> =
                     </span><i class=3D"conum" data-value=3D"1"></i><b><spa=
n class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</=
span></b><span class=3D"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">addAll</span=
><span class=3D"pun">([</span><span class=3D"str">'a'</span><span class=3D"=
pun">,</span><span class=3D"str">'b'</span><span class=3D"pun">,</span><spa=
n class=3D"str">'c'</span><span class=3D"pun">])</span><span class=3D"pln">=
                                  </span><i class=3D"conum" data-value=3D"2=
"></i><b><span class=3D"pun">(</span><span class=3D"lit">2</span><span clas=
s=3D"pun">)</span></b><span class=3D"pln">
    list</span><span class=3D"pun">.</span><span class=3D"pln">add</span><s=
pan class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)=
</span><span class=3D"pln">                                                =
 </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</s=
pan><span class=3D"lit">3</span><span class=3D"pun">)</span></b><span class=
=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>list</code> declared as <code>List&lt;? extends Serializable&gt;<=
/code> and initialized with an empty list</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>elements added to the list conform to the declaration type of the list<=
/td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>so adding an <code>int</code> to a <code>List&lt;? extends Serializable=
&gt;</code> is allowed</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Flow typing has been introduced to reduce the difference in semantics be=
tween classic and static Groovy. In particular,
consider the behavior of this code in Java:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-java" data-lang=3D"java"><span class=3D"kwd">public</span><spa=
n class=3D"pln"> </span><span class=3D"typ">Integer</span><span class=3D"pl=
n"> compute</span><span class=3D"pun">(</span><span class=3D"typ">String</s=
pan><span class=3D"pln"> str</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">return</span><span class=3D"pln"> str</span>=
<span class=3D"pun">.</span><span class=3D"pln">length</span><span class=3D=
"pun">();</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">public</span><span class=3D"pln"> </span><span c=
lass=3D"typ">String</span><span class=3D"pln"> compute</span><span class=3D=
"pun">(</span><span class=3D"typ">Object</span><span class=3D"pln"> o</span=
><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">
    </span><span class=3D"kwd">return</span><span class=3D"pln"> </span><sp=
an class=3D"str">"Nope"</span><span class=3D"pun">;</span><span class=3D"pl=
n">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"com">// ...</span><span class=3D"pln">
</span><span class=3D"typ">Object</span><span class=3D"pln"> string </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"st=
r">"Some string"</span><span class=3D"pun">;</span><span class=3D"pln">    =
      </span><i class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun"=
>(</span><span class=3D"lit">1</span><span class=3D"pun">)</span></b><span =
class=3D"pln">
</span><span class=3D"typ">Object</span><span class=3D"pln"> result </span>=
<span class=3D"pun">=3D</span><span class=3D"pln"> compute</span><span clas=
s=3D"pun">(</span><span class=3D"pln">string</span><span class=3D"pun">);</=
span><span class=3D"pln">        </span><i class=3D"conum" data-value=3D"2"=
></i><b><span class=3D"pun">(</span><span class=3D"lit">2</span><span class=
=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"typ">System</span><span class=3D"pun">.</span><span c=
lass=3D"pln">out</span><span class=3D"pun">.</span><span class=3D"pln">prin=
tln</span><span class=3D"pun">(</span><span class=3D"pln">result</span><spa=
n class=3D"pun">);</span><span class=3D"pln">             </span><i class=
=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</span><span class=
=3D"lit">3</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td><code>o</code> is declared as an <code>Object</code> and assigned a <co=
de>String</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we call the <code>compute</code> method with <code>o</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>and print the result</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>In Java, this code will output <code>Nope</code>, because method selecti=
on is done at compile time and based on the <strong>declared</strong> types=
.
So even if <code>o</code> is a <code>String</code> at runtime, it is still =
the <code>Object</code> version which is called, because <code>o</code> has=
 been declared
as an <code>Object</code>. To be short, in Java, declared types are most im=
portant, be it variable types, parameter types or return
types.</p>
</div>
<div class=3D"paragraph">
<p>In Groovy, we could write:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">int</span><sp=
an class=3D"pln"> compute</span><span class=3D"pun">(</span><span class=3D"=
typ">String</span><span class=3D"pln"> </span><span class=3D"kwd">string</s=
pan><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"=
pun">{</span><span class=3D"pln"> </span><span class=3D"kwd">string</span><=
span class=3D"pun">.</span><span class=3D"pln">length</span><span class=3D"=
pun">()</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span=
 class=3D"pln">
</span><span class=3D"typ">String</span><span class=3D"pln"> compute</span>=
<span class=3D"pun">(</span><span class=3D"typ">Object</span><span class=3D=
"pln"> o</span><span class=3D"pun">)</span><span class=3D"pln"> </span><spa=
n class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"str">"No=
pe"</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span cla=
ss=3D"pln">
</span><span class=3D"typ">Object</span><span class=3D"pln"> o </span><span=
 class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"str">'s=
tring'</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> result </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> compute</span><span class=
=3D"pun">(</span><span class=3D"pln">o</span><span class=3D"pun">)</span><s=
pan class=3D"pln">
println result</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>But this time, it will return <code>6</code>, because the method which i=
s chosen is chosen <strong>at runtime</strong>, based on the <em>actual</em=
>
argument types. So at runtime, <code>o</code> is a <code>String</code> so t=
he <code>String</code> variant is used. Note that this behavior has nothing
to do with type checking, it=E2=80=99s the way Groovy works in general: dyn=
amic dispatch.</p>
</div>
<div class=3D"paragraph">
<p>In type checked Groovy, we want to make sure the type checker selects th=
e same method <strong>at compile time</strong>, that the runtime
would choose. It is not possible in general, due to the semantics of the la=
nguage, but we can make things better with flow
typing. With flow typing, <code>o</code> is <em>inferred</em> as a <code>St=
ring</code> when the <code>compute</code> method is called, so the version =
which takes
a <code>String</code> and returns an <code>int</code> is chosen. This means=
 that we can infer the return type of the method to be an <code>int</code>,=
 and
not a <code>String</code>. This is important for subsequent calls and type =
safety.</p>
</div>
<div class=3D"paragraph">
<p>So in type checked Groovy, flow typing is a very important concept, whic=
h also implies that if <code>@TypeChecked</code> is applied,
methods are selected based on the <em>inferred types</em> of the arguments,=
 not on the declared types. This doesn=E2=80=99t ensure 100%
type safety, because the type checker <em>may</em> select a wrong method, b=
ut it ensures the closest semantics to dynamic Groovy.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_advanced_type_inference"><a class=3D"anchor" href=3D"http://groo=
vy-lang.org/semantics.html#_advanced_type_inference"></a>Advanced type infe=
rence</h5>
<div class=3D"paragraph">
<p>A combination of <a href=3D"http://groovy-lang.org/semantics.html#sectio=
n-flow-typing">flow typing</a> and <a href=3D"http://groovy-lang.org/semant=
ics.html#section-lub">least upper bound inference</a> is used to perform
advanced type inference and ensure type safety in multiple situations. In p=
articular, program control structures are
likely to alter the inferred type of a variable:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Top</span><span class=3D"pln=
"> </span><span class=3D"pun">{</span><span class=3D"pln">
   </span><span class=3D"kwd">void</span><span class=3D"pln"> methodFromTop=
</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Bottom</span><span class=3D"pln"> </span><span class=3D"kwd">ex=
tends</span><span class=3D"pln"> </span><span class=3D"typ">Top</span><span=
 class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
   </span><span class=3D"kwd">void</span><span class=3D"pln"> methodFromBot=
tom</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> o
</span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span class=
=3D"pun">(</span><span class=3D"pln">someCondition</span><span class=3D"pun=
">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span cla=
ss=3D"pln">
    o </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">T=
op</span><span class=3D"pun">()</span><span class=3D"pln">                 =
              </span><i class=3D"conum" data-value=3D"1"></i><b><span class=
=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</span></=
b><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"kwd">else</span><span class=3D"pln"> </span><span class=3D"pun">{</span=
><span class=3D"pln">
    o </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">B=
ottom</span><span class=3D"pun">()</span><span class=3D"pln">              =
              </span><i class=3D"conum" data-value=3D"2"></i><b><span class=
=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"pun">)</span></=
b><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
o</span><span class=3D"pun">.</span><span class=3D"pln">methodFromTop</span=
><span class=3D"pun">()</span><span class=3D"pln">                         =
      </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun"=
>(</span><span class=3D"lit">3</span><span class=3D"pun">)</span></b><span =
class=3D"pln">
o</span><span class=3D"pun">.</span><span class=3D"pln">methodFromBottom</s=
pan><span class=3D"pun">()</span><span class=3D"pln">  </span><span class=
=3D"com">// compilation error      </span><i class=3D"conum" data-value=3D"=
4"></i><b><span class=3D"com">(4)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>if <code>someCondition</code> is true, <code>o</code> is assigned a <co=
de>Top</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>if <code>someCondition</code> is false, <code>o</code> is assigned a <c=
ode>Bottom</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>calling <code>methodFromTop</code> is safe</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>but calling <code>methodFromBottom</code> is not, so it=E2=80=99s a com=
pile time error</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>When the type checker visits an <code>if/else</code> control structure, =
it checks all variables which are assigned in <code>if/else</code> branches
and computes the <a href=3D"http://groovy-lang.org/semantics.html#section-l=
ub">least upper bound</a> of all assignments. This type is the type of the =
inferred variable
after the <code>if/else</code> block, so in this example, <code>o</code> is=
 assigned a <code>Top</code> in the <code>if</code> branch and a <code>Bott=
om</code> in the <code>else</code>
branch. The <a href=3D"http://groovy-lang.org/semantics.html#section-lub">L=
UB</a> of those is a <code>Top</code>, so after the conditional branches, t=
he compiler infers <code>o</code> as being
a <code>Top</code>. Calling <code>methodFromTop</code> will therefore be al=
lowed, but not <code>methodFromBottom</code>.</p>
</div>
<div class=3D"paragraph">
<p>The same reasoning exists with closures and in particular closure shared=
 variables. A closure shared variable is a variable
which is defined outside of a closure, but used inside a closure, as in thi=
s example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> text </span><span class=3D"pun">=3D</span><span class=3D"=
pln"> </span><span class=3D"str">'Hello, world!'</span><span class=3D"pln">=
                          </span><i class=3D"conum" data-value=3D"1"></i><b=
><span class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun=
">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> closure </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln">
    println text                                    </span><i class=3D"conu=
m" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit">=
2</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>a variable named <code>text</code> is declared</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td><code>text</code> is used from inside a closure. It is a <em>closure sh=
ared variable</em>.</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Groovy allows developers to use those variables without requiring them t=
o be final. This means that a closure shared
variable can be reassigned inside a closure:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">String</span>=
<span class=3D"pln"> result
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> </span>=
<span class=3D"typ">String</span><span class=3D"pln"> it </span><span class=
=3D"pun">-&gt;</span><span class=3D"pln">
    result </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span=
><span class=3D"str">"Result: $it"</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
result </span><span class=3D"pun">=3D</span><span class=3D"pln"> result</sp=
an><span class=3D"pun">?.</span><span class=3D"pln">toUpperCase</span><span=
 class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The problem is that a closure is an independent block of code that can b=
e executed (or not) at <strong>any</strong> time. In particular,
<code>doSomething</code> may be asynchronous, for example. This means that =
the body of a closure doesn=E2=80=99t belong to the main control
flow. For that reason, the type checker also computes, for each closure sha=
red variable, the <a href=3D"http://groovy-lang.org/semantics.html#section-=
lub">LUB</a> of all
assignments of the variable, and will use that <code>LUB</code> as the infe=
rred type outside of the scope of the closure, like in
this example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Top</span><span class=3D"pln=
"> </span><span class=3D"pun">{</span><span class=3D"pln">
   </span><span class=3D"kwd">void</span><span class=3D"pln"> methodFromTop=
</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">Bottom</span><span class=3D"pln"> </span><span class=3D"kwd">ex=
tends</span><span class=3D"pln"> </span><span class=3D"typ">Top</span><span=
 class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
   </span><span class=3D"kwd">void</span><span class=3D"pln"> methodFromBot=
tom</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> o </span><span cl=
ass=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">new</=
span><span class=3D"pln"> </span><span class=3D"typ">Top</span><span class=
=3D"pun">()</span><span class=3D"pln">                               </span=
><i class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><sp=
an class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln=
">
</span><span class=3D"typ">Thread</span><span class=3D"pun">.</span><span c=
lass=3D"pln">start </span><span class=3D"pun">{</span><span class=3D"pln">
    o </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><spa=
n class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">B=
ottom</span><span class=3D"pun">()</span><span class=3D"pln">              =
              </span><i class=3D"conum" data-value=3D"2"></i><b><span class=
=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"pun">)</span></=
b><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
o</span><span class=3D"pun">.</span><span class=3D"pln">methodFromTop</span=
><span class=3D"pun">()</span><span class=3D"pln">                         =
      </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun"=
>(</span><span class=3D"lit">3</span><span class=3D"pun">)</span></b><span =
class=3D"pln">
o</span><span class=3D"pun">.</span><span class=3D"pln">methodFromBottom</s=
pan><span class=3D"pun">()</span><span class=3D"pln">  </span><span class=
=3D"com">// compilation error      </span><i class=3D"conum" data-value=3D"=
4"></i><b><span class=3D"com">(4)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>a closure-shared variable is first assigned a <code>Top</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>inside the closure, it is assigned a <code>Bottom</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td><code>methodFromTop</code> is allowed</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td><code>methodFromBottom</code> is a compilation error</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Here, it is clear that when <code>methodFromBottom</code> is called, the=
re=E2=80=99s no guarantee, at compile-time or runtime that the
type of <code>o</code> will <em>effectively</em> be a <code>Bottom</code>. =
There are chances that it will be, but we can=E2=80=99t make sure, because =
it=E2=80=99s
asynchronous. So the type checker will only allow calls on the <a href=3D"h=
ttp://groovy-lang.org/semantics.html#section-lub">least upper bound</a>, wh=
ich is here a <code>Top</code>.</p>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_closures_and_type_inference"><a class=3D"anchor" href=3D"http://=
groovy-lang.org/semantics.html#_closures_and_type_inference"></a>6.2.6. Clo=
sures and type inference</h4>
<div class=3D"paragraph">
<p>The type checker performs special inference on closures, resulting on ad=
ditional checks on one side and improved fluency
on the other side.</p>
</div>
<div class=3D"sect4">
<h5 id=3D"_return_type_inference"><a class=3D"anchor" href=3D"http://groovy=
-lang.org/semantics.html#_return_type_inference"></a>Return type inference<=
/h5>
<div class=3D"paragraph">
<p>The first thing that the type checker is capable of doing is inferring t=
he <em>return type</em> of a closure. This is simply
 illustrated in the following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">transform</span><span clas=
s=3D"pun">.</span><span class=3D"typ">TypeChecked</span><span class=3D"pln"=
>
</span><span class=3D"kwd">int</span><span class=3D"pln"> testClosureReturn=
TypeInference</span><span class=3D"pun">(</span><span class=3D"typ">String<=
/span><span class=3D"pln"> arg</span><span class=3D"pun">)</span><span clas=
s=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> cl </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"pun">=
{</span><span class=3D"pln"> </span><span class=3D"str">"Arg: $arg"</span><=
span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">=
                                </span><i class=3D"conum" data-value=3D"1">=
</i><b><span class=3D"pun">(</span><span class=3D"lit">1</span><span class=
=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> val </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> cl</span><span class=3D"pu=
n">()</span><span class=3D"pln">                                          <=
/span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</spa=
n><span class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=
=3D"pln">

    val</span><span class=3D"pun">.</span><span class=3D"pln">length</span>=
<span class=3D"pun">()</span><span class=3D"pln">                          =
                  </span><i class=3D"conum" data-value=3D"3"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">3</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>a closure is defined, and it returns a string (more precisely a <code>G=
String</code>)</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we call the closure and assign the result to a variable</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>the type checker inferred that the closure would return a string, so ca=
lling <code>length()</code> is allowed</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>As you can see, unlike a method which declares its return type explicitl=
y, there=E2=80=99s no need to declare the return type
of a closure: its type is inferred from the body of the closure.</p>
</div>
<div class=3D"sidebarblock">
<div class=3D"content">
<div class=3D"title">Closures vs methods</div>
<div class=3D"paragraph">
<p>It=E2=80=99s worth noting that return type inference is only applicable =
to closures. While the type checker could do the
same on a method, it is in practice not desirable: <em>in general</em>, met=
hods can be overridden and it is not statically
possible to make sure that the method which is called is not an overridden =
version. So flow typing would actually
think that a method returns something, while in reality, it could return so=
mething else, like illustrated in the
following example:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@TypeChecked<=
/span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> A </span><span =
class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> compute</span=
><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln"> </span><span class=3D"str">'some string'</s=
pan><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"=
pln">             </span><i class=3D"conum" data-value=3D"1"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> computeFully<=
/span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
        compute</span><span class=3D"pun">().</span><span class=3D"pln">toU=
pperCase</span><span class=3D"pun">()</span><span class=3D"pln">           =
      </span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun"=
>(</span><span class=3D"lit">2</span><span class=3D"pun">)</span></b><span =
class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"lit">@TypeChecked</span><span class=3D"pln">
</span><span class=3D"kwd">class</span><span class=3D"pln"> B </span><span =
class=3D"kwd">extends</span><span class=3D"pln"> A </span><span class=3D"pu=
n">{</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> compute</span=
><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln"> </span><span class=3D"lit">123</span><span =
class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">     =
                  </span><i class=3D"conum" data-value=3D"3"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">3</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>class <code>A</code> defines a method <code>compute</code> which effect=
ively returns a <code>String</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>this will fail compilation because the return type of <code>compute</co=
de> is <code>def</code>(aka <code>Object</code>)</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>class <code>B</code> extends <code>A</code> and redefines <code>compute=
</code>, this type returning an <code>int</code></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>As you can see, if the type checker relied on the inferred return type o=
f a method, with <a href=3D"http://groovy-lang.org/semantics.html#section-f=
low-typing">flow typing</a>,
the type checker could determine that it is ok to call <code>toUpperCase</c=
ode>. It is in fact an <strong>error</strong>, because a subclass can
override <code>compute</code> and return a different object. Here, <code>B#=
compute</code> returns an <code>int</code>, so someone calling <code>comput=
eFully</code>
on an instance of <code>B</code> would see a runtime error. The compiler pr=
events this from happening by using the declared return
type of methods instead of the inferred return type.</p>
</div>
<div class=3D"paragraph">
<p>For consistency, this behavior is the same for <strong>every</strong> me=
thod, even if they are static or final.</p>
</div>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_parameter_type_inference"><a class=3D"anchor" href=3D"http://gro=
ovy-lang.org/semantics.html#_parameter_type_inference"></a>Parameter type i=
nference</h5>
<div class=3D"paragraph">
<p>In addition to the return type, it is possible for a closure to infer it=
s parameter types from the context. There are
two ways for the compiler to infer the parameter types:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>through <em>implicit SAM type coercion</em></p>
</li>
<li>
<p>through API metadata</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>To illustrate this, lets start with an example that will fail compilatio=
n due to the inability for the type checker
to infer the parameter types:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Person</span><span class=3D"=
pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> name
    </span><span class=3D"kwd">int</span><span class=3D"pln"> age
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"kwd">void</span><span class=3D"pln"> inviteIf</span><=
span class=3D"pun">(</span><span class=3D"typ">Person</span><span class=3D"=
pln"> p</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span=
 class=3D"typ">Closure</span><span class=3D"pun">&lt;</span><span class=3D"=
typ">Boolean</span><span class=3D"pun">&gt;</span><span class=3D"pln"> pred=
icate</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span c=
lass=3D"pun">{</span><span class=3D"pln">           </span><i class=3D"conu=
m" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">=
1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">predicate</span><span class=3D"pun=
">.</span><span class=3D"pln">call</span><span class=3D"pun">(</span><span =
class=3D"pln">p</span><span class=3D"pun">))</span><span class=3D"pln"> </s=
pan><span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"com">// send invite</span><span class=3D"pln"=
>
        </span><span class=3D"com">// ...</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"lit">@groovy</span><span class=3D"pun">.</span><span =
class=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"ty=
p">TypeChecked</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> failCompilation<=
/span><span class=3D"pun">()</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">Person</span><span class=3D"pln"> p </span><=
span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd=
">new</span><span class=3D"pln"> </span><span class=3D"typ">Person</span><s=
pan class=3D"pun">(</span><span class=3D"pln">name</span><span class=3D"pun=
">:</span><span class=3D"pln"> </span><span class=3D"str">'Gerard'</span><s=
pan class=3D"pun">,</span><span class=3D"pln"> age</span><span class=3D"pun=
">:</span><span class=3D"pln"> </span><span class=3D"lit">55</span><span cl=
ass=3D"pun">)</span><span class=3D"pln">
    inviteIf</span><span class=3D"pun">(</span><span class=3D"pln">p</span>=
<span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln">                                              =
 </span><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</s=
pan><span class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=
=3D"pln">
        it</span><span class=3D"pun">.</span><span class=3D"pln">age </span=
><span class=3D"pun">&gt;=3D</span><span class=3D"pln"> </span><span class=
=3D"lit">18</span><span class=3D"pln"> </span><span class=3D"com">// No suc=
h property: age                   </span><i class=3D"conum" data-value=3D"3=
"></i><b><span class=3D"com">(3)</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the <code>inviteIf</code> method accepts a <code>Person</code> and a <c=
ode>Closure</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>we call it with a <code>Person</code> and a <code>Closure</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>yet <code>it</code> is not statically known as being a <code>Person</co=
de> and compilation fails</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>In this example, the closure body contains <code>it.age</code>. With dyn=
amic, not type checked code, this would work, because the
type of <code>it</code> would be a <code>Person</code> at runtime. Unfortun=
ately, at compile-time, there=E2=80=99s no way to know what is the type
of <code>it</code>, just by reading the signature of <code>inviteIf</code>.=
</p>
</div>
<div class=3D"sect5">
<h6 id=3D"_explicit_closure_parameters"><a class=3D"anchor" href=3D"http://=
groovy-lang.org/semantics.html#_explicit_closure_parameters"></a>Explicit c=
losure parameters</h6>
<div class=3D"paragraph">
<p>To be short, the type checker doesn=E2=80=99t have enough contextual inf=
ormation on the <code>inviteIf</code> method to determine statically
the type of <code>it</code>. This means that the method call needs to be re=
written like this:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">inviteIf</spa=
n><span class=3D"pun">(</span><span class=3D"pln">p</span><span class=3D"pu=
n">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span cl=
ass=3D"pln"> </span><span class=3D"typ">Person</span><span class=3D"pln"> i=
t </span><span class=3D"pun">-&gt;</span><span class=3D"pln">              =
                    </span><i class=3D"conum" data-value=3D"1"></i><b><span=
 class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">)</s=
pan></b><span class=3D"pln">
    it</span><span class=3D"pun">.</span><span class=3D"pln">age </span><sp=
an class=3D"pun">&gt;=3D</span><span class=3D"pln"> </span><span class=3D"l=
it">18</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the type of <code>it</code> needs to be declared explicitly</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>By explicitly declaring the type of the <code>it</code> variable, you ca=
n workaround the problem and make this code statically
checked.</p>
</div>
</div>
<div class=3D"sect5">
<h6 id=3D"_parameters_inferred_from_single_abstract_method_types"><a class=
=3D"anchor" href=3D"http://groovy-lang.org/semantics.html#_parameters_infer=
red_from_single_abstract_method_types"></a>Parameters inferred from single-=
abstract method types</h6>
<div class=3D"paragraph">
<p>For an API or framework designer, there are two ways to make this more e=
legant for users, so that they don=E2=80=99t have to
declare an explicit type for the closure parameters. The first one, and eas=
iest, is to replace the closure with a
SAM type:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">interface</sp=
an><span class=3D"pln"> </span><span class=3D"typ">Predicate</span><span cl=
ass=3D"pun">&lt;</span><span class=3D"typ">On</span><span class=3D"pun">&gt=
;</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln"> </span><span class=3D"kwd">boolean</span><span class=3D"pln"> app=
ly</span><span class=3D"pun">(</span><span class=3D"typ">On</span><span cla=
ss=3D"pln"> e</span><span class=3D"pun">)</span><span class=3D"pln"> </span=
><span class=3D"pun">}</span><span class=3D"pln">                 </span><i=
 class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span =
class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">

</span><span class=3D"kwd">void</span><span class=3D"pln"> inviteIf</span><=
span class=3D"pun">(</span><span class=3D"typ">Person</span><span class=3D"=
pln"> p</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span=
 class=3D"typ">Predicate</span><span class=3D"pun">&lt;</span><span class=
=3D"typ">Person</span><span class=3D"pun">&gt;</span><span class=3D"pln"> p=
redicate</span><span class=3D"pun">)</span><span class=3D"pln"> </span><spa=
n class=3D"pun">{</span><span class=3D"pln">          </span><i class=3D"co=
num" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=3D"lit=
">2</span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">predicate</span><span class=3D"pun=
">.</span><span class=3D"pln">apply</span><span class=3D"pun">(</span><span=
 class=3D"pln">p</span><span class=3D"pun">))</span><span class=3D"pln"> </=
span><span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"com">// send invite</span><span class=3D"pln"=
>
        </span><span class=3D"com">// ...</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"lit">@groovy</span><span class=3D"pun">.</span><span =
class=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"ty=
p">TypeChecked</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> passesCompilatio=
n</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span clas=
s=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">Person</span><span class=3D"pln"> p </span><=
span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd=
">new</span><span class=3D"pln"> </span><span class=3D"typ">Person</span><s=
pan class=3D"pun">(</span><span class=3D"pln">name</span><span class=3D"pun=
">:</span><span class=3D"pln"> </span><span class=3D"str">'Gerard'</span><s=
pan class=3D"pun">,</span><span class=3D"pln"> age</span><span class=3D"pun=
">:</span><span class=3D"pln"> </span><span class=3D"lit">55</span><span cl=
ass=3D"pun">)</span><span class=3D"pln">

    inviteIf</span><span class=3D"pun">(</span><span class=3D"pln">p</span>=
<span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun"=
>{</span><span class=3D"pln">                                              =
 </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</s=
pan><span class=3D"lit">3</span><span class=3D"pun">)</span></b><span class=
=3D"pln">
        it</span><span class=3D"pun">.</span><span class=3D"pln">age </span=
><span class=3D"pun">&gt;=3D</span><span class=3D"pln"> </span><span class=
=3D"lit">18</span><span class=3D"pln">                                     =
       </span><i class=3D"conum" data-value=3D"4"></i><b><span class=3D"pun=
">(</span><span class=3D"lit">4</span><span class=3D"pun">)</span></b><span=
 class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>declare a <code>SAM</code> interface with an <code>apply</code> method<=
/td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td><code>inviteIf</code> now uses a <code>Predicate&lt;Person&gt;</code> i=
nstead of a <code>Closure&lt;Boolean&gt;</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>there=E2=80=99s no need to declare the type of the <code>it</code> vari=
able anymore</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td><code>it.age</code> compiles properly, the type of <code>it</code> is i=
nferred from the <code>Predicate#apply</code> method signature</td>
</tr>
</tbody></table>
</div>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
By using this technique, we leverage the <em>automatic coercion of closures=
 to SAM types</em> feature of Groovy. The
question whether you should use a <em>SAM type</em> or a <em>Closure</em> r=
eally depends on what you need to do. In a lot of cases,
using a SAM interface is enough, especially if you consider functional inte=
rfaces as they are found in Java 8. However,
closures provide features that are not accessible to functional interfaces.=
 In particular, closures can have a delegate,
and owner and can be manipulated as objects (for example, cloned, serialize=
d, curried, =E2=80=A6=E2=80=8B) before being called. They can
also support multiple signatures (polymorphism). So if you need that kind o=
f manipulation, it is preferable to switch to
the most advanced type inference annotations which are described below.
</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The original issue that needs to be solved when it comes to closure para=
meter type inference, that is to say, statically
determining the types of the arguments of a closure <em>without</em> having=
 to have them explicitly declared, is that the Groovy
type system inherits the Java type system, which is insufficient to describ=
e the types of the arguments.</p>
</div>
</div>
<div class=3D"sect5">
<h6 id=3D"_the_code_closureparams_code_annotation"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#_the_code_closureparams_code_anno=
tation"></a>The <code>@ClosureParams</code> annotation</h6>
<div class=3D"paragraph">
<p>Groovy provides an annotation, <code>@ClosureParams</code> which is aime=
d at completing type information. This annotation is primarily
aimed at framework and API developers who want to extend the capabilities o=
f the type checker by providing type inference
metadata. This is important if your library makes use of closures and that =
you want the maximum level of tooling support
too.</p>
</div>
<div class=3D"paragraph">
<p>Let=E2=80=99s illustrate this by fixing the original example, introducin=
g the <code>@ClosureParams</code> annotation:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">ClosureParams</span=
><span class=3D"pln">
</span><span class=3D"kwd">import</span><span class=3D"pln"> groovy</span><=
span class=3D"pun">.</span><span class=3D"pln">transform</span><span class=
=3D"pun">.</span><span class=3D"pln">stc</span><span class=3D"pun">.</span>=
<span class=3D"typ">FirstParam</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> inviteIf</span><=
span class=3D"pun">(</span><span class=3D"typ">Person</span><span class=3D"=
pln"> p</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span=
 class=3D"lit">@ClosureParams</span><span class=3D"pun">(</span><span class=
=3D"typ">FirstParam</span><span class=3D"pun">)</span><span class=3D"pln"> =
</span><span class=3D"typ">Closure</span><span class=3D"pun">&lt;</span><sp=
an class=3D"typ">Boolean</span><span class=3D"pun">&gt;</span><span class=
=3D"pln"> predicate</span><span class=3D"pun">)</span><span class=3D"pln"> =
</span><span class=3D"pun">{</span><span class=3D"pln">        </span><i cl=
ass=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span cla=
ss=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">predicate</span><span class=3D"pun=
">.</span><span class=3D"pln">call</span><span class=3D"pun">(</span><span =
class=3D"pln">p</span><span class=3D"pun">))</span><span class=3D"pln"> </s=
pan><span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"com">// send invite</span><span class=3D"pln"=
>
        </span><span class=3D"com">// ...</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
inviteIf</span><span class=3D"pun">(</span><span class=3D"pln">p</span><spa=
n class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</=
span><span class=3D"pln">                                                  =
                     </span><i class=3D"conum" data-value=3D"2"></i><b><spa=
n class=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"pun">)</=
span></b><span class=3D"pln">
    it</span><span class=3D"pun">.</span><span class=3D"pln">age </span><sp=
an class=3D"pun">&gt;=3D</span><span class=3D"pln"> </span><span class=3D"l=
it">18</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>the closure parameter is annotated with <code>@ClosureParams</code></td=
>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>it=E2=80=99s not necessary to use an explicit type for <code>it</code>,=
 which is inferred</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The <code>@ClosureParams</code> annotation minimally accepts one argumen=
t, which is named a <em>type hint</em>. A type hint is a class which
is responsible for completing type information at compile time for the clos=
ure. In this example, the type hint being used
is <code>groovy.transform.stc.FirstParam</code> which indicated to the type=
 checker that the closure will accept one parameter
whose type is the type of the first parameter of the method. In this case, =
the first parameter of the method is <code>Person</code>,
so it indicates to the type checker that the first parameter of the closure=
 is in fact a <code>Person</code>.</p>
</div>
<div class=3D"paragraph">
<p>A second optional argument is named <em>options</em>. Its semantics depe=
nd on the <em>type hint</em> class. Groovy comes with
various bundled type hints, illustrated in the table below:</p>
</div>
<table class=3D"tableblock frame-all grid-all spread">
<caption class=3D"title">Table 2. Predefined type hints</caption>
<colgroup>
<col style=3D"width: 16.6666%;">
<col style=3D"width: 16.6666%;">
<col style=3D"width: 66.6668%;">
</colgroup>
<thead>
<tr>
<th class=3D"tableblock halign-left valign-top">Type hint</th>
<th class=3D"tableblock halign-left valign-top">Polymorphic?</th>
<th class=3D"tableblock halign-left valign-top">Description and examples</t=
h>
</tr>
</thead>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>FirstParam</code><br>
<code>SecondParam</code><br>
<code>ThirdParam</code></p>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">No<=
/p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>The first (resp. second, third) parameter type of the method<br></p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">FirstParam</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething</spa=
n><span class=3D"pun">(</span><span class=3D"typ">String</span><span class=
=3D"pln"> str</span><span class=3D"pun">,</span><span class=3D"pln"> </span=
><span class=3D"lit">@ClosureParams</span><span class=3D"pun">(</span><span=
 class=3D"typ">FirstParam</span><span class=3D"pun">)</span><span class=3D"=
pln"> </span><span class=3D"typ">Closure</span><span class=3D"pln"> c</span=
><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">
    c</span><span class=3D"pun">(</span><span class=3D"pln">str</span><span=
 class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">(</span><span class=3D"str">'foo'</sp=
an><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"p=
un">{</span><span class=3D"pln"> println it</span><span class=3D"pun">.</sp=
an><span class=3D"pln">toUpperCase</span><span class=3D"pun">()</span><span=
 class=3D"pln"> </span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">SecondParam</span><=
span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> withHash</span><=
span class=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"=
pln"> str</span><span class=3D"pun">,</span><span class=3D"pln"> </span><sp=
an class=3D"kwd">int</span><span class=3D"pln"> seed</span><span class=3D"p=
un">,</span><span class=3D"pln"> </span><span class=3D"lit">@ClosureParams<=
/span><span class=3D"pun">(</span><span class=3D"typ">SecondParam</span><sp=
an class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"typ">Cl=
osure</span><span class=3D"pln"> c</span><span class=3D"pun">)</span><span =
class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    c</span><span class=3D"pun">(</span><span class=3D"lit">31</span><span =
class=3D"pun">*</span><span class=3D"pln">str</span><span class=3D"pun">.</=
span><span class=3D"pln">hashCode</span><span class=3D"pun">()+</span><span=
 class=3D"pln">seed</span><span class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
withHash</span><span class=3D"pun">(</span><span class=3D"str">'foo'</span>=
<span class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"pun"=
>(</span><span class=3D"kwd">int</span><span class=3D"pun">)</span><span cl=
ass=3D"typ">System</span><span class=3D"pun">.</span><span class=3D"pln">cu=
rrentTimeMillis</span><span class=3D"pun">())</span><span class=3D"pln"> </=
span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> mod </span><s=
pan class=3D"pun">=3D</span><span class=3D"pln"> it</span><span class=3D"pu=
n">%</span><span class=3D"lit">2</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">ThirdParam</span><s=
pan class=3D"pln">
</span><span class=3D"typ">String</span><span class=3D"pln"> format</span><=
span class=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"=
pln"> prefix</span><span class=3D"pun">,</span><span class=3D"pln"> </span>=
<span class=3D"typ">String</span><span class=3D"pln"> postfix</span><span c=
lass=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"typ">String=
</span><span class=3D"pln"> o</span><span class=3D"pun">,</span><span class=
=3D"pln"> </span><span class=3D"lit">@ClosureParams</span><span class=3D"pu=
n">(</span><span class=3D"typ">ThirdParam</span><span class=3D"pun">)</span=
><span class=3D"pln"> </span><span class=3D"typ">Closure</span><span class=
=3D"pln"> c</span><span class=3D"pun">)</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"str">"$prefix${c(o)}$postfix"</span><span class=
=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">assert</span><span class=3D"pln"> format</span><=
span class=3D"pun">(</span><span class=3D"str">'foo'</span><span class=3D"p=
un">,</span><span class=3D"pln"> </span><span class=3D"str">'bar'</span><sp=
an class=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"str">'b=
az'</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cla=
ss=3D"pun">{</span><span class=3D"pln">
    it</span><span class=3D"pun">.</span><span class=3D"pln">toUpperCase</s=
pan><span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln"> </span><span class=
=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span class=3D"str">'fooB=
AZbar'</span></code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>FirstParam.FirstGenericType</code><br>
<code>SecondParam.FirstGenericType</code><br>
<code>ThirdParam.FirstGenericType</code></p>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">No<=
/p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>The first generic type of the first (resp. second, third) parameter of t=
he method<br></p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">FirstParam</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">public</span><span class=3D"pln"> </span><span c=
lass=3D"pun">&lt;</span><span class=3D"pln">T</span><span class=3D"pun">&gt=
;</span><span class=3D"pln"> </span><span class=3D"kwd">void</span><span cl=
ass=3D"pln"> doSomething</span><span class=3D"pun">(</span><span class=3D"t=
yp">List</span><span class=3D"pun">&lt;</span><span class=3D"pln">T</span><=
span class=3D"pun">&gt;</span><span class=3D"pln"> strings</span><span clas=
s=3D"pun">,</span><span class=3D"pln"> </span><span class=3D"lit">@ClosureP=
arams</span><span class=3D"pun">(</span><span class=3D"typ">FirstParam</spa=
n><span class=3D"pun">.</span><span class=3D"typ">FirstGenericType</span><s=
pan class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"typ">C=
losure</span><span class=3D"pln"> c</span><span class=3D"pun">)</span><span=
 class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    strings</span><span class=3D"pun">.</span><span class=3D"pln">each </sp=
an><span class=3D"pun">{</span><span class=3D"pln">
        c</span><span class=3D"pun">(</span><span class=3D"pln">it</span><s=
pan class=3D"pun">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">([</span><span class=3D"str">'foo'</s=
pan><span class=3D"pun">,</span><span class=3D"str">'bar'</span><span class=
=3D"pun">])</span><span class=3D"pln"> </span><span class=3D"pun">{</span><=
span class=3D"pln"> println it</span><span class=3D"pun">.</span><span clas=
s=3D"pln">toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln=
"> </span><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">([</span><span class=3D"lit">1</span>=
<span class=3D"pun">,</span><span class=3D"lit">2</span><span class=3D"pun"=
>,</span><span class=3D"lit">3</span><span class=3D"pun">])</span><span cla=
ss=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln"> println=
</span><span class=3D"pun">(</span><span class=3D"lit">2</span><span class=
=3D"pun">*</span><span class=3D"pln">it</span><span class=3D"pun">)</span><=
span class=3D"pln"> </span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Variants for <code>SecondGenericType</code> and <code>ThirdGenericType</=
code> exist for all <code>FirstParam</code>, <code>SecondParam</code> and <=
code>ThirdParam</code>
type hints.</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>SimpleType</code></p>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">No<=
/p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>A type hint for which the type of closure parameters comes from the opti=
ons string.<br></p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">SimpleType</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">public</span><span class=3D"pln"> </span><span c=
lass=3D"kwd">void</span><span class=3D"pln"> doSomething</span><span class=
=3D"pun">(</span><span class=3D"lit">@ClosureParams</span><span class=3D"pu=
n">(</span><span class=3D"pln">value</span><span class=3D"pun">=3D</span><s=
pan class=3D"typ">SimpleType</span><span class=3D"pun">,</span><span class=
=3D"pln">options</span><span class=3D"pun">=3D[</span><span class=3D"str">'=
java.lang.String'</span><span class=3D"pun">,</span><span class=3D"str">'in=
t'</span><span class=3D"pun">])</span><span class=3D"pln"> </span><span cla=
ss=3D"typ">Closure</span><span class=3D"pln"> c</span><span class=3D"pun">)=
</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=
=3D"pln">
    c</span><span class=3D"pun">(</span><span class=3D"str">'foo'</span><sp=
an class=3D"pun">,</span><span class=3D"lit">3</span><span class=3D"pun">)<=
/span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> str</sp=
an><span class=3D"pun">,</span><span class=3D"pln"> len </span><span class=
=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> str</span>=
<span class=3D"pun">.</span><span class=3D"pln">length</span><span class=3D=
"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span=
><span class=3D"pln"> len
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>This type hint supports a <strong>single</strong> signature and each of =
the parameter is specified as a value of the <em>options</em> array
using a fully-qualified type name or a primitive type.</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>MapEntryOrKeyValue</code></p>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Yes=
</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>A dedicated type hint for closures that either work on a <code>Map.Entry=
</code> single parameter, or two parameters corresponding
to the key and the value.<br></p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">MapEntryOrKeyValue<=
/span><span class=3D"pln">
</span><span class=3D"kwd">public</span><span class=3D"pln"> </span><span c=
lass=3D"pun">&lt;</span><span class=3D"pln">K</span><span class=3D"pun">,</=
span><span class=3D"pln">V</span><span class=3D"pun">&gt;</span><span class=
=3D"pln"> </span><span class=3D"kwd">void</span><span class=3D"pln"> doSome=
thing</span><span class=3D"pun">(</span><span class=3D"typ">Map</span><span=
 class=3D"pun">&lt;</span><span class=3D"pln">K</span><span class=3D"pun">,=
</span><span class=3D"pln">V</span><span class=3D"pun">&gt;</span><span cla=
ss=3D"pln"> map</span><span class=3D"pun">,</span><span class=3D"pln"> </sp=
an><span class=3D"lit">@ClosureParams</span><span class=3D"pun">(</span><sp=
an class=3D"typ">MapEntryOrKeyValue</span><span class=3D"pun">)</span><span=
 class=3D"pln"> </span><span class=3D"typ">Closure</span><span class=3D"pln=
"> c</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"com">// ...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">([</span><span class=3D"pln">a</span>=
<span class=3D"pun">:</span><span class=3D"pln"> </span><span class=3D"str"=
>'A'</span><span class=3D"pun">])</span><span class=3D"pln"> </span><span c=
lass=3D"pun">{</span><span class=3D"pln"> k</span><span class=3D"pun">,</sp=
an><span class=3D"pln">v </span><span class=3D"pun">-&gt;</span><span class=
=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> k</span><s=
pan class=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=
=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</s=
pan><span class=3D"pln"> v</span><span class=3D"pun">.</span><span class=3D=
"pln">toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">([</span><span class=3D"pln">abc</spa=
n><span class=3D"pun">:</span><span class=3D"pln"> </span><span class=3D"li=
t">3</span><span class=3D"pun">])</span><span class=3D"pln"> </span><span c=
lass=3D"pun">{</span><span class=3D"pln"> e </span><span class=3D"pun">-&gt=
;</span><span class=3D"pln">
    </span><span class=3D"kwd">assert</span><span class=3D"pln"> e</span><s=
pan class=3D"pun">.</span><span class=3D"pln">key</span><span class=3D"pun"=
>.</span><span class=3D"pln">length</span><span class=3D"pun">()</span><spa=
n class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln=
"> e</span><span class=3D"pun">.</span><span class=3D"pln">value
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>This type hint <strong>requires</strong> that the first argument is a <c=
ode>Map</code> type, and infers the closure parameter types from the map
actual key/value types.</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>FromAbstractTypeMethods</code></p>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Yes=
</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Infers closure parameter types from the abstract method of some type. A =
signature is inferred for <strong>each</strong> abstract method.<br></p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">FromAbstractTypeMet=
hods</span><span class=3D"pln">
</span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><span=
 class=3D"kwd">class</span><span class=3D"pln"> </span><span class=3D"typ">=
Foo</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span cla=
ss=3D"pln">
    </span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><=
span class=3D"kwd">void</span><span class=3D"pln"> firstSignature</span><sp=
an class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pln">=
 x</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span clas=
s=3D"kwd">int</span><span class=3D"pln"> y</span><span class=3D"pun">)</spa=
n><span class=3D"pln">
    </span><span class=3D"kwd">abstract</span><span class=3D"pln"> </span><=
span class=3D"kwd">void</span><span class=3D"pln"> secondSignature</span><s=
pan class=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"p=
ln"> str</span><span class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething</spa=
n><span class=3D"pun">(</span><span class=3D"lit">@ClosureParams</span><spa=
n class=3D"pun">(</span><span class=3D"pln">value</span><span class=3D"pun"=
>=3D</span><span class=3D"typ">FromAbstractTypeMethods</span><span class=3D=
"pun">,</span><span class=3D"pln"> options</span><span class=3D"pun">=3D[</=
span><span class=3D"str">"Foo"</span><span class=3D"pun">])</span><span cla=
ss=3D"pln"> </span><span class=3D"typ">Closure</span><span class=3D"pln"> c=
l</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"com">// ...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> a</span=
><span class=3D"pun">,</span><span class=3D"pln"> b </span><span class=3D"p=
un">-&gt;</span><span class=3D"pln"> a</span><span class=3D"pun">+</span><s=
pan class=3D"pln">b </span><span class=3D"pun">}</span><span class=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> s </spa=
n><span class=3D"pun">-&gt;</span><span class=3D"pln"> s</span><span class=
=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=3D"pun">=
()</span><span class=3D"pln"> </span><span class=3D"pun">}</span></code></p=
re>
</div>
</div>
<div class=3D"paragraph">
<p>If there are multiple signatures like in the example above, the type che=
cker will <strong>only</strong> be able to infer the types of
the arguments if the arity of each method is different. In the example abov=
e, <code>firstSignature</code> takes 2 arguments and
<code>secondSignature</code> takes 1 argument, so the type checker can infe=
r the argument types based on the number of arguments.
But see the optional resolver class attribute discussed next.</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p><code>FromString</code></p>
</div></div></td>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock">Yes=
</p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Infers the closure parameter types from the <code>options</code> argumen=
t. The <code>options</code> argument consists of an array of comma-separate=
d
non-primitive types. Each element of the array corresponds to a single sign=
ature, and each comma in an element separate
parameters of the signature. In short, this is the most generic type hint, =
and each string of the <code>options</code> map is <strong>parsed</strong>
as if it was a signature literal. While being very powerful, this type hint=
 must be avoided if you can because it increases
the compilation times due to the necessity of parsing the type signatures.<=
/p>
</div>
<div class=3D"paragraph">
<p>A single signature for a closure accepting a <code>String</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">FromString</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething</spa=
n><span class=3D"pun">(</span><span class=3D"lit">@ClosureParams</span><spa=
n class=3D"pun">(</span><span class=3D"pln">value</span><span class=3D"pun"=
>=3D</span><span class=3D"typ">FromString</span><span class=3D"pun">,</span=
><span class=3D"pln"> options</span><span class=3D"pun">=3D[</span><span cl=
ass=3D"str">"String"</span><span class=3D"pun">,</span><span class=3D"str">=
"String,Integer"</span><span class=3D"pun">])</span><span class=3D"pln"> </=
span><span class=3D"typ">Closure</span><span class=3D"pln"> cl</span><span =
class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</sp=
an><span class=3D"pln">
    </span><span class=3D"com">// ...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> s </spa=
n><span class=3D"pun">-&gt;</span><span class=3D"pln"> s</span><span class=
=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=3D"pun">=
()</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span clas=
s=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> s</span=
><span class=3D"pun">,</span><span class=3D"pln">i </span><span class=3D"pu=
n">-&gt;</span><span class=3D"pln"> s</span><span class=3D"pun">.</span><sp=
an class=3D"pln">toUpperCase</span><span class=3D"pun">()*</span><span clas=
s=3D"pln">i </span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>A polymorphic closure, accepting either a <code>String</code> or a <code=
>String, Integer</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">FromString</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> doSomething</spa=
n><span class=3D"pun">(</span><span class=3D"lit">@ClosureParams</span><spa=
n class=3D"pun">(</span><span class=3D"pln">value</span><span class=3D"pun"=
>=3D</span><span class=3D"typ">FromString</span><span class=3D"pun">,</span=
><span class=3D"pln"> options</span><span class=3D"pun">=3D[</span><span cl=
ass=3D"str">"String"</span><span class=3D"pun">,</span><span class=3D"str">=
"String,Integer"</span><span class=3D"pun">])</span><span class=3D"pln"> </=
span><span class=3D"typ">Closure</span><span class=3D"pln"> cl</span><span =
class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</sp=
an><span class=3D"pln">
    </span><span class=3D"com">// ...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> s </spa=
n><span class=3D"pun">-&gt;</span><span class=3D"pln"> s</span><span class=
=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=3D"pun">=
()</span><span class=3D"pln"> </span><span class=3D"pun">}</span><span clas=
s=3D"pln">
doSomething </span><span class=3D"pun">{</span><span class=3D"pln"> s</span=
><span class=3D"pun">,</span><span class=3D"pln">i </span><span class=3D"pu=
n">-&gt;</span><span class=3D"pln"> s</span><span class=3D"pun">.</span><sp=
an class=3D"pln">toUpperCase</span><span class=3D"pun">()*</span><span clas=
s=3D"pln">i </span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>A polymorphic closure, accepting either a <code>T</code> or a pair <code=
>T,T</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> groovy</span><span class=3D"pun">.</span><span class=
=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"pln">st=
c</span><span class=3D"pun">.</span><span class=3D"typ">FromString</span><s=
pan class=3D"pln">
</span><span class=3D"kwd">public</span><span class=3D"pln"> </span><span c=
lass=3D"pun">&lt;</span><span class=3D"pln">T</span><span class=3D"pun">&gt=
;</span><span class=3D"pln"> </span><span class=3D"kwd">void</span><span cl=
ass=3D"pln"> doSomething</span><span class=3D"pun">(</span><span class=3D"p=
ln">T e</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span=
 class=3D"lit">@ClosureParams</span><span class=3D"pun">(</span><span class=
=3D"pln">value</span><span class=3D"pun">=3D</span><span class=3D"typ">From=
String</span><span class=3D"pun">,</span><span class=3D"pln"> options</span=
><span class=3D"pun">=3D[</span><span class=3D"str">"T"</span><span class=
=3D"pun">,</span><span class=3D"str">"T,T"</span><span class=3D"pun">])</sp=
an><span class=3D"pln"> </span><span class=3D"typ">Closure</span><span clas=
s=3D"pln"> cl</span><span class=3D"pun">)</span><span class=3D"pln"> </span=
><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"com">// ...</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">(</span><span class=3D"str">'foo'</sp=
an><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"p=
un">{</span><span class=3D"pln"> s </span><span class=3D"pun">-&gt;</span><=
span class=3D"pln"> s</span><span class=3D"pun">.</span><span class=3D"pln"=
>toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln"> </span=
><span class=3D"pun">}</span><span class=3D"pln">
doSomething</span><span class=3D"pun">(</span><span class=3D"str">'foo'</sp=
an><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"p=
un">{</span><span class=3D"pln"> s1</span><span class=3D"pun">,</span><span=
 class=3D"pln">s2 </span><span class=3D"pun">-&gt;</span><span class=3D"pln=
"> </span><span class=3D"kwd">assert</span><span class=3D"pln"> s1</span><s=
pan class=3D"pun">.</span><span class=3D"pln">toUpperCase</span><span class=
=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</s=
pan><span class=3D"pln"> s2</span><span class=3D"pun">.</span><span class=
=3D"pln">toUpperCase</span><span class=3D"pun">()</span><span class=3D"pln"=
> </span><span class=3D"pun">}</span></code></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
Even though you use <code>FirstParam</code>, <code>SecondParam</code> or <c=
ode>ThirdParam</code> as a type hint, it doesn=E2=80=99t strictly mean that=
 the
argument which will be passed to the closure <strong>will</strong> be the f=
irst (resp. second, third) argument of the method call. It
only means that the <strong>type</strong> of the parameter of the closure w=
ill be the <strong>same</strong> as the type of the first (resp.  second,
 third) argument of the method call.
</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>In short, the lack of the <code>@ClosureParams</code> annotation on a me=
thod accepting a <code>Closure</code> will <strong>not</strong> fail compil=
ation. If
 present (and it can be present in Java sources as well as Groovy sources),=
 then the type checker has <strong>more</strong> information
 and can perform additional type inference. This makes this feature particu=
larly interesting for framework developers.</p>
</div>
<div class=3D"paragraph">
<p>A third optional argument is named <em>conflictResolutionStrategy</em>. =
It can reference a class (extending from
<code>ClosureSignatureConflictResolver</code>) that can perform additional =
resolution of parameter types if more than
one are found after initial inference calculations are complete. Groovy com=
es with the a default type resolver
which does nothing, and another which selects the first signature if multip=
le are found. The resolver is
only invoked if more than one signature is found and is by design a post pr=
ocessor. Any statements which need
injected typing information must pass one of the parameter signatures deter=
mined through type hints. The
resolver then picks among the returned candidate signatures.</p>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"_code_delegatesto_code"><a class=3D"anchor" href=3D"http://groovy=
-lang.org/semantics.html#_code_delegatesto_code"></a><code>@DelegatesTo</co=
de></h5>
<div class=3D"paragraph">
<p>The <code>@DelegatesTo</code> annotation is used by the type checker to =
infer the type of the delegate. It allows the API designer
to instruct the compiler what is the type of the delegate and the delegatio=
n strategy. The <code>@DelegatesTo</code> annotation is
discussed in a <a href=3D"https://docs.groovy-lang.org/latest/html/document=
ation/core-domain-specific-languages.html#section-delegatesto">specific sec=
tion</a>.</p>
</div>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_static_compilation"><a class=3D"anchor" href=3D"http://groovy-la=
ng.org/semantics.html#_static_compilation"></a>6.3. Static compilation</h3>
<div class=3D"sect3">
<h4 id=3D"_dynamic_vs_static"><a class=3D"anchor" href=3D"http://groovy-lan=
g.org/semantics.html#_dynamic_vs_static"></a>6.3.1. Dynamic vs static</h4>
<div class=3D"paragraph">
<p>In the <a href=3D"http://groovy-lang.org/semantics.html#static-type-chec=
king">type checking section</a>, we have seen that Groovy provides optional=
 type checking thanks to the
<code>@TypeChecked</code> annotation. The type checker runs at compile time=
 and performs a static analysis of dynamic code. The
program will behave exactly the same whether type checking has been enabled=
 or not. This means that the <code>@TypeChecked</code>
annotation is neutral with regards to the semantics of a program. Even thou=
gh it may be necessary to add type information
in the sources so that the program is considered type safe, in the end, the=
 semantics of the program are the same.</p>
</div>
<div class=3D"paragraph">
<p>While this may sound fine, there is actually one issue with this: type c=
hecking of dynamic code, done at compile time, is
by definition only correct if no runtime specific behavior occurs. For exam=
ple, the following program passes type checking:</p>
</div>
<div id=3D"typechecked-defeated" class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Computer</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> compute</span=
><span class=3D"pun">(</span><span class=3D"typ">String</span><span class=
=3D"pln"> str</span><span class=3D"pun">)</span><span class=3D"pln"> </span=
><span class=3D"pun">{</span><span class=3D"pln">
        str</span><span class=3D"pun">.</span><span class=3D"pln">length</s=
pan><span class=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> compute</s=
pan><span class=3D"pun">(</span><span class=3D"kwd">int</span><span class=
=3D"pln"> x</span><span class=3D"pun">)</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"typ">String</span><span class=3D"pun">.</span=
><span class=3D"pln">valueOf</span><span class=3D"pun">(</span><span class=
=3D"pln">x</span><span class=3D"pun">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"lit">@groovy</span><span class=3D"pun">.</span><span =
class=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"ty=
p">TypeChecked</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> test</span><span=
 class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">{</=
span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> computer </sp=
an><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D=
"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">Computer</s=
pan><span class=3D"pun">()</span><span class=3D"pln">
    computer</span><span class=3D"pun">.</span><span class=3D"kwd">with</sp=
an><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"p=
ln">
        </span><span class=3D"kwd">assert</span><span class=3D"pln"> comput=
e</span><span class=3D"pun">(</span><span class=3D"pln">compute</span><span=
 class=3D"pun">(</span><span class=3D"str">'foobar'</span><span class=3D"pu=
n">))</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><s=
pan class=3D"str">'6'</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>There are two <code>compute</code> methods. One accepts a <code>String</=
code> and returns an <code>int</code>, the other accepts an <code>int</code=
> and returns
a <code>String</code>. If you compile this, it is considered type safe: the=
 inner <code>compute('foobar')</code> call will return an <code>int</code>,
and calling <code>compute</code> on this <code>int</code> will in turn retu=
rn a <code>String</code>.</p>
</div>
<div class=3D"paragraph">
<p>Now, before calling <code>test()</code>, consider adding the following l=
ine:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"typ">Computer</spa=
n><span class=3D"pun">.</span><span class=3D"pln">metaClass</span><span cla=
ss=3D"pun">.</span><span class=3D"pln">compute </span><span class=3D"pun">=
=3D</span><span class=3D"pln"> </span><span class=3D"pun">{</span><span cla=
ss=3D"pln"> </span><span class=3D"typ">String</span><span class=3D"pln"> st=
r </span><span class=3D"pun">-&gt;</span><span class=3D"pln"> </span><span =
class=3D"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">Dat=
e</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span clas=
s=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Using runtime metaprogramming, we=E2=80=99re actually modifying the beha=
vior of the <code>compute(String)</code> method, so that instead of
returning the length of the provided argument, it will return a <code>Date<=
/code>. If you execute the program, it will fail at
runtime. Since this line can be added from anywhere, in any thread, there=
=E2=80=99s absolutely no way for the type checker to
statically make sure that no such thing happens. In short, the type checker=
 is vulnerable to monkey patching. This is
just one example, but this illustrates the concept that doing static analys=
is of a dynamic program is inherently wrong.</p>
</div>
<div class=3D"paragraph">
<p>The Groovy language provides an alternative annotation to <code>@TypeChe=
cked</code> which will actually make sure that the methods
which are inferred as being called <strong>will</strong> effectively be cal=
led at runtime. This annotation turns the Groovy compiler
into a <strong>static compiler</strong>, where all method calls are resolve=
d at compile time <strong>and</strong> the generated bytecode makes sure
that this happens: the annotation is <code>@groovy.transform.CompileStatic<=
/code>.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"compilestatic-annotation"><a class=3D"anchor" href=3D"http://groo=
vy-lang.org/semantics.html#compilestatic-annotation"></a>6.3.2. The <code>@=
CompileStatic</code> annotation</h4>
<div class=3D"paragraph">
<p>The <code>@CompileStatic</code> annotation can be added anywhere the <co=
de>@TypeChecked</code> annotation can be used, that is to say on
a class or a method. It is not necessary to add both <code>@TypeChecked</co=
de> and <code>@CompileStatic</code>, as <code>@CompileStatic</code> perform=
s
everything <code>@TypeChecked</code> does, but in addition triggers static =
compilation.</p>
</div>
<div class=3D"paragraph">
<p>Let=E2=80=99s take the <a href=3D"http://groovy-lang.org/semantics.html#=
typechecked-defeated">example which failed</a>, but this time let=E2=80=99s=
 replace the <code>@TypeChecked</code> annotation
with <code>@CompileStatic</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Computer</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"kwd">int</span><span class=3D"pln"> compute</span=
><span class=3D"pun">(</span><span class=3D"typ">String</span><span class=
=3D"pln"> str</span><span class=3D"pun">)</span><span class=3D"pln"> </span=
><span class=3D"pun">{</span><span class=3D"pln">
        str</span><span class=3D"pun">.</span><span class=3D"pln">length</s=
pan><span class=3D"pun">()</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"typ">String</span><span class=3D"pln"> compute</s=
pan><span class=3D"pun">(</span><span class=3D"kwd">int</span><span class=
=3D"pln"> x</span><span class=3D"pun">)</span><span class=3D"pln"> </span><=
span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"typ">String</span><span class=3D"pun">.</span=
><span class=3D"pln">valueOf</span><span class=3D"pun">(</span><span class=
=3D"pln">x</span><span class=3D"pun">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"lit">@groovy</span><span class=3D"pun">.</span><span =
class=3D"pln">transform</span><span class=3D"pun">.</span><span class=3D"ty=
p">CompileStatic</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> test</span><span=
 class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">{</=
span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> computer </sp=
an><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D=
"kwd">new</span><span class=3D"pln"> </span><span class=3D"typ">Computer</s=
pan><span class=3D"pun">()</span><span class=3D"pln">
    computer</span><span class=3D"pun">.</span><span class=3D"kwd">with</sp=
an><span class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"p=
ln">
        </span><span class=3D"kwd">assert</span><span class=3D"pln"> comput=
e</span><span class=3D"pun">(</span><span class=3D"pln">compute</span><span=
 class=3D"pun">(</span><span class=3D"str">'foobar'</span><span class=3D"pu=
n">))</span><span class=3D"pln"> </span><span class=3D"pun">=3D=3D</span><s=
pan class=3D"str">'6'</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"typ">Computer</span><span class=3D"pun">.</span><span=
 class=3D"pln">metaClass</span><span class=3D"pun">.</span><span class=3D"p=
ln">compute </span><span class=3D"pun">=3D</span><span class=3D"pln"> </spa=
n><span class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"ty=
p">String</span><span class=3D"pln"> str </span><span class=3D"pun">-&gt;</=
span><span class=3D"pln"> </span><span class=3D"kwd">new</span><span class=
=3D"pln"> </span><span class=3D"typ">Date</span><span class=3D"pun">()</spa=
n><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pl=
n">
test</span><span class=3D"pun">()</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>This is the <strong>only</strong> difference. If we execute this program=
, this time, there is no runtime error. The <code>test</code> method
became immune to monkey patching, because the <code>compute</code> methods =
which are called in its body are linked at compile
time, so even if the metaclass of <code>Computer</code> changes, the progra=
m still behaves <strong>as expected by the type checker</strong>.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_key_benefits"><a class=3D"anchor" href=3D"http://groovy-lang.org=
/semantics.html#_key_benefits"></a>6.3.3. Key benefits</h4>
<div class=3D"paragraph">
<p>There are several benefits of using <code>@CompileStatic</code> on your =
code:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>type safety</p>
</li>
<li>
<p>immunity to <a href=3D"http://groovy-lang.org/semantics.html#compilestat=
ic-annotation">monkey patching</a></p>
</li>
<li>
<p>performance improvements</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>The performance improvements depend on the kind of program you are execu=
ting. If it is I/O bound, the difference between
statically compiled code and dynamic code is barely noticeable. On highly C=
PU intensive code, since the bytecode which
is generated is very close, if not equal, to the one that Java would produc=
e for an equivalent program, the performance
is greatly improved.</p>
</div>
<div class=3D"admonitionblock tip">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-tip" title=3D"Tip"></i>
</td>
<td class=3D"content">
Using the <em>invokedynamic</em> version of Groovy, which is accessible to =
people using JDK 7 and above, the performance
of the dynamic code should be very close to the performance of statically c=
ompiled code. Sometimes, it can even be faster!
There is only one way to determine which version you should choose: measuri=
ng. The reason is that depending on your program
<strong>and</strong> the JVM that you use, the performance can be significa=
ntly different. In particular, the <em>invokedynamic</em> version of
Groovy is very sensitive to the JVM version in use.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
<div class=3D"sect1">
<h2 id=3D"_type_checking_extensions"><a class=3D"anchor" href=3D"http://gro=
ovy-lang.org/semantics.html#_type_checking_extensions"></a>7. Type checking=
 extensions</h2>
<div class=3D"sectionbody">
<div class=3D"sect2">
<h3 id=3D"_writing_a_type_checking_extension"><a class=3D"anchor" href=3D"h=
ttp://groovy-lang.org/semantics.html#_writing_a_type_checking_extension"></=
a>7.1. Writing a type checking extension</h3>
<div class=3D"sect3">
<h4 id=3D"_towards_a_smarter_type_checker"><a class=3D"anchor" href=3D"http=
://groovy-lang.org/semantics.html#_towards_a_smarter_type_checker"></a>7.1.=
1. Towards a smarter type checker</h4>
<div class=3D"paragraph">
<p>Despite being a dynamic language, Groovy can be used with a static type
checker at compile time, enabled using the <a href=3D"http://groovy-lang.or=
g/semantics.html#static-type-checking">@TypeChecked</a>
annotation. In this mode, the compiler becomes
more verbose and throws errors for, example, typos, non-existent
methods,=E2=80=A6 This comes with a few limitations though, most of them co=
ming
from the fact that Groovy remains inherently a dynamic language. For
example, you wouldn=E2=80=99t be able to use type checking on code that use=
s the markup builder:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> builder </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span>=
<span class=3D"typ">MarkupBuilder</span><span class=3D"pun">(</span><span c=
lass=3D"kwd">out</span><span class=3D"pun">)</span><span class=3D"pln">
builder</span><span class=3D"pun">.</span><span class=3D"pln">html </span><=
span class=3D"pun">{</span><span class=3D"pln">
    head </span><span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"com">// ...</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
    body </span><span class=3D"pun">{</span><span class=3D"pln">
        p </span><span class=3D"str">'Hello, world!'</span><span class=3D"p=
ln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>In the previous example, none of the <code>html</code>, <code>head</code=
>, <code>body</code> or <code>p</code> methods
exist. However if you execute the code, it works because Groovy uses dynami=
c dispatch
and converts those method calls at runtime. In this builder, there=E2=80=99=
s no limitation about
the number of tags that you can use, nor the attributes, which means there =
is no chance
for a type checker to know about all the possible methods (tags) at compile=
 time, unless
you create a builder dedicated to HTML for example.</p>
</div>
<div class=3D"paragraph">
<p>Groovy is a platform of choice when it comes to implement internal DSLs.=
 The flexible syntax,
combined with runtime and compile-time metaprogramming capabilities make Gr=
oovy an interesting
choice because it allows the programmer to focus on the DSL rather than
on tooling or implementation. Since Groovy DSLs are Groovy code, it=E2=80=
=99s
easy to have IDE support without having to write a dedicated plugin for
example.</p>
</div>
<div class=3D"paragraph">
<p>In a lot of cases, DSL engines are written in Groovy (or Java) then user
code is executed as scripts, meaning that you have some kind of wrapper
on top of user logic. The wrapper may consist, for example, in a
<code>GroovyShell</code> or <code>GroovyScriptEngine</code> that performs s=
ome tasks transparently
before running the script (adding imports, applying AST transforms,
extending a base script,=E2=80=A6). Often, user written scripts come to
production without testing because the DSL logic comes to a point
where&nbsp;<strong>any</strong> user may write code using the DSL syntax. I=
n the end, a user
may just ignore that what they write is actually&nbsp;<strong>code</strong>=
. This adds some
challenges for the DSL implementer, such as securing execution of user
code or, in this case, early reporting of errors.</p>
</div>
<div class=3D"paragraph">
<p>For example, imagine a DSL which goal is to drive a rover on Mars
remotely. Sending a message to the rover takes around 15 minutes. If the
rover executes the script and fails with an error (say a typo), you have
two problems:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>first, feedback comes only after 30 minutes (the time needed for the
rover to get the script and the time needed to receive the error)</p>
</li>
<li>
<p>second, some portion of the script has been executed and you may have
to change the fixed script significantly (implying that you need to know
the current state of the rover=E2=80=A6)</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>Type checking extensions is a mechanism that will
allow the developer of a DSL engine to make those scripts safer by
applying the same kind of checks that static type checking allows on
regular groovy classes.</p>
</div>
<div class=3D"paragraph">
<p>The principle, here, is to fail early, that is
to say fail compilation of scripts as soon as possible, and if possible
provide feedback to the user (including nice error messages).</p>
</div>
<div class=3D"paragraph">
<p>In short, the idea behind type checking extensions is to make the compil=
er
aware of all the runtime metaprogramming tricks that the DSL uses, so that
scripts can benefit the same level of compile-time checks as a verbose stat=
ically
compiled code would have. We will see that you can go even further by perfo=
rming
checks that a normal type checker wouldn=E2=80=99t do, delivering powerful =
compile-time
checks for your users.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"Typecheckingextensions-Howdoesitwork"><a class=3D"anchor" href=3D=
"http://groovy-lang.org/semantics.html#Typecheckingextensions-Howdoesitwork=
"></a>7.1.2. The extensions attribute</h4>
<div class=3D"paragraph">
<p>The&nbsp;<code>@TypeChecked</code> annotation supports an attribute
named&nbsp;<code>extensions</code>. This parameter takes an array of string=
s
corresponding to a list of <em>type checking extensions scripts</em>. Those
scripts are found at&nbsp;<strong>compile time</strong> on classpath. For e=
xample, you would
write:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"lit">@TypeChecked<=
/span><span class=3D"pun">(</span><span class=3D"pln">extensions</span><spa=
n class=3D"pun">=3D</span><span class=3D"str">'/path/to/myextension.groovy'=
</span><span class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"kwd">void</span><span class=3D"pln"> foo</span><span =
class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun">{</s=
pan><span class=3D"pln"> </span><span class=3D"pun">...}</span></code></pre=
>
</div>
</div>
<div class=3D"paragraph">
<p>In that case, the&nbsp;<em>foo</em> methods would be type checked with t=
he rules of
the normal type checker completed by those found in
the&nbsp;<em>myextension.groovy</em> script. Note that while internally the=
 type
checker supports multiple mechanisms to implement type checking
extensions (including plain old java code), the recommended way is to
use those type checking extension scripts.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_a_dsl_for_type_checking"><a class=3D"anchor" href=3D"http://groo=
vy-lang.org/semantics.html#_a_dsl_for_type_checking"></a>7.1.3. A DSL for t=
ype checking</h4>
<div class=3D"paragraph">
<p>The idea behind type checking extensions is to use a DSL to extend the
type checker capabilities. This DSL allows you to hook into the
compilation process, more specifically the type checking phase, using an
"event-driven" API. For example, when the type checker enters a method
body, it throws a&nbsp;<em>beforeVisitMethod</em> event that the extension =
can react to:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">beforeVisitMe=
thod </span><span class=3D"pun">{</span><span class=3D"pln"> methodNode </s=
pan><span class=3D"pun">-&gt;</span><span class=3D"pln">
 println </span><span class=3D"str">"Entering ${methodNode.name}"</span><sp=
an class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Imagine that you have this rover DSL at hand. A user would write:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">robot</span><=
span class=3D"pun">.</span><span class=3D"pln">move </span><span class=3D"l=
it">100</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>If you have a class defined as such:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">class</span><=
span class=3D"pln"> </span><span class=3D"typ">Robot</span><span class=3D"p=
ln"> </span><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"typ">Robot</span><span class=3D"pln"> move</span>=
<span class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pl=
n"> qt</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span =
class=3D"pun">{</span><span class=3D"pln"> </span><span class=3D"kwd">this<=
/span><span class=3D"pln"> </span><span class=3D"pun">}</span><span class=
=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The script can be type checked before being executed using the following
script:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> config </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span>=
<span class=3D"typ">CompilerConfiguration</span><span class=3D"pun">()</spa=
n><span class=3D"pln">
config</span><span class=3D"pun">.</span><span class=3D"pln">addCompilation=
Customizers</span><span class=3D"pun">(</span><span class=3D"pln">
    </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span =
class=3D"typ">ASTTransformationCustomizer</span><span class=3D"pun">(</span=
><span class=3D"typ">TypeChecked</span><span class=3D"pun">)</span><span cl=
ass=3D"pln">            </span><i class=3D"conum" data-value=3D"1"></i><b><=
span class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun">=
)</span></b><span class=3D"pln">
</span><span class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> shell </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">n=
ew</span><span class=3D"pln"> </span><span class=3D"typ">GroovyShell</span>=
<span class=3D"pun">(</span><span class=3D"pln">config</span><span class=3D=
"pun">)</span><span class=3D"pln">                         </span><i class=
=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</span><span class=
=3D"lit">2</span><span class=3D"pun">)</span></b><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> robot </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">n=
ew</span><span class=3D"pln"> </span><span class=3D"typ">Robot</span><span =
class=3D"pun">()</span><span class=3D"pln">
shell</span><span class=3D"pun">.</span><span class=3D"pln">setVariable</sp=
an><span class=3D"pun">(</span><span class=3D"str">'robot'</span><span clas=
s=3D"pun">,</span><span class=3D"pln"> robot</span><span class=3D"pun">)</s=
pan><span class=3D"pln">
shell</span><span class=3D"pun">.</span><span class=3D"pln">evaluate</span>=
<span class=3D"pun">(</span><span class=3D"pln">script</span><span class=3D=
"pun">)</span><span class=3D"pln">                                      </s=
pan><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pun">(</span>=
<span class=3D"lit">3</span><span class=3D"pun">)</span></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>a compiler configuration adds the <code>@TypeChecked</code> annotation =
to all classes</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>use the configuration in a <code>GroovyShell</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>so that scripts compiled using the shell are compiled with <code>@TypeC=
hecked</code> without the user having to add it explicitly</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Using the compiler configuration above, we can apply&nbsp;<em>@TypeCheck=
ed</em>
transparently to the script. In that case, it will fail at compile
time:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre>[Static type checking] - The variable [robot] is undeclared.</pre>
</div>
</div>
<div class=3D"paragraph">
<p>Now, we will slightly update the configuration to include the
``extensions'' parameter:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">config</span>=
<span class=3D"pun">.</span><span class=3D"pln">addCompilationCustomizers</=
span><span class=3D"pun">(</span><span class=3D"pln">
    </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span =
class=3D"typ">ASTTransformationCustomizer</span><span class=3D"pun">(</span=
><span class=3D"pln">
        </span><span class=3D"typ">TypeChecked</span><span class=3D"pun">,<=
/span><span class=3D"pln">
        extensions</span><span class=3D"pun">:[</span><span class=3D"str">'=
robotextension.groovy'</span><span class=3D"pun">])</span><span class=3D"pl=
n">
</span><span class=3D"pun">)</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Then add the following to your classpath:</p>
</div>
<div class=3D"listingblock">
<div class=3D"title">robotextension.groovy</div>
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">unresolvedVar=
iable </span><span class=3D"pun">{</span><span class=3D"pln"> </span><span =
class=3D"kwd">var</span><span class=3D"pln"> </span><span class=3D"pun">-&g=
t;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"str">'robot'</span><span class=3D"pun">=
=3D=3D</span><span class=3D"kwd">var</span><span class=3D"pun">.</span><spa=
n class=3D"pln">name</span><span class=3D"pun">)</span><span class=3D"pln">=
 </span><span class=3D"pun">{</span><span class=3D"pln">
        storeType</span><span class=3D"pun">(</span><span class=3D"kwd">var=
</span><span class=3D"pun">,</span><span class=3D"pln"> classNodeFor</span>=
<span class=3D"pun">(</span><span class=3D"typ">Robot</span><span class=3D"=
pun">))</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Here, we=E2=80=99re telling the compiler that if an <em>unresolved varia=
ble</em> is found
and that the name of the variable is&nbsp;<em>robot</em>, then we can make =
sure that the type of this
variable is <code>Robot</code>.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"Typecheckingextensions-TheAPI"><a class=3D"anchor" href=3D"http:/=
/groovy-lang.org/semantics.html#Typecheckingextensions-TheAPI"></a>7.1.4. T=
ype checking extensions API</h4>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-AST"><a class=3D"anchor" href=3D"http://gr=
oovy-lang.org/semantics.html#Typecheckingextensions-AST"></a>AST</h5>
<div class=3D"paragraph">
<p>The type checking API is a low level API, dealing with the Abstract
Syntax Tree. You will have to know your AST well to develop extensions,
even if the DSL makes it much easier than just dealing with AST code
from plain Java or Groovy.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Events"><a class=3D"anchor" href=3D"http:/=
/groovy-lang.org/semantics.html#Typecheckingextensions-Events"></a>Events</=
h5>
<div class=3D"paragraph">
<p>The type checker sends the following events, to which an extension
script can react:</p>
</div>
<table id=3D"event-setup" class=3D"tableblock frame-all grid-all spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>setup</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called after the type checker finished initialization</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>none</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">setup </span>=
<span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"com">// this is called before anything else</span=
><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Can be used to perform setup of your extension</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-finish" class=3D"tableblock frame-all grid-all spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>finish</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called after the type checker completed type checking</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>none</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">finish </span=
><span class=3D"pun">{</span><span class=3D"pln">
    </span><span class=3D"com">// this is after completion</span><span clas=
s=3D"pln">
    </span><span class=3D"com">// of all type checking</span><span class=3D=
"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Can be used to perform additional checks after the type checker has fini=
shed its job.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-unresolvedVariable" class=3D"tableblock frame-all grid-a=
ll spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>unresolvedVariable</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called when the type checker finds an
  unresolved variable</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>VariableExpression var</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">unresolvedVar=
iable </span><span class=3D"pun">{</span><span class=3D"pln"> </span><span =
class=3D"kwd">var</span><span class=3D"pln"> </span><span class=3D"pun">-&g=
t;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"str">'people'</span><span class=3D"pln"=
> </span><span class=3D"pun">=3D=3D</span><span class=3D"pln"> </span><span=
 class=3D"kwd">var</span><span class=3D"pun">.</span><span class=3D"pln">na=
me</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span clas=
s=3D"pun">{</span><span class=3D"pln">
        storeType</span><span class=3D"pun">(</span><span class=3D"kwd">var=
</span><span class=3D"pun">,</span><span class=3D"pln"> classNodeFor</span>=
<span class=3D"pun">(</span><span class=3D"typ">List</span><span class=3D"p=
un">))</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Allows the developer to help the type checker with user-injected variabl=
es.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-unresolvedProperty" class=3D"tableblock frame-all grid-a=
ll spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>unresolvedProperty</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called when the type checker cannot find
  a property on the receiver</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>PropertyExpression pexp</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">unresolvedPro=
perty </span><span class=3D"pun">{</span><span class=3D"pln"> pexp </span><=
span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"str">'longueur'</span><span class=3D"pu=
n">=3D=3D</span><span class=3D"pln">pexp</span><span class=3D"pun">.</span>=
<span class=3D"pln">propertyAsString </span><span class=3D"pun">&amp;&amp;<=
/span><span class=3D"pln">
        getType</span><span class=3D"pun">(</span><span class=3D"pln">pexp<=
/span><span class=3D"pun">.</span><span class=3D"pln">objectExpression</spa=
n><span class=3D"pun">)=3D=3D</span><span class=3D"pln">classNodeFor</span>=
<span class=3D"pun">(</span><span class=3D"typ">String</span><span class=3D=
"pun">))</span><span class=3D"pln"> </span><span class=3D"pun">{</span><spa=
n class=3D"pln">
        storeType</span><span class=3D"pun">(</span><span class=3D"pln">pex=
p</span><span class=3D"pun">,</span><span class=3D"pln">classNodeFor</span>=
<span class=3D"pun">(</span><span class=3D"kwd">int</span><span class=3D"pu=
n">))</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Allows the developer to handle "dynamic" properties</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-unresolvedAttribute" class=3D"tableblock frame-all grid-=
all spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>unresolvedAttribute</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called when the type checker cannot
  find an attribute on the receiver</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>AttributeExpression aex</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">unresolvedAtt=
ribute </span><span class=3D"pun">{</span><span class=3D"pln"> aex </span><=
span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">getType</span><span class=3D"pun">=
(</span><span class=3D"pln">aex</span><span class=3D"pun">.</span><span cla=
ss=3D"pln">objectExpression</span><span class=3D"pun">)=3D=3D</span><span c=
lass=3D"pln">classNodeFor</span><span class=3D"pun">(</span><span class=3D"=
typ">String</span><span class=3D"pun">))</span><span class=3D"pln"> </span>=
<span class=3D"pun">{</span><span class=3D"pln">
        storeType</span><span class=3D"pun">(</span><span class=3D"pln">aex=
</span><span class=3D"pun">,</span><span class=3D"pln">classNodeFor</span><=
span class=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"=
pun">))</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Allows the developer to handle missing attributes</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-beforeMethodCall" class=3D"tableblock frame-all grid-all=
 spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>beforeMethodCall</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called before the type checker starts type
  checking a method call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>MethodCall call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">beforeMethodC=
all </span><span class=3D"pun">{</span><span class=3D"pln"> call </span><sp=
an class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">isMethodCallExpression</span><span=
 class=3D"pun">(</span><span class=3D"pln">call</span><span class=3D"pun">)=
</span><span class=3D"pln">
            </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"=
> call</span><span class=3D"pun">.</span><span class=3D"pln">methodAsString=
</span><span class=3D"pun">=3D=3D</span><span class=3D"str">'toUpperCase'</=
span><span class=3D"pun">)</span><span class=3D"pln"> </span><span class=3D=
"pun">{</span><span class=3D"pln">
        addStaticTypeError</span><span class=3D"pun">(</span><span class=3D=
"str">'Not allowed'</span><span class=3D"pun">,</span><span class=3D"pln">c=
all</span><span class=3D"pun">)</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Allows you to intercept method calls before the
type checker performs its own checks. This is useful if you want to
replace the default type checking with a custom one for a limited scope.
In that case, you must set the handled flag to true, so that the type
checker skips its own checks.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-afterMethodCall" class=3D"tableblock frame-all grid-all =
spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>afterMethodCall</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called once the type checker has finished
  type checking a method call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>MethodCall call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">afterMethodCa=
ll </span><span class=3D"pun">{</span><span class=3D"pln"> call </span><spa=
n class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">getTargetMethod</span><span class=
=3D"pun">(</span><span class=3D"pln">call</span><span class=3D"pun">).</spa=
n><span class=3D"pln">name</span><span class=3D"pun">=3D=3D</span><span cla=
ss=3D"str">'toUpperCase'</span><span class=3D"pun">)</span><span class=3D"p=
ln"> </span><span class=3D"pun">{</span><span class=3D"pln">
        addStaticTypeError</span><span class=3D"pun">(</span><span class=3D=
"str">'Not allowed'</span><span class=3D"pun">,</span><span class=3D"pln">c=
all</span><span class=3D"pun">)</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Allow you to perform additional checks after the type
checker has done its own checks. This is in particular useful if you
want to perform the standard type checking tests but also want to ensure
additional type safety, for example checking the arguments against each
other.Note that <code>afterMethodCall</code> is called even if you did
<code>beforeMethodCall</code> and set the handled flag to true.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-onMethodSelection" class=3D"tableblock frame-all grid-al=
l spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>onMethodSelection</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called by the type checker when it finds
  a method appropriate for a method call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Expression expr, MethodNode node</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">onMethodSelec=
tion </span><span class=3D"pun">{</span><span class=3D"pln"> expr</span><sp=
an class=3D"pun">,</span><span class=3D"pln"> node </span><span class=3D"pu=
n">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">node</span><span class=3D"pun">.</=
span><span class=3D"pln">declaringClass</span><span class=3D"pun">.</span><=
span class=3D"pln">name </span><span class=3D"pun">=3D=3D</span><span class=
=3D"pln"> </span><span class=3D"str">'java.lang.String'</span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><s=
pan class=3D"pln">
        </span><span class=3D"com">// calling a method on 'String'</span><s=
pan class=3D"pln">
        </span><span class=3D"com">// let=E2=80=99s perform additional chec=
ks!</span><span class=3D"pln">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(++</span><span class=3D"pln">count</span><span class=3D"p=
un">&gt;</span><span class=3D"lit">2</span><span class=3D"pun">)</span><spa=
n class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
            addStaticTypeError</span><span class=3D"pun">(</span><span clas=
s=3D"str">"You can use only 2 calls on String in your source code"</span><s=
pan class=3D"pun">,</span><span class=3D"pln">expr</span><span class=3D"pun=
">)</span><span class=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The type checker works by inferring
argument types of a method call, then chooses a target method. If it
finds one that corresponds, then it triggers this event. It is for
example interesting if you want to react on a specific method call, such
as entering the scope of a method that takes a closure as argument (as
in builders).Please note that this event may be thrown for various types
of expressions, not only method calls (binary expressions for example).</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-methodNotFound" class=3D"tableblock frame-all grid-all s=
pread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>methodNotFound</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called by the type checker when it fails to
  find an appropriate method for a method call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>ClassNode receiver, String name, ArgumentListExpression argList, ClassNo=
de[] argTypes,MethodCall call</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">methodNotFoun=
d </span><span class=3D"pun">{</span><span class=3D"pln"> receiver</span><s=
pan class=3D"pun">,</span><span class=3D"pln"> name</span><span class=3D"pu=
n">,</span><span class=3D"pln"> argList</span><span class=3D"pun">,</span><=
span class=3D"pln"> argTypes</span><span class=3D"pun">,</span><span class=
=3D"pln"> call </span><span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"com">// receiver is the inferred type of the rece=
iver</span><span class=3D"pln">
    </span><span class=3D"com">// name is the name of the called method</sp=
an><span class=3D"pln">
    </span><span class=3D"com">// argList is the list of arguments the meth=
od was called with</span><span class=3D"pln">
    </span><span class=3D"com">// argTypes is the array of inferred types f=
or each argument</span><span class=3D"pln">
    </span><span class=3D"com">// call is the method call for which we coul=
dn=E2=80=99t find a target method</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">receiver</span><span class=3D"pun"=
>=3D=3D</span><span class=3D"pln">classNodeFor</span><span class=3D"pun">(<=
/span><span class=3D"typ">String</span><span class=3D"pun">)</span><span cl=
ass=3D"pln">
            </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"=
> name</span><span class=3D"pun">=3D=3D</span><span class=3D"str">'longueur=
'</span><span class=3D"pln">
            </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"=
> argList</span><span class=3D"pun">.</span><span class=3D"pln">size</span>=
<span class=3D"pun">()=3D=3D</span><span class=3D"lit">0</span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><s=
pan class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">
        </span><span class=3D"kwd">return</span><span class=3D"pln"> newMet=
hod</span><span class=3D"pun">(</span><span class=3D"str">'longueur'</span>=
<span class=3D"pun">,</span><span class=3D"pln"> classNodeFor</span><span c=
lass=3D"pun">(</span><span class=3D"typ">String</span><span class=3D"pun">)=
)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Unlike <code>onMethodSelection</code>, this event is
sent when the type checker cannot find a target method for a method call
(instance or static). It gives you the chance to intercept the error
before it is sent to the user, but also set the target method.For this,
you need to return a list of <code>MethodNode</code>. In most situations, y=
ou would
either return: an empty list, meaning that you didn=E2=80=99t find a
corresponding method, a list with exactly one element, saying that there=E2=
=80=99s
no doubt about the target methodIf you return more than one MethodNode,
then the compiler would throw an error to the user stating that the
method call is ambiguous, listing the possible methods.For convenience,
if you want to return only one method, you are allowed to return it
directly instead of wrapping it into a list.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-beforeVisitMethod" class=3D"tableblock frame-all grid-al=
l spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>beforeVisitMethod</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called by the type checker before type
  checking a method body</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>MethodNode node</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">beforeVisitMe=
thod </span><span class=3D"pun">{</span><span class=3D"pln"> methodNode </s=
pan><span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"com">// tell the type checker we will handle the =
body by ourselves</span><span class=3D"pln">
    handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> metho=
dNode</span><span class=3D"pun">.</span><span class=3D"pln">name</span><spa=
n class=3D"pun">.</span><span class=3D"pln">startsWith</span><span class=3D=
"pun">(</span><span class=3D"str">'skip'</span><span class=3D"pun">)</span>=
<span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The type checker will call this method before
starting to type check a method body. If you want, for example, to
perform type checking by yourself instead of letting the type checker do
it, you have to set the handled flag to true.This event can also be used
to help defining the scope of your extension (for example, applying it
only if you are inside method foo).</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-afterVisitMethod" class=3D"tableblock frame-all grid-all=
 spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>afterVisitMethod</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called by the type checker after type
  checking a method body</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>MethodNode node</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">afterVisitMet=
hod </span><span class=3D"pun">{</span><span class=3D"pln"> methodNode </sp=
an><span class=3D"pun">-&gt;</span><span class=3D"pln">
    scopeExit </span><span class=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"pln">methods</span><span class=3D"p=
un">&gt;</span><span class=3D"lit">2</span><span class=3D"pun">)</span><spa=
n class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
            addStaticTypeError</span><span class=3D"pun">(</span><span clas=
s=3D"str">"Method ${methodNode.name} contains more than 2 method calls"</sp=
an><span class=3D"pun">,</span><span class=3D"pln"> methodNode</span><span =
class=3D"pun">)</span><span class=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Gives you the opportunity to perform additional
checks after a method body is visited by the type checker. This is
useful if you collect information, for example, and want to perform
additional checks once everything has been collected.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-beforeVisitClass" class=3D"tableblock frame-all grid-all=
 spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>beforeVisitClass</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called by the type checker before type checking a class</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>ClassNode node</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">beforeVisitCl=
ass </span><span class=3D"pun">{</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">ClassNode</span><span class=3D"pln"> classNode </span><span cla=
ss=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> name </span><=
span class=3D"pun">=3D</span><span class=3D"pln"> classNode</span><span cla=
ss=3D"pun">.</span><span class=3D"pln">nameWithoutPackage
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(!(</span><span class=3D"pln">name</span><span class=3D"pun">[=
</span><span class=3D"lit">0</span><span class=3D"pun">]</span><span class=
=3D"pln"> </span><span class=3D"kwd">in</span><span class=3D"pln"> </span><=
span class=3D"str">'A'</span><span class=3D"pun">..</span><span class=3D"st=
r">'Z'</span><span class=3D"pun">))</span><span class=3D"pln"> </span><span=
 class=3D"pun">{</span><span class=3D"pln">
        addStaticTypeError</span><span class=3D"pun">(</span><span class=3D=
"str">"Class '${name}' doesn't start with an uppercase letter"</span><span =
class=3D"pun">,</span><span class=3D"pln">classNode</span><span class=3D"pu=
n">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>If a class is type checked, then
before visiting the class, this event will be sent. It is also the case
for inner classes defined inside a class annotated with <code>@TypeChecked<=
/code>. It
can help you define the scope of your extension, or you can even totally
replace the visit of the type checker with a custom type checking
implementation. For that, you would have to set the <code>handled</code> fl=
ag to
<code>true</code>.&nbsp;</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-afterVisitClass" class=3D"tableblock frame-all grid-all =
spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>afterVisitClass</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called by the type checker after having finished the visit of a type che=
cked class</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>ClassNode node</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">afterVisitCla=
ss </span><span class=3D"pun">{</span><span class=3D"pln"> </span><span cla=
ss=3D"typ">ClassNode</span><span class=3D"pln"> classNode </span><span clas=
s=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">def</span><span class=3D"pln"> name </span><=
span class=3D"pun">=3D</span><span class=3D"pln"> classNode</span><span cla=
ss=3D"pun">.</span><span class=3D"pln">nameWithoutPackage
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(!(</span><span class=3D"pln">name</span><span class=3D"pun">[=
</span><span class=3D"lit">0</span><span class=3D"pun">]</span><span class=
=3D"pln"> </span><span class=3D"kwd">in</span><span class=3D"pln"> </span><=
span class=3D"str">'A'</span><span class=3D"pun">..</span><span class=3D"st=
r">'Z'</span><span class=3D"pun">))</span><span class=3D"pln"> </span><span=
 class=3D"pun">{</span><span class=3D"pln">
        addStaticTypeError</span><span class=3D"pun">(</span><span class=3D=
"str">"Class '${name}' doesn't start with an uppercase letter"</span><span =
class=3D"pun">,</span><span class=3D"pln">classNode</span><span class=3D"pu=
n">)</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Called
for every class being type checked after the type checker finished its
work. This includes classes annotated with <code>@TypeChecked</code> and an=
y
inner/anonymous class defined in the same class with is not skipped.</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-incompatibleAssignment" class=3D"tableblock frame-all gr=
id-all spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>incompatibleAssignment</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called when the type checker thinks
    that an assignment is incorrect, meaning that the right hand side of an
    assignment is incompatible with the left hand side</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>ClassNode lhsType, ClassNode rhsType,&nbsp; Expression assignment</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">incompatibleA=
ssignment </span><span class=3D"pun">{</span><span class=3D"pln"> lhsType</=
span><span class=3D"pun">,</span><span class=3D"pln"> rhsType</span><span c=
lass=3D"pun">,</span><span class=3D"pln"> expr </span><span class=3D"pun">-=
&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">isBinaryExpression</span><span cla=
ss=3D"pun">(</span><span class=3D"pln">expr</span><span class=3D"pun">)</sp=
an><span class=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span><span c=
lass=3D"pln"> isAssignment</span><span class=3D"pun">(</span><span class=3D=
"pln">expr</span><span class=3D"pun">.</span><span class=3D"pln">operation<=
/span><span class=3D"pun">.</span><span class=3D"pln">type</span><span clas=
s=3D"pun">))</span><span class=3D"pln"> </span><span class=3D"pun">{</span>=
<span class=3D"pln">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"pln">lhsType</span><span class=3D"p=
un">=3D=3D</span><span class=3D"pln">classNodeFor</span><span class=3D"pun"=
>(</span><span class=3D"kwd">int</span><span class=3D"pun">)</span><span cl=
ass=3D"pln"> </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln=
"> rhsType</span><span class=3D"pun">=3D=3D</span><span class=3D"pln">class=
NodeFor</span><span class=3D"pun">(</span><span class=3D"typ">Closure</span=
><span class=3D"pun">))</span><span class=3D"pln"> </span><span class=3D"pu=
n">{</span><span class=3D"pln">
            handled </span><span class=3D"pun">=3D</span><span class=3D"pln=
"> </span><span class=3D"kwd">true</span><span class=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Gives the
developer the ability to handle incorrect assignments. This is for
example useful if a class overrides <code>setProperty</code>, because in th=
at case it
is possible that assigning a variable of one type to a property of
another type is handled through that runtime mechanism. In that case, you
can help the type checker just by telling it that the assignment is
valid (using <code>handled</code> set to <code>true</code>).</p>
</div></div></td>
</tr>
</tbody>
</table>
<table id=3D"event-ambiguousMethods" class=3D"tableblock frame-all grid-all=
 spread">
<colgroup>
<col style=3D"width: 25%;">
<col style=3D"width: 75%;">
</colgroup>
<tbody>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Event name</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>ambiguousMethods</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Called When</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>Called when the type checker cannot choose between several candidate met=
hods</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Arguments</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"paragrap=
h">
<p>List&lt;MethodNode&gt; methods,&nbsp; Expression origin</p>
</div></div></td>
</tr>
<tr>
<td class=3D"tableblock halign-left valign-top"><p class=3D"tableblock"><st=
rong>Usage</strong></p></td>
<td class=3D"tableblock halign-left valign-top"><div><div class=3D"listingb=
lock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">ambiguousMeth=
ods </span><span class=3D"pun">{</span><span class=3D"pln"> methods</span><=
span class=3D"pun">,</span><span class=3D"pln"> origin </span><span class=
=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"com">// choose the method which has an Integer as=
 parameter type</span><span class=3D"pln">
    methods</span><span class=3D"pun">.</span><span class=3D"pln">find </sp=
an><span class=3D"pun">{</span><span class=3D"pln"> it</span><span class=3D=
"pun">.</span><span class=3D"pln">parameters</span><span class=3D"pun">.</s=
pan><span class=3D"pln">any </span><span class=3D"pun">{</span><span class=
=3D"pln"> it</span><span class=3D"pun">.</span><span class=3D"pln">type </s=
pan><span class=3D"pun">=3D=3D</span><span class=3D"pln"> classNodeFor</spa=
n><span class=3D"pun">(</span><span class=3D"typ">Integer</span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">}</span><s=
pan class=3D"pln"> </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Gives the
developer the ability to handle incorrect assignments. This is for
example useful if a class overrides <code>setProperty</code>, because in th=
at case it
is possible that assigning a variable of one type to a property of
another type is handled through that runtime mechanism. In that case, you
can help the type checker just by telling it that the assignment is
valid (using <code>handled</code> set to <code>true</code>).</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class=3D"paragraph">
<p>Of course, an extension script may consist of several blocks, and you
can have multiple blocks responding to the same event. This makes the
DSL look nicer and easier to write. However, reacting to events is far
from sufficient. If you know you can react to events, you also need to
deal with the errors, which implies several <em>helper</em> methods that wi=
ll
make things easier.</p>
</div>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"Typecheckingextensions-Workingwithextensions"><a class=3D"anchor"=
 href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-Worki=
ngwithextensions"></a>7.1.5. Working with extensions</h4>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Supportclasses"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-Supportcla=
sses"></a>Support classes</h5>
<div class=3D"paragraph">
<p>The DSL relies on a support class
called&nbsp;<a href=3D"https://docs.groovy-lang.org/3.0.7/html/gapi/index.h=
tml?org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.ht=
ml">org.codehaus.groovy.transform.stc.GroovyTypeCheckingExtensionSupport</a=
> .
This class itself
extends&nbsp;<a href=3D"https://docs.groovy-lang.org/3.0.7/html/gapi/index.=
html?org/codehaus/groovy/transform/stc/TypeCheckingExtension.html">org.code=
haus.groovy.transform.stc.TypeCheckingExtension</a> . Those
two classes define a number of <em>helper</em> methods that will make worki=
ng
with the AST easier, especially regarding type checking. One interesting
thing to know is that you&nbsp;<strong>have access to the type checker</str=
ong>. This means
that you can programmatically call methods of the type checker,
including those that allow you to <strong>throw compilation errors</strong>=
.</p>
</div>
<div class=3D"paragraph">
<p>The extension script delegates to
the&nbsp;<a href=3D"https://docs.groovy-lang.org/3.0.7/html/gapi/index.html=
?org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.html"=
>org.codehaus.groovy.transform.stc.GroovyTypeCheckingExtensionSupport</a> c=
lass, meaning that you have
direct access to the following variables:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><em>context</em>: the type checker context, of type&nbsp;<a href=3D"http=
s://docs.groovy-lang.org/3.0.7/html/gapi/index.html?org/codehaus/groovy/tra=
nsform/stc/TypeCheckingContext.html">org.codehaus.groovy.transform.stc.Type=
CheckingContext</a></p>
</li>
<li>
<p><em>typeCheckingVisitor</em>: the type checker itself, a&nbsp;<a href=3D=
"https://docs.groovy-lang.org/3.0.7/html/gapi/index.html?org/codehaus/groov=
y/transform/stc/StaticTypeCheckingVisitor.html">org.codehaus.groovy.transfo=
rm.stc.StaticTypeCheckingVisitor</a> instance</p>
</li>
<li>
<p><em>generatedMethods</em>: a list of "generated methods", which is in fa=
ct the list of "dummy" methods that you can create
inside a type checking extension using the&nbsp;<code>newMethod</code> call=
s</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>The type checking context contains a lot of information that is useful
in context for the type checker. For example, the current stack of
enclosing method calls, binary expressions, closures, =E2=80=A6 This inform=
ation
is in particular important if you have to know <em>where</em> you are when =
an
error occurs and that you want to handle it.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Classnodes"><a class=3D"anchor" href=3D"ht=
tp://groovy-lang.org/semantics.html#Typecheckingextensions-Classnodes"></a>=
Class nodes</h5>
<div class=3D"paragraph">
<p>Handling class nodes is something that needs particular attention when
you work with a type checking extension. Compilation works with an
abstract syntax tree (AST) and the tree may not be complete when you are
type checking a class. This also means that when you refer to types, you
must not use class literals such as&nbsp;<code>String</code> or&nbsp;<code>=
HashSet</code>, but to class
nodes representing those types. This requires a certain level of
abstraction and understanding how Groovy deals with class nodes. To make
things easier, Groovy supplies several helper methods to deal with class
nodes. For example, if you want to say "the type for&nbsp;String", you can
write:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> classNodeFor</span><span class=3D"pun">(</span><span c=
lass=3D"typ">String</span><span class=3D"pun">)</span><span class=3D"pln"> =
</span><span class=3D"kwd">instanceof</span><span class=3D"pln"> </span><sp=
an class=3D"typ">ClassNode</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>You would also note that there is a variant of&nbsp;<em>classNodeFor</em=
> that takes
a&nbsp;<code>String</code> as an argument, instead of a&nbsp;<code>Class</c=
ode>. In general, you
should&nbsp;<strong>not</strong> use that one, because it would create a cl=
ass node for
which the name is <code>String</code>, but without any method, any property=
, =E2=80=A6
defined on it. The first version returns a class node that is&nbsp;<em>reso=
lved</em>
but the second one returns one that is&nbsp;<em>not</em>. So the latter sho=
uld be
reserved for very special cases.</p>
</div>
<div class=3D"paragraph">
<p>The second problem that you might encounter is referencing a type which
is not yet compiled. This may happen more often than you think. For
example, when you compile a set of files together. In that case, if you
want to say "that variable is of type Foo" but <code>Foo</code> is not yet
compiled, you can still refer to the <code>Foo</code> class node
using&nbsp;<code>lookupClassNodeFor</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">assert</span>=
<span class=3D"pln"> lookupClassNodeFor</span><span class=3D"pun">(</span><=
span class=3D"str">'Foo'</span><span class=3D"pun">)</span><span class=3D"p=
ln"> </span><span class=3D"kwd">instanceof</span><span class=3D"pln"> </spa=
n><span class=3D"typ">ClassNode</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Helpingthetypechecker"><a class=3D"anchor"=
 href=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-Helpi=
ngthetypechecker"></a>Helping the type checker</h5>
<div class=3D"paragraph">
<p>Say that you know that variable&nbsp;<code>foo</code> is of type&nbsp;<c=
ode>Foo</code> and you want to
tell the type checker about it. Then you can use the&nbsp;<code>storeType</=
code> method,
which takes two arguments: the first one is the node for which you want
to store the type and the second one is the type of the node. If you
look at the implementation of&nbsp;<code>storeType</code>, you would see th=
at it
delegates to the type checker equivalent method, which itself does a lot
of work to store node metadata. You would also see that storing the type
is not limited to variables: you can set the type of any expression.</p>
</div>
<div class=3D"paragraph">
<p>Likewise, getting the type of an AST node is just a matter of
calling&nbsp;<code>getType</code> on that node. This would in general be wh=
at you want,
but there=E2=80=99s something that you must understand:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>getType</code> returns the&nbsp;<strong>inferred type</strong> of =
an expression. This means
that it will not return, for a variable declared of type&nbsp;<code>Object<=
/code> the
class node for&nbsp;<code>Object</code>, but the inferred type of this vari=
able&nbsp;<strong>at this
point of the code</strong> (flow typing)</p>
</li>
<li>
<p>if you want to access the origin type of a variable (or
field/parameter), then you must call the appropriate method on the AST
node</p>
</li>
</ul>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Throwinganerror"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-Throwingan=
error"></a>Throwing an error</h5>
<div class=3D"paragraph">
<p>To throw a type checking error, you only have to call the
<code>addStaticTypeError</code> method which takes two arguments:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>a&nbsp;<em>message</em> which is a string that will be displayed to the =
end user</p>
</li>
<li>
<p>an <em>AST node</em> responsible for the error. It=E2=80=99s better to p=
rovide the best
suiting AST node because it will be used to retrieve the line and column
numbers</p>
</li>
</ul>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-isXXXExpression"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-isXXXExpre=
ssion"></a>isXXXExpression</h5>
<div class=3D"paragraph">
<p>It is often required to know the type of an AST node. For readability,
the DSL provides a special isXXXExpression method that will delegate to
<code>x instance of XXXExpression</code>. For example, instead of writing:<=
/p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">if</span><spa=
n class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">nod=
e </span><span class=3D"kwd">instanceof</span><span class=3D"pln"> </span><=
span class=3D"typ">BinaryExpression</span><span class=3D"pun">)</span><span=
 class=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
   </span><span class=3D"pun">...</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>which requires you to import the <code>BinaryExpression</code> class, yo=
u can just
write:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">if</span><spa=
n class=3D"pln"> </span><span class=3D"pun">(</span><span class=3D"pln">isB=
inaryExpression</span><span class=3D"pun">(</span><span class=3D"pln">node<=
/span><span class=3D"pun">))</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">
   </span><span class=3D"pun">...</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Virtualmethods"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-Virtualmet=
hods"></a>Virtual methods</h5>
<div class=3D"paragraph">
<p>When you perform type checking of dynamic code, you may often face the
case when you know that a method call is valid but there is no "real"
method behind it. As an example, take the Grails dynamic finders. You
can have a method call consisting of a method named&nbsp;<em>findByName(=E2=
=80=A6)</em>. As
there=E2=80=99s no&nbsp;<em>findByName</em> method defined in the bean, the=
 type checker
would complain. Yet, you would know that this method wouldn=E2=80=99t fail =
at
runtime, and you can even tell what is the return type of this method.
For this case, the DSL supports two special constructs that consist of
<em>phantom methods</em>. This means that you will return a method node tha=
t
doesn=E2=80=99t really exist but is defined in the context of type checking=
.
Three methods exist:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>newMethod(String name, Class returnType)</code></p>
</li>
<li>
<p><code>newMethod(String name, ClassNode returnType)</code></p>
</li>
<li>
<p><code>newMethod(String name, Callable&lt;ClassNode&gt; return Type)</cod=
e></p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>All three variants do the same: they create a new method node which name
is the supplied name and define the return type of this method.
Moreover, the type checker would add those methods in
the&nbsp;<code>generatedMethods</code> list (see&nbsp;<code>isGenerated</co=
de> below). The reason why we
only set a name and a return type is that it is only what you need in
90% of the cases. For example, in the&nbsp;<code>findByName</code> example =
upper, the
only thing you need to know is that&nbsp;<code>findByName</code> wouldn=E2=
=80=99t fail at
runtime, and that it returns a domain class. The&nbsp;<code>Callable</code>=
 version of
return type is interesting because it defers the computation of the
return type when the type checker actually needs it. This is interesting
because in some circumstances, you may not know the actual return type
when the type checker demands it, so you can use a closure that will be
called each time&nbsp;<code>getReturnType</code> is called by the type chec=
ker on this
method node. If you combine this with deferred checks, you can achieve
pretty complex type checking including handling of forward references.</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">newMethod</sp=
an><span class=3D"pun">(</span><span class=3D"pln">name</span><span class=
=3D"pun">)</span><span class=3D"pln"> </span><span class=3D"pun">{</span><s=
pan class=3D"pln">
    </span><span class=3D"com">// each time getReturnType on this method no=
de will be called, this closure will be called!</span><span class=3D"pln">
    println </span><span class=3D"str">'Type checker called me!'</span><spa=
n class=3D"pln">
    lookupClassNodeFor</span><span class=3D"pun">(</span><span class=3D"typ=
">Foo</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span c=
lass=3D"com">// return type</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Should you need more than the name and return type, you can always
create a new&nbsp;<code>MethodNode</code> by yourself.</p>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Scoping"><a class=3D"anchor" href=3D"http:=
//groovy-lang.org/semantics.html#Typecheckingextensions-Scoping"></a>Scopin=
g</h5>
<div class=3D"paragraph">
<p>Scoping is very important in DSL type checking and is one of the reasons
why we couldn=E2=80=99t use a&nbsp;<em>pointcut</em> based approach to DSL =
type checking.
Basically, you must be able to define very precisely when your extension
applies and when it does not. Moreover, you must be able to handle
situations that a regular type checker would not be able to handle, such
as forward references:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">point a</span=
><span class=3D"pun">(</span><span class=3D"lit">1</span><span class=3D"pun=
">,</span><span class=3D"lit">1</span><span class=3D"pun">)</span><span cla=
ss=3D"pln">
line a</span><span class=3D"pun">,</span><span class=3D"pln">b </span><span=
 class=3D"com">// b is referenced afterwards!</span><span class=3D"pln">
point b</span><span class=3D"pun">(</span><span class=3D"lit">5</span><span=
 class=3D"pun">,</span><span class=3D"lit">2</span><span class=3D"pun">)</s=
pan></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Say for example that you want to handle a builder:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">builder</span=
><span class=3D"pun">.</span><span class=3D"pln">foo </span><span class=3D"=
pun">{</span><span class=3D"pln">
   bar
   baz</span><span class=3D"pun">(</span><span class=3D"pln">bar</span><spa=
n class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Your extension, then, should only be active once you=E2=80=99ve entered
the&nbsp;<code>foo</code> method, and inactive outside of this scope. But y=
ou could have
complex situations like multiple builders in the same file or embedded
builders (builders in builders). While you should not try to fix all
this from start (you must accept limitations to type checking), the type
checker does offer a nice mechanism to handle this: a scoping stack,
using the&nbsp;<code>newScope</code> and&nbsp;<code>scopeExit</code> method=
s.</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>newScope</code> creates a new scope and puts it on top of the stac=
k</p>
</li>
<li>
<p><code>scopeExits</code> pops a scope from the stack</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>A scope consists of:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>a parent scope</p>
</li>
<li>
<p>a map of custom data</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>If you want to look at the implementation, it=E2=80=99s simply a <code>L=
inkedHashMap</code>
(<a href=3D"https://docs.groovy-lang.org/3.0.7/html/gapi/index.html?org/cod=
ehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport/TypeCheckingS=
cope.html">org.codehaus.groovy.transform.stc.GroovyTypeCheckingExtensionSup=
port.TypeCheckingScope</a>),
but it=E2=80=99s quite powerful. For example, you can use such a scope to s=
tore
a list of closures to be executed when you exit the scope. This is how
you would handle forward references:&nbsp;</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> scope </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> newScope</span><span class=3D"pun">()</span><span class=3D"pln">
scope</span><span class=3D"pun">.</span><span class=3D"pln">secondPassCheck=
s </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">[]</span><span class=3D"pln">
</span><span class=3D"com">//...</span><span class=3D"pln">
scope</span><span class=3D"pun">.</span><span class=3D"pln">secondPassCheck=
s </span><span class=3D"pun">&lt;&lt;</span><span class=3D"pln"> </span><sp=
an class=3D"pun">{</span><span class=3D"pln"> println </span><span class=3D=
"str">'executed later'</span><span class=3D"pln"> </span><span class=3D"pun=
">}</span><span class=3D"pln">
</span><span class=3D"com">// ...</span><span class=3D"pln">
scopeExit </span><span class=3D"pun">{</span><span class=3D"pln">
    secondPassChecks</span><span class=3D"pun">*.</span><span class=3D"pln"=
>run</span><span class=3D"pun">()</span><span class=3D"pln"> </span><span c=
lass=3D"com">// execute deferred checks</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>That is to say, that if at some point you are not able to determine the
type of an expression, or that you are not able to check at this point
that an assignment is valid or not, you can still make the check later=E2=
=80=A6
This is a very powerful feature. Now,&nbsp;<code>newScope</code> and&nbsp;<=
code>scopeExit</code>
provide some interesting syntactic sugar:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">newScope </sp=
an><span class=3D"pun">{</span><span class=3D"pln">
    secondPassChecks </span><span class=3D"pun">=3D</span><span class=3D"pl=
n"> </span><span class=3D"pun">[]</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>At anytime in the DSL, you can access the current scope
using&nbsp;<code>getCurrentScope()</code> or more simply&nbsp;<code>current=
Scope</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"com">//...</span><=
span class=3D"pln">
currentScope</span><span class=3D"pun">.</span><span class=3D"pln">secondPa=
ssChecks </span><span class=3D"pun">&lt;&lt;</span><span class=3D"pln"> </s=
pan><span class=3D"pun">{</span><span class=3D"pln"> println </span><span c=
lass=3D"str">'executed later'</span><span class=3D"pln"> </span><span class=
=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"com">// ...</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The general schema would then be:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>determine a <em>pointcut</em> where you push a new scope on stack and
initialize custom variables within this scope</p>
</li>
<li>
<p>using the various events, you can use the information stored in your
custom scope to perform checks, defer checks,=E2=80=A6</p>
</li>
<li>
<p>determine a <em>pointcut</em> where you exit the scope, call&nbsp;<code>=
scopeExit</code>
and eventually perform additional checks</p>
</li>
</ul>
</div>
</div>
<div class=3D"sect4">
<h5 id=3D"Typecheckingextensions-Otherusefulmethods"><a class=3D"anchor" hr=
ef=3D"http://groovy-lang.org/semantics.html#Typecheckingextensions-Otheruse=
fulmethods"></a>Other useful methods</h5>
<div class=3D"paragraph">
<p>For the complete list of helper methods, please refer to
the&nbsp;<a href=3D"https://docs.groovy-lang.org/3.0.7/html/gapi/index.html=
?org/codehaus/groovy/transform/stc/GroovyTypeCheckingExtensionSupport.html"=
>org.codehaus.groovy.transform.stc.GroovyTypeCheckingExtensionSupport</a> a=
nd&nbsp;
<a href=3D"https://docs.groovy-lang.org/3.0.7/html/gapi/index.html?org/code=
haus/groovy/transform/stc/TypeCheckingExtension.html">org.codehaus.groovy.t=
ransform.stc.TypeCheckingExtension</a> classes.&nbsp;However,
take special attention to those methods:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p><code>isDynamic</code>: takes a VariableExpression as argument and retur=
ns true
if the variable is a DynamicExpression, which means, in a script, that
it wasn=E2=80=99t defined using a type or <code>def</code>.</p>
</li>
<li>
<p><code>isGenerated</code>: takes a MethodNode as an argument and tells if=
 the
method is one that was generated by the type checker extension using
the&nbsp;<code>newMethod</code> method</p>
</li>
<li>
<p><code>isAnnotatedBy</code>: takes an AST node and a Class (or ClassNode)=
, and
tells if the node is annotated with this class. For example:
<code>isAnnotatedBy(node, NotNull)</code></p>
</li>
<li>
<p><code>getTargetMethod</code>: takes a method call as argument and return=
s
the&nbsp;<code>MethodNode</code> that the type checker has determined for i=
t</p>
</li>
<li>
<p><code>delegatesTo</code>: emulates the behaviour of the&nbsp;<code>@Dele=
gatesTo</code>
annotation. It allows you to tell that the argument will delegate to a
specific type (you can also specify the delegation strategy)</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class=3D"sect2">
<h3 id=3D"_advanced_type_checking_extensions"><a class=3D"anchor" href=3D"h=
ttp://groovy-lang.org/semantics.html#_advanced_type_checking_extensions"></=
a>7.2. Advanced type checking extensions</h3>
<div class=3D"sect3">
<h4 id=3D"_precompiled_type_checking_extensions"><a class=3D"anchor" href=
=3D"http://groovy-lang.org/semantics.html#_precompiled_type_checking_extens=
ions"></a>7.2.1. Precompiled type checking extensions</h4>
<div class=3D"paragraph">
<p>All the examples above use type checking scripts. They are found in sour=
ce form in classpath, meaning that:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>a Groovy source file, corresponding to the type checking extension, is a=
vailable on compilation classpath</p>
</li>
<li>
<p>this file is compiled by the Groovy compiler for each source unit being =
compiled (often, a source unit corresponds
to a single file)</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>It is a very convenient way to develop type checking extensions, however=
 it implies a slower compilation phase, because
of the compilation of the extension itself for each file being compiled. Fo=
r those reasons, it can be practical to rely
on a precompiled extension. You have two options to do this:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>write the extension in Groovy, compile it, then use a reference to the e=
xtension class instead of the source</p>
</li>
<li>
<p>write the extension in Java, compile it, then use a reference to the ext=
ension class</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>Writing a type checking extension in Groovy is the easiest path. Basical=
ly, the idea is that the type checking extension
script becomes the body of the main method of a type checking extension cla=
ss, as illustrated here:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">import</span>=
<span class=3D"pln"> org</span><span class=3D"pun">.</span><span class=3D"p=
ln">codehaus</span><span class=3D"pun">.</span><span class=3D"pln">groovy</=
span><span class=3D"pun">.</span><span class=3D"pln">transform</span><span =
class=3D"pun">.</span><span class=3D"pln">stc</span><span class=3D"pun">.</=
span><span class=3D"typ">GroovyTypeCheckingExtensionSupport</span><span cla=
ss=3D"pln">

</span><span class=3D"kwd">class</span><span class=3D"pln"> </span><span cl=
ass=3D"typ">PrecompiledExtension</span><span class=3D"pln"> </span><span cl=
ass=3D"kwd">extends</span><span class=3D"pln"> </span><span class=3D"typ">G=
roovyTypeCheckingExtensionSupport</span><span class=3D"pun">.</span><span c=
lass=3D"typ">TypeCheckingDSL</span><span class=3D"pln"> </span><span class=
=3D"pun">{</span><span class=3D"pln">     </span><i class=3D"conum" data-va=
lue=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1</span><s=
pan class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"lit">@Override</span><span class=3D"pln">
    </span><span class=3D"typ">Object</span><span class=3D"pln"> run</span>=
<span class=3D"pun">()</span><span class=3D"pln"> </span><span class=3D"pun=
">{</span><span class=3D"pln">                                             =
                             </span><i class=3D"conum" data-value=3D"2"></i=
><b><span class=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"=
pun">)</span></b><span class=3D"pln">
        unresolvedVariable </span><span class=3D"pun">{</span><span class=
=3D"pln"> </span><span class=3D"kwd">var</span><span class=3D"pln"> </span>=
<span class=3D"pun">-&gt;</span><span class=3D"pln">
            </span><span class=3D"kwd">if</span><span class=3D"pln"> </span=
><span class=3D"pun">(</span><span class=3D"str">'robot'</span><span class=
=3D"pun">=3D=3D</span><span class=3D"kwd">var</span><span class=3D"pun">.</=
span><span class=3D"pln">name</span><span class=3D"pun">)</span><span class=
=3D"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">
                storeType</span><span class=3D"pun">(</span><span class=3D"=
kwd">var</span><span class=3D"pun">,</span><span class=3D"pln"> classNodeFo=
r</span><span class=3D"pun">(</span><span class=3D"typ">Robot</span><span c=
lass=3D"pun">))</span><span class=3D"pln">                                 =
        </span><i class=3D"conum" data-value=3D"3"></i><b><span class=3D"pu=
n">(</span><span class=3D"lit">3</span><span class=3D"pun">)</span></b><spa=
n class=3D"pln">
                handled </span><span class=3D"pun">=3D</span><span class=3D=
"pln"> </span><span class=3D"kwd">true</span><span class=3D"pln">
            </span><span class=3D"pun">}</span><span class=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>extending the <code>TypeCheckingDSL</code> class is the easiest</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>then the extension code needs to go inside the <code>run</code> method<=
/td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>and you can use the very same events as an extension written in source =
form</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Setting up the extension is very similar to using a source form extensio=
n:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">config</span>=
<span class=3D"pun">.</span><span class=3D"pln">addCompilationCustomizers</=
span><span class=3D"pun">(</span><span class=3D"pln">
    </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span =
class=3D"typ">ASTTransformationCustomizer</span><span class=3D"pun">(</span=
><span class=3D"pln">
        </span><span class=3D"typ">TypeChecked</span><span class=3D"pun">,<=
/span><span class=3D"pln">
        extensions</span><span class=3D"pun">:[</span><span class=3D"str">'=
typing.PrecompiledExtension'</span><span class=3D"pun">])</span><span class=
=3D"pln">
</span><span class=3D"pun">)</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>The difference is that instead of using a path in classpath, you just sp=
ecify the fully qualified class name of the
precompiled extension.</p>
</div>
<div class=3D"paragraph">
<p>In case you really want to write an extension in Java, then you will not=
 benefit from the type checking extension DSL.
The extension above can be rewritten in Java this way:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-java" data-lang=3D"java"><span class=3D"kwd">import</span><spa=
n class=3D"pln"> org</span><span class=3D"pun">.</span><span class=3D"pln">=
codehaus</span><span class=3D"pun">.</span><span class=3D"pln">groovy</span=
><span class=3D"pun">.</span><span class=3D"pln">ast</span><span class=3D"p=
un">.</span><span class=3D"typ">ClassHelper</span><span class=3D"pun">;</sp=
an><span class=3D"pln">
</span><span class=3D"kwd">import</span><span class=3D"pln"> org</span><spa=
n class=3D"pun">.</span><span class=3D"pln">codehaus</span><span class=3D"p=
un">.</span><span class=3D"pln">groovy</span><span class=3D"pun">.</span><s=
pan class=3D"pln">ast</span><span class=3D"pun">.</span><span class=3D"pln"=
>expr</span><span class=3D"pun">.</span><span class=3D"typ">VariableExpress=
ion</span><span class=3D"pun">;</span><span class=3D"pln">
</span><span class=3D"kwd">import</span><span class=3D"pln"> org</span><spa=
n class=3D"pun">.</span><span class=3D"pln">codehaus</span><span class=3D"p=
un">.</span><span class=3D"pln">groovy</span><span class=3D"pun">.</span><s=
pan class=3D"pln">transform</span><span class=3D"pun">.</span><span class=
=3D"pln">stc</span><span class=3D"pun">.</span><span class=3D"typ">Abstract=
TypeCheckingExtension</span><span class=3D"pun">;</span><span class=3D"pln"=
>


</span><span class=3D"kwd">import</span><span class=3D"pln"> org</span><spa=
n class=3D"pun">.</span><span class=3D"pln">codehaus</span><span class=3D"p=
un">.</span><span class=3D"pln">groovy</span><span class=3D"pun">.</span><s=
pan class=3D"pln">transform</span><span class=3D"pun">.</span><span class=
=3D"pln">stc</span><span class=3D"pun">.</span><span class=3D"typ">StaticTy=
peCheckingVisitor</span><span class=3D"pun">;</span><span class=3D"pln">

</span><span class=3D"kwd">public</span><span class=3D"pln"> </span><span c=
lass=3D"kwd">class</span><span class=3D"pln"> </span><span class=3D"typ">Pr=
ecompiledJavaExtension</span><span class=3D"pln"> </span><span class=3D"kwd=
">extends</span><span class=3D"pln"> </span><span class=3D"typ">AbstractTyp=
eCheckingExtension</span><span class=3D"pln"> </span><span class=3D"pun">{<=
/span><span class=3D"pln">                   </span><i class=3D"conum" data=
-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1</span=
><span class=3D"pun">)</span></b><span class=3D"pln">

    </span><span class=3D"kwd">public</span><span class=3D"pln"> </span><sp=
an class=3D"typ">PrecompiledJavaExtension</span><span class=3D"pun">(</span=
><span class=3D"kwd">final</span><span class=3D"pln"> </span><span class=3D=
"typ">StaticTypeCheckingVisitor</span><span class=3D"pln"> typeCheckingVisi=
tor</span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cla=
ss=3D"pun">{</span><span class=3D"pln">
        </span><span class=3D"kwd">super</span><span class=3D"pun">(</span>=
<span class=3D"pln">typeCheckingVisitor</span><span class=3D"pun">);</span>=
<span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">

    </span><span class=3D"lit">@Override</span><span class=3D"pln">
    </span><span class=3D"kwd">public</span><span class=3D"pln"> </span><sp=
an class=3D"kwd">boolean</span><span class=3D"pln"> handleUnresolvedVariabl=
eExpression</span><span class=3D"pun">(</span><span class=3D"kwd">final</sp=
an><span class=3D"pln"> </span><span class=3D"typ">VariableExpression</span=
><span class=3D"pln"> vexp</span><span class=3D"pun">)</span><span class=3D=
"pln"> </span><span class=3D"pun">{</span><span class=3D"pln">          </s=
pan><i class=3D"conum" data-value=3D"2"></i><b><span class=3D"pun">(</span>=
<span class=3D"lit">2</span><span class=3D"pun">)</span></b><span class=3D"=
pln">
        </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><sp=
an class=3D"pun">(</span><span class=3D"str">"robot"</span><span class=3D"p=
un">.</span><span class=3D"pln">equals</span><span class=3D"pun">(</span><s=
pan class=3D"pln">vexp</span><span class=3D"pun">.</span><span class=3D"pln=
">getName</span><span class=3D"pun">()))</span><span class=3D"pln"> </span>=
<span class=3D"pun">{</span><span class=3D"pln">
            storeType</span><span class=3D"pun">(</span><span class=3D"pln"=
>vexp</span><span class=3D"pun">,</span><span class=3D"pln"> </span><span c=
lass=3D"typ">ClassHelper</span><span class=3D"pun">.</span><span class=3D"p=
ln">make</span><span class=3D"pun">(</span><span class=3D"typ">Robot</span>=
<span class=3D"pun">.</span><span class=3D"kwd">class</span><span class=3D"=
pun">));</span><span class=3D"pln">
            setHandled</span><span class=3D"pun">(</span><span class=3D"kwd=
">true</span><span class=3D"pun">);</span><span class=3D"pln">
            </span><span class=3D"kwd">return</span><span class=3D"pln"> </=
span><span class=3D"kwd">true</span><span class=3D"pun">;</span><span class=
=3D"pln">
        </span><span class=3D"pun">}</span><span class=3D"pln">
        </span><span class=3D"kwd">return</span><span class=3D"pln"> </span=
><span class=3D"kwd">false</span><span class=3D"pun">;</span><span class=3D=
"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">

</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>extend the <code>AbstractTypeCheckingExtension</code> class</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>then override the <code>handleXXX</code> methods as required</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_using_grab_in_a_type_checking_extension"><a class=3D"anchor" hre=
f=3D"http://groovy-lang.org/semantics.html#_using_grab_in_a_type_checking_e=
xtension"></a>7.2.2. Using @Grab in a type checking extension</h4>
<div class=3D"paragraph">
<p>It is totally possible to use the <code>@Grab</code> annotation in a typ=
e checking extension.
This means you can include libraries that would only be
available at compile time. In that case, you must understand that you
would increase the time of compilation significantly (at least, the
first time it grabs the dependencies).</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_sharing_or_packaging_type_checking_extensions"><a class=3D"ancho=
r" href=3D"http://groovy-lang.org/semantics.html#_sharing_or_packaging_type=
_checking_extensions"></a>7.2.3. Sharing or packaging type checking extensi=
ons</h4>
<div class=3D"paragraph">
<p>A type checking extension is just a script that need to be on classpath.=
 As such,
you can share it as is, or bundle it in a jar file that would be added to c=
lasspath.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_global_type_checking_extensions"><a class=3D"anchor" href=3D"htt=
p://groovy-lang.org/semantics.html#_global_type_checking_extensions"></a>7.=
2.4. Global type checking extensions</h4>
<div class=3D"paragraph">
<p>While you can configure the compiler to transparently add type checking =
extensions to your
script, there is currently no way to apply an extension transparently just =
by having it on
classpath.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_type_checking_extensions_and_compilestatic"><a class=3D"anchor" =
href=3D"http://groovy-lang.org/semantics.html#_type_checking_extensions_and=
_compilestatic"></a>7.2.5. Type checking extensions and @CompileStatic</h4>
<div class=3D"paragraph">
<p>Type checking extensions are used with <code>@TypeChecked</code> but can=
 also be used with <code>@CompileStatic</code>. However, you must
be aware that:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>a type checking extension used with <code>@CompileStatic</code> will in =
general not be sufficient to let the compiler know how
to generate statically compilable code from "unsafe" code</p>
</li>
<li>
<p>it is possible to use a type checking extension with <code>@CompileStati=
c</code> just to enhance type checking, that is to say
introduce <strong>more</strong> compilation errors, without actually dealin=
g with dynamic code</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>Let=E2=80=99s explain the first point, which is that even if you use an =
extension, the compiler will not know how to compile
your code statically: technically, even if you tell the type checker what i=
s the type of a dynamic
variable, for example, it would not know how to compile it. Is it <code>get=
Binding('foo')</code>, <code>getProperty('foo')</code>,
<code>delegate.getFoo()</code>,=E2=80=A6? There=E2=80=99s absolutely no dir=
ect way to tell the static compiler how to compile such
code even if you use a type checking extension (that would, again, only giv=
e hints about the type).</p>
</div>
<div class=3D"paragraph">
<p>One possible solution for this particular example is to instruct the com=
piler to use <a href=3D"http://groovy-lang.org/semantics.html#mixed-mode">m=
ixed mode compilation</a>.
The more advanced one is to use <a href=3D"http://groovy-lang.org/semantics=
.html#ast-xform-as-extension">AST transformations during type checking</a> =
but it is far more
complex.</p>
</div>
<div class=3D"paragraph">
<p>Type checking extensions allow you to help the type checker where it
fails, but it also allow you to fail where it doesn=E2=80=99t. In that cont=
ext,
it makes sense to support extensions for&nbsp;<code>@CompileStatic</code> t=
oo. Imagine
an extension that is capable of type checking SQL queries. In that case,
the extension would be valid in both dynamic and static context, because
without the extension, the code would still pass.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"mixed-mode"><a class=3D"anchor" href=3D"http://groovy-lang.org/se=
mantics.html#mixed-mode"></a>7.2.6. Mixed mode compilation</h4>
<div class=3D"paragraph">
<p>In the previous section, we highlighted the fact that you can activate t=
ype checking extensions with
<code>@CompileStatic</code>. In that context, the type checker would not co=
mplain anymore about some unresolved variables or
unknown method calls, but it would still wouldn=E2=80=99t know how to compi=
le them statically.</p>
</div>
<div class=3D"paragraph">
<p>Mixed mode compilation offers a third way, which is to instruct the comp=
iler that whenever an unresolved variable
or method call is found, then it should fall back to a dynamic mode. This i=
s possible thanks to type checking extensions
and a special <code>makeDynamic</code> call.</p>
</div>
<div class=3D"paragraph">
<p>To illustrate this, let=E2=80=99s come back to the <code>Robot</code> ex=
ample:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">robot</span><=
span class=3D"pun">.</span><span class=3D"pln">move </span><span class=3D"l=
it">100</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>And let=E2=80=99s try to activate our type checking extension using <cod=
e>@CompileStatic</code> instead of <code>@TypeChecked</code>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> config </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span>=
<span class=3D"typ">CompilerConfiguration</span><span class=3D"pun">()</spa=
n><span class=3D"pln">
config</span><span class=3D"pun">.</span><span class=3D"pln">addCompilation=
Customizers</span><span class=3D"pun">(</span><span class=3D"pln">
    </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span =
class=3D"typ">ASTTransformationCustomizer</span><span class=3D"pun">(</span=
><span class=3D"pln">
        </span><span class=3D"typ">CompileStatic</span><span class=3D"pun">=
,</span><span class=3D"pln">                                      </span><i=
 class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span =
class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
        extensions</span><span class=3D"pun">:[</span><span class=3D"str">'=
robotextension.groovy'</span><span class=3D"pun">])</span><span class=3D"pl=
n">               </span><i class=3D"conum" data-value=3D"2"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">
</span><span class=3D"pun">)</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> shell </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">n=
ew</span><span class=3D"pln"> </span><span class=3D"typ">GroovyShell</span>=
<span class=3D"pun">(</span><span class=3D"pln">config</span><span class=3D=
"pun">)</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> robot </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">n=
ew</span><span class=3D"pln"> </span><span class=3D"typ">Robot</span><span =
class=3D"pun">()</span><span class=3D"pln">
shell</span><span class=3D"pun">.</span><span class=3D"pln">setVariable</sp=
an><span class=3D"pun">(</span><span class=3D"str">'robot'</span><span clas=
s=3D"pun">,</span><span class=3D"pln"> robot</span><span class=3D"pun">)</s=
pan><span class=3D"pln">
shell</span><span class=3D"pun">.</span><span class=3D"pln">evaluate</span>=
<span class=3D"pun">(</span><span class=3D"pln">script</span><span class=3D=
"pun">)</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>Apply <code>@CompileStatic</code> transparently</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>Activate the type checking extension</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The script will run fine because the static compiler is told about the t=
ype of the <code>robot</code> variable, so it is capable
of making a direct call to <code>move</code>. But before that, how did the =
compiler know how to get the <code>robot</code> variable? In fact
by default, in a type checking extension, setting <code>handled=3Dtrue</cod=
e> on an unresolved variable will automatically trigger
a dynamic resolution, so in this case you don=E2=80=99t have anything speci=
al to make the compiler use a mixed mode. However,
let=E2=80=99s slightly update our example, starting from the robot script:<=
/p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">move </span><=
span class=3D"lit">100</span></code></pre>
</div>
</div>
<div class=3D"paragraph">
<p>Here you can notice that there is no reference to <code>robot</code> any=
more. Our extension will not help then because we will not
be able to instruct the compiler that <code>move</code> is done on a <code>=
Robot</code> instance. This example of code can be executed in a
totally dynamic way thanks to the help of a <a href=3D"https://docs.groovy-=
lang.org/3.0.7/html/gapi/index.html?groovy/util/DelegatingScript.html">groo=
vy.util.DelegatingScript</a>:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"kwd">def</span><sp=
an class=3D"pln"> config </span><span class=3D"pun">=3D</span><span class=
=3D"pln"> </span><span class=3D"kwd">new</span><span class=3D"pln"> </span>=
<span class=3D"typ">CompilerConfiguration</span><span class=3D"pun">()</spa=
n><span class=3D"pln">
config</span><span class=3D"pun">.</span><span class=3D"pln">scriptBaseClas=
s </span><span class=3D"pun">=3D</span><span class=3D"pln"> </span><span cl=
ass=3D"str">'groovy.util.DelegatingScript'</span><span class=3D"pln">     <=
/span><i class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</spa=
n><span class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=
=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> shell </span><spa=
n class=3D"pun">=3D</span><span class=3D"pln"> </span><span class=3D"kwd">n=
ew</span><span class=3D"pln"> </span><span class=3D"typ">GroovyShell</span>=
<span class=3D"pun">(</span><span class=3D"pln">config</span><span class=3D=
"pun">)</span><span class=3D"pln">
</span><span class=3D"kwd">def</span><span class=3D"pln"> runner </span><sp=
an class=3D"pun">=3D</span><span class=3D"pln"> shell</span><span class=3D"=
pun">.</span><span class=3D"pln">parse</span><span class=3D"pun">(</span><s=
pan class=3D"pln">script</span><span class=3D"pun">)</span><span class=3D"p=
ln">                            </span><i class=3D"conum" data-value=3D"2">=
</i><b><span class=3D"pun">(</span><span class=3D"lit">2</span><span class=
=3D"pun">)</span></b><span class=3D"pln">
runner</span><span class=3D"pun">.</span><span class=3D"pln">setDelegate</s=
pan><span class=3D"pun">(</span><span class=3D"kwd">new</span><span class=
=3D"pln"> </span><span class=3D"typ">Robot</span><span class=3D"pun">())</s=
pan><span class=3D"pln">                             </span><i class=3D"con=
um" data-value=3D"3"></i><b><span class=3D"pun">(</span><span class=3D"lit"=
>3</span><span class=3D"pun">)</span></b><span class=3D"pln">
runner</span><span class=3D"pun">.</span><span class=3D"pln">run</span><spa=
n class=3D"pun">()</span><span class=3D"pln">                              =
                  </span><i class=3D"conum" data-value=3D"4"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">4</span><span class=3D"pun">)</spa=
n></b></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>we configure the compiler to use a <code>DelegatingScript</code> as the=
 base class</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>the script source needs to be parsed and will return an instance of <co=
de>DelegatingScript</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>we can then call <code>setDelegate</code> to use a <code>Robot</code> a=
s the delegate of the script</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>then execute the script. <code>move</code> will be directly executed on=
 the delegate</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>If we want this to pass with <code>@CompileStatic</code>, we have to use=
 a type checking extension, so let=E2=80=99s update our configuration:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">config</span>=
<span class=3D"pun">.</span><span class=3D"pln">addCompilationCustomizers</=
span><span class=3D"pun">(</span><span class=3D"pln">
    </span><span class=3D"kwd">new</span><span class=3D"pln"> </span><span =
class=3D"typ">ASTTransformationCustomizer</span><span class=3D"pun">(</span=
><span class=3D"pln">
        </span><span class=3D"typ">CompileStatic</span><span class=3D"pun">=
,</span><span class=3D"pln">                                      </span><i=
 class=3D"conum" data-value=3D"1"></i><b><span class=3D"pun">(</span><span =
class=3D"lit">1</span><span class=3D"pun">)</span></b><span class=3D"pln">
        extensions</span><span class=3D"pun">:[</span><span class=3D"str">'=
robotextension2.groovy'</span><span class=3D"pun">])</span><span class=3D"p=
ln">              </span><i class=3D"conum" data-value=3D"2"></i><b><span c=
lass=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"pun">)</spa=
n></b><span class=3D"pln">
</span><span class=3D"pun">)</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>apply <code>@CompileStatic</code> transparently</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>use an alternate type checking extension meant to recognize the call to=
 <code>move</code></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>Then in the previous section we have learnt how to deal with unrecognize=
d method calls, so we are able to write this
extension:</p>
</div>
<div class=3D"listingblock">
<div class=3D"title">robotextension2.groovy</div>
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">methodNotFoun=
d </span><span class=3D"pun">{</span><span class=3D"pln"> receiver</span><s=
pan class=3D"pun">,</span><span class=3D"pln"> name</span><span class=3D"pu=
n">,</span><span class=3D"pln"> argList</span><span class=3D"pun">,</span><=
span class=3D"pln"> argTypes</span><span class=3D"pun">,</span><span class=
=3D"pln"> call </span><span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">isMethodCallExpression</span><span=
 class=3D"pun">(</span><span class=3D"pln">call</span><span class=3D"pun">)=
</span><span class=3D"pln">                        </span><i class=3D"conum=
" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">1=
</span><span class=3D"pun">)</span></b><span class=3D"pln">
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> ca=
ll</span><span class=3D"pun">.</span><span class=3D"pln">implicitThis      =
                          </span><i class=3D"conum" data-value=3D"2"></i><b=
><span class=3D"pun">(</span><span class=3D"lit">2</span><span class=3D"pun=
">)</span></b><span class=3D"pln">
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> </=
span><span class=3D"str">'move'</span><span class=3D"pun">=3D=3D</span><spa=
n class=3D"pln">name                                     </span><i class=3D=
"conum" data-value=3D"3"></i><b><span class=3D"pun">(</span><span class=3D"=
lit">3</span><span class=3D"pun">)</span></b><span class=3D"pln">
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> ar=
gTypes</span><span class=3D"pun">.</span><span class=3D"pln">length</span><=
span class=3D"pun">=3D=3D</span><span class=3D"lit">1</span><span class=3D"=
pln">                               </span><i class=3D"conum" data-value=3D=
"4"></i><b><span class=3D"pun">(</span><span class=3D"lit">4</span><span cl=
ass=3D"pun">)</span></b><span class=3D"pln">
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> ar=
gTypes</span><span class=3D"pun">[</span><span class=3D"lit">0</span><span =
class=3D"pun">]</span><span class=3D"pln"> </span><span class=3D"pun">=3D=
=3D</span><span class=3D"pln"> classNodeFor</span><span class=3D"pun">(</sp=
an><span class=3D"kwd">int</span><span class=3D"pun">)</span><span class=3D=
"pln">                 </span><i class=3D"conum" data-value=3D"5"></i><b><s=
pan class=3D"pun">(</span><span class=3D"lit">5</span><span class=3D"pun">)=
</span></b><span class=3D"pln">
    </span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{</span><span class=3D"pln">
        handled </span><span class=3D"pun">=3D</span><span class=3D"pln"> <=
/span><span class=3D"kwd">true</span><span class=3D"pln">                  =
                    </span><i class=3D"conum" data-value=3D"6"></i><b><span=
 class=3D"pun">(</span><span class=3D"lit">6</span><span class=3D"pun">)</s=
pan></b><span class=3D"pln">
        newMethod</span><span class=3D"pun">(</span><span class=3D"str">'mo=
ve'</span><span class=3D"pun">,</span><span class=3D"pln"> classNodeFor</sp=
an><span class=3D"pun">(</span><span class=3D"typ">Robot</span><span class=
=3D"pun">))</span><span class=3D"pln">              </span><i class=3D"conu=
m" data-value=3D"7"></i><b><span class=3D"pun">(</span><span class=3D"lit">=
7</span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>if the call is a method call (not a static method call)</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"2"></i><b>2</b></td>
<td>that this call is made on "implicit this" (no explicit <code>this.</cod=
e>)</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"3"></i><b>3</b></td>
<td>that the method being called is <code>move</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"4"></i><b>4</b></td>
<td>and that the call is done with a single argument</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"5"></i><b>5</b></td>
<td>and that argument is of type <code>int</code></td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"6"></i><b>6</b></td>
<td>then tell the type checker that the call is valid</td>
</tr>
<tr>
<td><i class=3D"conum" data-value=3D"7"></i><b>7</b></td>
<td>and that the return type of the call is <code>Robot</code></td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>If you try to execute this code, then you could be surprised that it act=
ually fails at runtime:</p>
</div>
<div class=3D"listingblock">
<div class=3D"content">
<pre>java.lang.NoSuchMethodError: java.lang.Object.move()Ltyping/Robot;</pr=
e>
</div>
</div>
<div class=3D"paragraph">
<p>The reason is very simple: while the type checking extension is sufficie=
nt for <code>@TypeChecked</code>, which does not involve
static compilation, it is not enough for <code>@CompileStatic</code> which =
requires additional information. In this case, you told
the compiler that the method existed, but you didn=E2=80=99t explain to it =
<strong>what</strong> method it is in reality, and what is the
receiver of the message (the delegate).</p>
</div>
<div class=3D"paragraph">
<p>Fixing this is very easy and just implies replacing the <code>newMethod<=
/code> call with something else:</p>
</div>
<div class=3D"listingblock">
<div class=3D"title">robotextension3.groovy</div>
<div class=3D"content">
<pre class=3D"prettyprint highlight prettyprinted" style=3D""><code class=
=3D"language-groovy" data-lang=3D"groovy"><span class=3D"pln">methodNotFoun=
d </span><span class=3D"pun">{</span><span class=3D"pln"> receiver</span><s=
pan class=3D"pun">,</span><span class=3D"pln"> name</span><span class=3D"pu=
n">,</span><span class=3D"pln"> argList</span><span class=3D"pun">,</span><=
span class=3D"pln"> argTypes</span><span class=3D"pun">,</span><span class=
=3D"pln"> call </span><span class=3D"pun">-&gt;</span><span class=3D"pln">
    </span><span class=3D"kwd">if</span><span class=3D"pln"> </span><span c=
lass=3D"pun">(</span><span class=3D"pln">isMethodCallExpression</span><span=
 class=3D"pun">(</span><span class=3D"pln">call</span><span class=3D"pun">)=
</span><span class=3D"pln">
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> ca=
ll</span><span class=3D"pun">.</span><span class=3D"pln">implicitThis
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> </=
span><span class=3D"str">'move'</span><span class=3D"pun">=3D=3D</span><spa=
n class=3D"pln">name
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> ar=
gTypes</span><span class=3D"pun">.</span><span class=3D"pln">length</span><=
span class=3D"pun">=3D=3D</span><span class=3D"lit">1</span><span class=3D"=
pln">
        </span><span class=3D"pun">&amp;&amp;</span><span class=3D"pln"> ar=
gTypes</span><span class=3D"pun">[</span><span class=3D"lit">0</span><span =
class=3D"pun">]</span><span class=3D"pln"> </span><span class=3D"pun">=3D=
=3D</span><span class=3D"pln"> classNodeFor</span><span class=3D"pun">(</sp=
an><span class=3D"kwd">int</span><span class=3D"pun">)</span><span class=3D=
"pln">
    </span><span class=3D"pun">)</span><span class=3D"pln"> </span><span cl=
ass=3D"pun">{</span><span class=3D"pln">
        makeDynamic</span><span class=3D"pun">(</span><span class=3D"pln">c=
all</span><span class=3D"pun">,</span><span class=3D"pln"> classNodeFor</sp=
an><span class=3D"pun">(</span><span class=3D"typ">Robot</span><span class=
=3D"pun">))</span><span class=3D"pln">              </span><i class=3D"conu=
m" data-value=3D"1"></i><b><span class=3D"pun">(</span><span class=3D"lit">=
1</span><span class=3D"pun">)</span></b><span class=3D"pln">
    </span><span class=3D"pun">}</span><span class=3D"pln">
</span><span class=3D"pun">}</span></code></pre>
</div>
</div>
<div class=3D"colist arabic">
<table>
<tbody><tr>
<td><i class=3D"conum" data-value=3D"1"></i><b>1</b></td>
<td>tell the compiler that the call should be make dynamic</td>
</tr>
</tbody></table>
</div>
<div class=3D"paragraph">
<p>The <code>makeDynamic</code> call does 3 things:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>it returns a virtual method just like <code>newMethod</code></p>
</li>
<li>
<p>automatically sets the <code>handled</code> flag to <code>true</code> fo=
r you</p>
</li>
<li>
<p>but also marks the <code>call</code> to be done dynamically</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>So when the compiler will have to generate bytecode for the call to <cod=
e>move</code>, since it is now marked as a dynamic call,
it will fallback to the dynamic compiler and let it handle the call. And si=
nce the extension tells us that the return
type of the dynamic call is a <code>Robot</code>, subsequent calls will be =
done statically!</p>
</div>
<div class=3D"paragraph">
<p>Some would wonder why the static compiler doesn=E2=80=99t do this by def=
ault without an extension. It is a design decision:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>if the code is statically compiled, we normally want type safety and bes=
t performance</p>
</li>
<li>
<p>so if unrecognized variables/method calls are made dynamic, you loose ty=
pe safety, but also all support for typos at
compile time!</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>In short, if you want to have mixed mode compilation, it <strong>has</st=
rong> to be explicit, through a type checking extension, so
that the compiler, and the designer of the DSL, are totally aware of what t=
hey are doing.</p>
</div>
<div class=3D"paragraph">
<p><code>makeDynamic</code> can be used on 3 kind of AST nodes:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>a method node (<code>MethodNode</code>)</p>
</li>
<li>
<p>a variable (<code>VariableExpression</code>)</p>
</li>
<li>
<p>a property expression (<code>PropertyExpression</code>)</p>
</li>
</ul>
</div>
<div class=3D"paragraph">
<p>If that is not enough, then it means that static compilation cannot be d=
one directly and that you have to rely on AST
transformations.</p>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"ast-xform-as-extension"><a class=3D"anchor" href=3D"http://groovy=
-lang.org/semantics.html#ast-xform-as-extension"></a>7.2.7. Transforming th=
e AST in an extension</h4>
<div class=3D"paragraph">
<p>Type checking extensions look very attractive from an AST transformation=
 design point of view: extensions have access
to context like inferred types, which is often nice to have. And an extensi=
on has a direct access to the abstract
syntax tree. Since you have access to the AST, there is nothing in theory t=
hat prevents
you from modifying the AST. However, we do not recommend you to do so, unle=
ss you are an advanced AST transformation
designer and well aware of the compiler internals:</p>
</div>
<div class=3D"ulist">
<ul>
<li>
<p>First of all, you would explicitly break the contract of type checking, =
which is to annotate,
and only annotate the AST. Type checking should&nbsp;<strong>not</strong> m=
odify the AST tree because you wouldn=E2=80=99t be able to
guarantee anymore that code without the&nbsp;<em>@TypeChecked</em> annotati=
on
behaves the same without the annotation.</p>
</li>
<li>
<p>If your extension is meant to work with&nbsp;<em>@CompileStatic</em>, th=
en you&nbsp;<strong>can</strong> modify the AST because
this is indeed what&nbsp;<em>@CompileStatic</em> will eventually do. Static=
 compilation doesn=E2=80=99t guarantee the same semantics at
dynamic Groovy so there is effectively a difference between code compiled w=
ith&nbsp;<em>@CompileStatic</em> and code compiled
with&nbsp;<em>@TypeChecked</em>. It=E2=80=99s up to you to choose whatever =
strategy you want to update the AST, but probably
using an AST transformation that runs before type checking is easier.</p>
</li>
<li>
<p>if you cannot rely on a transformation that kicks in before the type che=
cker, then you must be <strong>very</strong> careful</p>
</li>
</ul>
</div>
<div class=3D"admonitionblock warning">
<table>
<tbody><tr>
<td class=3D"icon">
<i class=3D"fa icon-warning" title=3D"Warning"></i>
</td>
<td class=3D"content">
The type checking phase is the last phase running in the compiler before by=
tecode generation. All other AST
transformations run before that and the compiler does a very good job at "f=
ixing" incorrect AST generated before the
type checking phase. As soon as you perform a transformation during type ch=
ecking, for example directly in a type
checking extension, then you have to do all this work of generating a 100% =
compiler compliant abstract syntax tree by
yourself, which can easily become complex. That=E2=80=99s why we do not rec=
ommend to go that way if you are beginning with
type checking extensions and AST transformations.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class=3D"sect3">
<h4 id=3D"_examples"><a class=3D"anchor" href=3D"http://groovy-lang.org/sem=
antics.html#_examples"></a>7.2.8. Examples</h4>
<div class=3D"paragraph">
<p>Examples of real life type checking extensions are easy to find. You can=
 download the source code for Groovy and
take a look at the
<a href=3D"https://github.com/apache/groovy/blob/master/src/test/groovy/tra=
nsform/stc/TypeCheckingExtensionsTest.groovy">TypeCheckingExtensionsTest</a=
>
class which is linked to
<a href=3D"https://github.com/apache/groovy/tree/master/src/test-resources/=
groovy/transform/stc">various extension scripts</a>.</p>
</div>
<div class=3D"paragraph">
<p>An example of a complex type checking extension can be found in the <a h=
ref=3D"https://docs.groovy-lang.org/latest/html/documentation/markup-templa=
te-engine.html">Markup Template Engine</a>
source code: this template engine relies on a type checking extension and A=
ST transformations to transform templates into
fully statically compiled code. Sources for this can be found
<a href=3D"https://github.com/apache/groovy/tree/master/subprojects/groovy-=
templates/src/main/groovy/groovy/text/markup">here</a>.</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div></div></div></div><footer id=3D"footer">
                            <div class=3D"row">
                                <div class=3D"colset-3-footer">
                                    <div class=3D"col-1">
                                        <h1>Groovy</h1><ul>
                                            <li><a href=3D"http://groovy-la=
ng.org/learn.html">Learn</a></li><li><a href=3D"http://groovy-lang.org/docu=
mentation.html">Documentation</a></li><li><a href=3D"https://groovy.apache.=
org/download.html">Download</a></li><li><a href=3D"http://groovy-lang.org/s=
upport.html">Support</a></li><li><a href=3D"https://groovy.apache.org/">Con=
tribute</a></li><li><a href=3D"http://groovy-lang.org/ecosystem.html">Ecosy=
stem</a></li>
                                        </ul>
                                    </div><div class=3D"col-2">
                                        <h1>About</h1><ul>
                                            <li><a href=3D"https://github.c=
om/apache/groovy">Source code</a></li><li><a href=3D"http://groovy-lang.org=
/security.html">Security</a></li><li><a href=3D"http://groovy-lang.org/lear=
n.html#books">Books</a></li><li><a href=3D"http://groovy-lang.org/thanks.ht=
ml">Thanks</a></li><li><a href=3D"http://www.apache.org/foundation/sponsors=
hip.html">Sponsorship</a></li><li><a href=3D"http://groovy-lang.org/faq.htm=
l">FAQ</a></li><li><a href=3D"http://groovy-lang.org/search.html">Search</a=
></li>
                                        </ul>
                                    </div><div class=3D"col-3">
                                        <h1>Socialize</h1><ul>
                                            <li><a href=3D"http://groovy-la=
ng.org/mailing-lists.html">Discuss on the mailing-list</a></li><li><a href=
=3D"http://groovy-lang.org/groovy-weekly.html">Groovy newsletter</a></li><l=
i><a href=3D"https://twitter.com/ApacheGroovy">Groovy on Twitter</a></li><l=
i><a href=3D"http://groovy-lang.org/events.html">Events and conferences</a>=
</li><li><a href=3D"https://github.com/apache/groovy">Source code on GitHub=
</a></li><li><a href=3D"http://groovy-lang.org/reporting-issues.html">Repor=
t issues in Jira</a></li><li><a href=3D"http://stackoverflow.com/questions/=
tagged/groovy">Stack Overflow questions</a></li><li><a href=3D"http://groov=
ycommunity.com/">Slack Community</a></li>
                                        </ul>
                                    </div><div class=3D"col-right">
                                        <p>
                                            The Groovy programming language=
 is supported by the <a href=3D"http://www.apache.org/">Apache Software Fou=
ndation</a> and the Groovy community
                                        </p><img src=3D"http://groovy-lang.=
org/img/xasf_logo.png.pagespeed.ic.30Usdcamcb.webp" title=3D"The Apache Sof=
tware Foundation" alt=3D"The Apache Software Foundation" class=3D"img-respo=
nsive">
                                    </div>
                                </div><div class=3D"clearfix">=C2=A9 2003-2=
020 the Apache Groovy project =E2=80=94 Groovy is Open Source, <a href=3D"h=
ttp://www.apache.org/licenses/LICENSE-2.0.html">Apache 2 License</a></div>
                            </div>
                        </footer></div>
                </div>
            </div>
        </div>
   =20
</body></html>
------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://groovy-lang.org/css/A.bootstrap.css+font-awesome.min.css,Mcc.TUcdx_dMQx.css.pagespeed.cf.lx7BtOI_OP.css

@charset "utf-8";

@font-face { font-family: "Glyphicons Halflings"; src: url("../fonts/glyphi=
cons-halflings-regular.eot?#iefix") format("embedded-opentype"), url("../fo=
nts/glyphicons-halflings-regular.woff") format("woff"), url("../fonts/glyph=
icons-halflings-regular.ttf") format("truetype"), url("../fonts/glyphicons-=
halflings-regular.svg#glyphicons_halflingsregular") format("svg"); }

@font-face { font-family: FontAwesome; src: url("../fonts/fontawesome-webfo=
nt.eot?#iefix&v=3D4.7.0") format("embedded-opentype"), url("../fonts/fontaw=
esome-webfont.woff2?v=3D4.7.0") format("woff2"), url("../fonts/fontawesome-=
webfont.woff?v=3D4.7.0") format("woff"), url("../fonts/fontawesome-webfont.=
ttf?v=3D4.7.0") format("truetype"), url("../fonts/fontawesome-webfont.svg?v=
=3D4.7.0#fontawesomeregular") format("svg"); font-weight: normal; font-styl=
e: normal; }

html { font-family: sans-serif; text-size-adjust: 100%; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, =
nav, section, summary { display: block; }

audio, canvas, progress, video { display: inline-block; vertical-align: bas=
eline; }

audio:not([controls]) { display: none; height: 0px; }

[hidden], template { display: none; }

a { background: transparent; }

a:active, a:hover { outline: 0px; }

abbr[title] { border-bottom: 1px dotted; }

b, strong { font-weight: bold; }

dfn { font-style: italic; }

h1 { margin: 0.67em 0px; font-size: 2em; }

mark { color: rgb(0, 0, 0); background: rgb(255, 255, 0); }

small { font-size: 80%; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

figure { margin: 1em 40px; }

hr { height: 0px; box-sizing: content-box; }

pre { overflow: auto; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

button, input, optgroup, select, textarea { margin: 0px; font: inherit; col=
or: inherit; }

button { overflow: visible; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { appearance: button; cursor: pointer; }

button[disabled], html input[disabled] { cursor: default; }

input { line-height: normal; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { box-sizing: content-box; appearance: textfield; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { appearance: none; }

fieldset { padding: 0.35em 0.625em 0.75em; margin: 0px 2px; border: 1px sol=
id silver; }

legend { padding: 0px; border: 0px; }

textarea { overflow: auto; }

optgroup { font-weight: bold; }

table { border-spacing: 0px; border-collapse: collapse; }

td, th { padding: 0px; }

@media print {
  * { color: rgb(0, 0, 0) !important; text-shadow: none !important; backgro=
und: transparent !important; box-shadow: none !important; }
  a, a:visited { text-decoration: underline; }
  a[href]::after { content: " (" attr(href) ")"; }
  abbr[title]::after { content: " (" attr(title) ")"; }
  a[href^=3D"javascript:"]::after, a[href^=3D"#"]::after { content: ""; }
  pre, blockquote { border: 1px solid rgb(153, 153, 153); break-inside: avo=
id; }
  thead { display: table-header-group; }
  tr, img { break-inside: avoid; }
  img { max-width: 100% !important; }
  p, h2, h3 { orphans: 3; widows: 3; }
  h2, h3 { break-after: avoid; }
  select { background: rgb(255, 255, 255) !important; }
  .navbar { display: none; }
  .table td, .table th { background-color: rgb(255, 255, 255) !important; }
  .btn > .caret, .dropup > .btn > .caret { border-top-color: rgb(0, 0, 0) !=
important; }
  .label { border: 1px solid rgb(0, 0, 0); }
  .table { border-collapse: collapse !important; }
  .table-bordered th, .table-bordered td { border: 1px solid rgb(221, 221, =
221) !important; }
}

.glyphicon { position: relative; top: 1px; display: inline-block; font-fami=
ly: "Glyphicons Halflings"; font-style: normal; font-weight: normal; line-h=
eight: 1; -webkit-font-smoothing: antialiased; }

.glyphicon-asterisk::before { content: "*"; }

.glyphicon-plus::before { content: "+"; }

.glyphicon-euro::before { content: "=E2=82=AC"; }

.glyphicon-minus::before { content: "=E2=88=92"; }

.glyphicon-cloud::before { content: "=E2=98=81"; }

.glyphicon-envelope::before { content: "=E2=9C=89"; }

.glyphicon-pencil::before { content: "=E2=9C=8F"; }

.glyphicon-glass::before { content: "=EE=80=81"; }

.glyphicon-music::before { content: "=EE=80=82"; }

.glyphicon-search::before { content: "=EE=80=83"; }

.glyphicon-heart::before { content: "=EE=80=85"; }

.glyphicon-star::before { content: "=EE=80=86"; }

.glyphicon-star-empty::before { content: "=EE=80=87"; }

.glyphicon-user::before { content: "=EE=80=88"; }

.glyphicon-film::before { content: "=EE=80=89"; }

.glyphicon-th-large::before { content: "=EE=80=90"; }

.glyphicon-th::before { content: "=EE=80=91"; }

.glyphicon-th-list::before { content: "=EE=80=92"; }

.glyphicon-ok::before { content: "=EE=80=93"; }

.glyphicon-remove::before { content: "=EE=80=94"; }

.glyphicon-zoom-in::before { content: "=EE=80=95"; }

.glyphicon-zoom-out::before { content: "=EE=80=96"; }

.glyphicon-off::before { content: "=EE=80=97"; }

.glyphicon-signal::before { content: "=EE=80=98"; }

.glyphicon-cog::before { content: "=EE=80=99"; }

.glyphicon-trash::before { content: "=EE=80=A0"; }

.glyphicon-home::before { content: "=EE=80=A1"; }

.glyphicon-file::before { content: "=EE=80=A2"; }

.glyphicon-time::before { content: "=EE=80=A3"; }

.glyphicon-road::before { content: "=EE=80=A4"; }

.glyphicon-download-alt::before { content: "=EE=80=A5"; }

.glyphicon-download::before { content: "=EE=80=A6"; }

.glyphicon-upload::before { content: "=EE=80=A7"; }

.glyphicon-inbox::before { content: "=EE=80=A8"; }

.glyphicon-play-circle::before { content: "=EE=80=A9"; }

.glyphicon-repeat::before { content: "=EE=80=B0"; }

.glyphicon-refresh::before { content: "=EE=80=B1"; }

.glyphicon-list-alt::before { content: "=EE=80=B2"; }

.glyphicon-lock::before { content: "=EE=80=B3"; }

.glyphicon-flag::before { content: "=EE=80=B4"; }

.glyphicon-headphones::before { content: "=EE=80=B5"; }

.glyphicon-volume-off::before { content: "=EE=80=B6"; }

.glyphicon-volume-down::before { content: "=EE=80=B7"; }

.glyphicon-volume-up::before { content: "=EE=80=B8"; }

.glyphicon-qrcode::before { content: "=EE=80=B9"; }

.glyphicon-barcode::before { content: "=EE=81=80"; }

.glyphicon-tag::before { content: "=EE=81=81"; }

.glyphicon-tags::before { content: "=EE=81=82"; }

.glyphicon-book::before { content: "=EE=81=83"; }

.glyphicon-bookmark::before { content: "=EE=81=84"; }

.glyphicon-print::before { content: "=EE=81=85"; }

.glyphicon-camera::before { content: "=EE=81=86"; }

.glyphicon-font::before { content: "=EE=81=87"; }

.glyphicon-bold::before { content: "=EE=81=88"; }

.glyphicon-italic::before { content: "=EE=81=89"; }

.glyphicon-text-height::before { content: "=EE=81=90"; }

.glyphicon-text-width::before { content: "=EE=81=91"; }

.glyphicon-align-left::before { content: "=EE=81=92"; }

.glyphicon-align-center::before { content: "=EE=81=93"; }

.glyphicon-align-right::before { content: "=EE=81=94"; }

.glyphicon-align-justify::before { content: "=EE=81=95"; }

.glyphicon-list::before { content: "=EE=81=96"; }

.glyphicon-indent-left::before { content: "=EE=81=97"; }

.glyphicon-indent-right::before { content: "=EE=81=98"; }

.glyphicon-facetime-video::before { content: "=EE=81=99"; }

.glyphicon-picture::before { content: "=EE=81=A0"; }

.glyphicon-map-marker::before { content: "=EE=81=A2"; }

.glyphicon-adjust::before { content: "=EE=81=A3"; }

.glyphicon-tint::before { content: "=EE=81=A4"; }

.glyphicon-edit::before { content: "=EE=81=A5"; }

.glyphicon-share::before { content: "=EE=81=A6"; }

.glyphicon-check::before { content: "=EE=81=A7"; }

.glyphicon-move::before { content: "=EE=81=A8"; }

.glyphicon-step-backward::before { content: "=EE=81=A9"; }

.glyphicon-fast-backward::before { content: "=EE=81=B0"; }

.glyphicon-backward::before { content: "=EE=81=B1"; }

.glyphicon-play::before { content: "=EE=81=B2"; }

.glyphicon-pause::before { content: "=EE=81=B3"; }

.glyphicon-stop::before { content: "=EE=81=B4"; }

.glyphicon-forward::before { content: "=EE=81=B5"; }

.glyphicon-fast-forward::before { content: "=EE=81=B6"; }

.glyphicon-step-forward::before { content: "=EE=81=B7"; }

.glyphicon-eject::before { content: "=EE=81=B8"; }

.glyphicon-chevron-left::before { content: "=EE=81=B9"; }

.glyphicon-chevron-right::before { content: "=EE=82=80"; }

.glyphicon-plus-sign::before { content: "=EE=82=81"; }

.glyphicon-minus-sign::before { content: "=EE=82=82"; }

.glyphicon-remove-sign::before { content: "=EE=82=83"; }

.glyphicon-ok-sign::before { content: "=EE=82=84"; }

.glyphicon-question-sign::before { content: "=EE=82=85"; }

.glyphicon-info-sign::before { content: "=EE=82=86"; }

.glyphicon-screenshot::before { content: "=EE=82=87"; }

.glyphicon-remove-circle::before { content: "=EE=82=88"; }

.glyphicon-ok-circle::before { content: "=EE=82=89"; }

.glyphicon-ban-circle::before { content: "=EE=82=90"; }

.glyphicon-arrow-left::before { content: "=EE=82=91"; }

.glyphicon-arrow-right::before { content: "=EE=82=92"; }

.glyphicon-arrow-up::before { content: "=EE=82=93"; }

.glyphicon-arrow-down::before { content: "=EE=82=94"; }

.glyphicon-share-alt::before { content: "=EE=82=95"; }

.glyphicon-resize-full::before { content: "=EE=82=96"; }

.glyphicon-resize-small::before { content: "=EE=82=97"; }

.glyphicon-exclamation-sign::before { content: "=EE=84=81"; }

.glyphicon-gift::before { content: "=EE=84=82"; }

.glyphicon-leaf::before { content: "=EE=84=83"; }

.glyphicon-fire::before { content: "=EE=84=84"; }

.glyphicon-eye-open::before { content: "=EE=84=85"; }

.glyphicon-eye-close::before { content: "=EE=84=86"; }

.glyphicon-warning-sign::before { content: "=EE=84=87"; }

.glyphicon-plane::before { content: "=EE=84=88"; }

.glyphicon-calendar::before { content: "=EE=84=89"; }

.glyphicon-random::before { content: "=EE=84=90"; }

.glyphicon-comment::before { content: "=EE=84=91"; }

.glyphicon-magnet::before { content: "=EE=84=92"; }

.glyphicon-chevron-up::before { content: "=EE=84=93"; }

.glyphicon-chevron-down::before { content: "=EE=84=94"; }

.glyphicon-retweet::before { content: "=EE=84=95"; }

.glyphicon-shopping-cart::before { content: "=EE=84=96"; }

.glyphicon-folder-close::before { content: "=EE=84=97"; }

.glyphicon-folder-open::before { content: "=EE=84=98"; }

.glyphicon-resize-vertical::before { content: "=EE=84=99"; }

.glyphicon-resize-horizontal::before { content: "=EE=84=A0"; }

.glyphicon-hdd::before { content: "=EE=84=A1"; }

.glyphicon-bullhorn::before { content: "=EE=84=A2"; }

.glyphicon-bell::before { content: "=EE=84=A3"; }

.glyphicon-certificate::before { content: "=EE=84=A4"; }

.glyphicon-thumbs-up::before { content: "=EE=84=A5"; }

.glyphicon-thumbs-down::before { content: "=EE=84=A6"; }

.glyphicon-hand-right::before { content: "=EE=84=A7"; }

.glyphicon-hand-left::before { content: "=EE=84=A8"; }

.glyphicon-hand-up::before { content: "=EE=84=A9"; }

.glyphicon-hand-down::before { content: "=EE=84=B0"; }

.glyphicon-circle-arrow-right::before { content: "=EE=84=B1"; }

.glyphicon-circle-arrow-left::before { content: "=EE=84=B2"; }

.glyphicon-circle-arrow-up::before { content: "=EE=84=B3"; }

.glyphicon-circle-arrow-down::before { content: "=EE=84=B4"; }

.glyphicon-globe::before { content: "=EE=84=B5"; }

.glyphicon-wrench::before { content: "=EE=84=B6"; }

.glyphicon-tasks::before { content: "=EE=84=B7"; }

.glyphicon-filter::before { content: "=EE=84=B8"; }

.glyphicon-briefcase::before { content: "=EE=84=B9"; }

.glyphicon-fullscreen::before { content: "=EE=85=80"; }

.glyphicon-dashboard::before { content: "=EE=85=81"; }

.glyphicon-paperclip::before { content: "=EE=85=82"; }

.glyphicon-heart-empty::before { content: "=EE=85=83"; }

.glyphicon-link::before { content: "=EE=85=84"; }

.glyphicon-phone::before { content: "=EE=85=85"; }

.glyphicon-pushpin::before { content: "=EE=85=86"; }

.glyphicon-usd::before { content: "=EE=85=88"; }

.glyphicon-gbp::before { content: "=EE=85=89"; }

.glyphicon-sort::before { content: "=EE=85=90"; }

.glyphicon-sort-by-alphabet::before { content: "=EE=85=91"; }

.glyphicon-sort-by-alphabet-alt::before { content: "=EE=85=92"; }

.glyphicon-sort-by-order::before { content: "=EE=85=93"; }

.glyphicon-sort-by-order-alt::before { content: "=EE=85=94"; }

.glyphicon-sort-by-attributes::before { content: "=EE=85=95"; }

.glyphicon-sort-by-attributes-alt::before { content: "=EE=85=96"; }

.glyphicon-unchecked::before { content: "=EE=85=97"; }

.glyphicon-expand::before { content: "=EE=85=98"; }

.glyphicon-collapse-down::before { content: "=EE=85=99"; }

.glyphicon-collapse-up::before { content: "=EE=85=A0"; }

.glyphicon-log-in::before { content: "=EE=85=A1"; }

.glyphicon-flash::before { content: "=EE=85=A2"; }

.glyphicon-log-out::before { content: "=EE=85=A3"; }

.glyphicon-new-window::before { content: "=EE=85=A4"; }

.glyphicon-record::before { content: "=EE=85=A5"; }

.glyphicon-save::before { content: "=EE=85=A6"; }

.glyphicon-open::before { content: "=EE=85=A7"; }

.glyphicon-saved::before { content: "=EE=85=A8"; }

.glyphicon-import::before { content: "=EE=85=A9"; }

.glyphicon-export::before { content: "=EE=85=B0"; }

.glyphicon-send::before { content: "=EE=85=B1"; }

.glyphicon-floppy-disk::before { content: "=EE=85=B2"; }

.glyphicon-floppy-saved::before { content: "=EE=85=B3"; }

.glyphicon-floppy-remove::before { content: "=EE=85=B4"; }

.glyphicon-floppy-save::before { content: "=EE=85=B5"; }

.glyphicon-floppy-open::before { content: "=EE=85=B6"; }

.glyphicon-credit-card::before { content: "=EE=85=B7"; }

.glyphicon-transfer::before { content: "=EE=85=B8"; }

.glyphicon-cutlery::before { content: "=EE=85=B9"; }

.glyphicon-header::before { content: "=EE=86=80"; }

.glyphicon-compressed::before { content: "=EE=86=81"; }

.glyphicon-earphone::before { content: "=EE=86=82"; }

.glyphicon-phone-alt::before { content: "=EE=86=83"; }

.glyphicon-tower::before { content: "=EE=86=84"; }

.glyphicon-stats::before { content: "=EE=86=85"; }

.glyphicon-sd-video::before { content: "=EE=86=86"; }

.glyphicon-hd-video::before { content: "=EE=86=87"; }

.glyphicon-subtitles::before { content: "=EE=86=88"; }

.glyphicon-sound-stereo::before { content: "=EE=86=89"; }

.glyphicon-sound-dolby::before { content: "=EE=86=90"; }

.glyphicon-sound-5-1::before { content: "=EE=86=91"; }

.glyphicon-sound-6-1::before { content: "=EE=86=92"; }

.glyphicon-sound-7-1::before { content: "=EE=86=93"; }

.glyphicon-copyright-mark::before { content: "=EE=86=94"; }

.glyphicon-registration-mark::before { content: "=EE=86=95"; }

.glyphicon-cloud-download::before { content: "=EE=86=97"; }

.glyphicon-cloud-upload::before { content: "=EE=86=98"; }

.glyphicon-tree-conifer::before { content: "=EE=86=99"; }

.glyphicon-tree-deciduous::before { content: "=EE=88=80"; }

* { box-sizing: border-box; }

::before, ::after { box-sizing: border-box; }

html { font-size: 10px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }

body { font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; font-si=
ze: 14px; line-height: 1.42857; color: rgb(51, 51, 51); background-color: r=
gb(255, 255, 255); }

input, button, select, textarea { font-family: inherit; font-size: inherit;=
 line-height: inherit; }

a { color: rgb(66, 139, 202); text-decoration: none; }

a:hover, a:focus { color: rgb(42, 100, 150); text-decoration: underline; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

figure { margin: 0px; }

img { vertical-align: middle; }

.img-responsive, .thumbnail > img, .thumbnail a > img, .carousel-inner > .i=
tem > img, .carousel-inner > .item > a > img { display: block; max-width: 1=
00%; height: auto; }

.img-rounded { border-radius: 6px; }

.img-thumbnail { display: inline-block; max-width: 100%; height: auto; padd=
ing: 4px; line-height: 1.42857; background-color: rgb(255, 255, 255); borde=
r: 1px solid rgb(221, 221, 221); border-radius: 4px; transition: all 0.2s e=
ase-in-out 0s; }

.img-circle { border-radius: 50%; }

hr { margin-top: 20px; margin-bottom: 20px; border-width: 1px 0px 0px; bord=
er-right-style: initial; border-bottom-style: initial; border-left-style: i=
nitial; border-right-color: initial; border-bottom-color: initial; border-l=
eft-color: initial; border-image: initial; border-top-style: solid; border-=
top-color: rgb(238, 238, 238); }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; margin: 0px; overflow: visible; clip: auto; }

h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 { font-family: inherit=
; font-weight: 500; line-height: 1.1; color: inherit; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small, .h1 small, .h2 =
small, .h3 small, .h4 small, .h5 small, .h6 small, h1 .small, h2 .small, h3=
 .small, h4 .small, h5 .small, h6 .small, .h1 .small, .h2 .small, .h3 .smal=
l, .h4 .small, .h5 .small, .h6 .small { font-weight: normal; line-height: 1=
; color: rgb(119, 119, 119); }

h1, .h1, h2, .h2, h3, .h3 { margin-top: 20px; margin-bottom: 10px; }

h1 small, .h1 small, h2 small, .h2 small, h3 small, .h3 small, h1 .small, .=
h1 .small, h2 .small, .h2 .small, h3 .small, .h3 .small { font-size: 65%; }

h4, .h4, h5, .h5, h6, .h6 { margin-top: 10px; margin-bottom: 10px; }

h4 small, .h4 small, h5 small, .h5 small, h6 small, .h6 small, h4 .small, .=
h4 .small, h5 .small, .h5 .small, h6 .small, .h6 .small { font-size: 75%; }

h1, .h1 { font-size: 36px; }

h2, .h2 { font-size: 30px; }

h3, .h3 { font-size: 24px; }

h4, .h4 { font-size: 18px; }

h5, .h5 { font-size: 14px; }

h6, .h6 { font-size: 12px; }

p { margin: 0px 0px 10px; }

.lead { margin-bottom: 20px; font-size: 16px; font-weight: 300; line-height=
: 1.4; }

@media (min-width: 768px) {
  .lead { font-size: 21px; }
}

small, .small { font-size: 85%; }

cite { font-style: normal; }

mark, .mark { padding: 0.2em; background-color: rgb(252, 248, 227); }

.text-left { text-align: left; }

.text-right { text-align: right; }

.text-center { text-align: center; }

.text-justify { text-align: justify; }

.text-nowrap { white-space: nowrap; }

.text-lowercase { text-transform: lowercase; }

.text-uppercase { text-transform: uppercase; }

.text-capitalize { text-transform: capitalize; }

.text-muted { color: rgb(119, 119, 119); }

.text-primary { color: rgb(66, 139, 202); }

a.text-primary:hover { color: rgb(48, 113, 169); }

.text-success { color: rgb(60, 118, 61); }

a.text-success:hover { color: rgb(43, 84, 44); }

.text-info { color: rgb(49, 112, 143); }

a.text-info:hover { color: rgb(36, 82, 105); }

.text-warning { color: rgb(138, 109, 59); }

a.text-warning:hover { color: rgb(102, 81, 44); }

.text-danger { color: rgb(169, 68, 66); }

a.text-danger:hover { color: rgb(132, 53, 52); }

.bg-primary { color: rgb(255, 255, 255); background-color: rgb(66, 139, 202=
); }

a.bg-primary:hover { background-color: rgb(48, 113, 169); }

.bg-success { background-color: rgb(223, 240, 216); }

a.bg-success:hover { background-color: rgb(193, 226, 179); }

.bg-info { background-color: rgb(217, 237, 247); }

a.bg-info:hover { background-color: rgb(175, 217, 238); }

.bg-warning { background-color: rgb(252, 248, 227); }

a.bg-warning:hover { background-color: rgb(247, 236, 181); }

.bg-danger { background-color: rgb(242, 222, 222); }

a.bg-danger:hover { background-color: rgb(228, 185, 185); }

.page-header { padding-bottom: 9px; margin: 40px 0px 20px; border-bottom: 1=
px solid rgb(238, 238, 238); }

ul, ol { margin-top: 0px; margin-bottom: 10px; }

ul ul, ol ul, ul ol, ol ol { margin-bottom: 0px; }

.list-unstyled { padding-left: 0px; list-style: none; }

.list-inline { padding-left: 0px; margin-left: -5px; list-style: none; }

.list-inline > li { display: inline-block; padding-right: 5px; padding-left=
: 5px; }

dl { margin-top: 0px; margin-bottom: 20px; }

dt, dd { line-height: 1.42857; }

dt { font-weight: bold; }

dd { margin-left: 0px; }

@media (min-width: 768px) {
  .dl-horizontal dt { float: left; width: 160px; overflow: hidden; clear: l=
eft; text-align: right; text-overflow: ellipsis; white-space: nowrap; }
  .dl-horizontal dd { margin-left: 180px; }
}

abbr[title], abbr[data-original-title] { cursor: help; border-bottom: 1px d=
otted rgb(119, 119, 119); }

.initialism { font-size: 90%; text-transform: uppercase; }

blockquote { padding: 10px 20px; margin: 0px 0px 20px; font-size: 17.5px; b=
order-left: 5px solid rgb(238, 238, 238); }

blockquote p:last-child, blockquote ul:last-child, blockquote ol:last-child=
 { margin-bottom: 0px; }

blockquote footer, blockquote small, blockquote .small { display: block; fo=
nt-size: 80%; line-height: 1.42857; color: rgb(119, 119, 119); }

blockquote footer::before, blockquote small::before, blockquote .small::bef=
ore { content: "=E2=80=94=C2=A0"; }

.blockquote-reverse, blockquote.pull-right { padding-right: 15px; padding-l=
eft: 0px; text-align: right; border-right: 5px solid rgb(238, 238, 238); bo=
rder-left: 0px; }

.blockquote-reverse footer::before, blockquote.pull-right footer::before, .=
blockquote-reverse small::before, blockquote.pull-right small::before, .blo=
ckquote-reverse .small::before, blockquote.pull-right .small::before { cont=
ent: ""; }

.blockquote-reverse footer::after, blockquote.pull-right footer::after, .bl=
ockquote-reverse small::after, blockquote.pull-right small::after, .blockqu=
ote-reverse .small::after, blockquote.pull-right .small::after { content: "=
=C2=A0=E2=80=94"; }

blockquote::before, blockquote::after { content: ""; }

address { margin-bottom: 20px; font-style: normal; line-height: 1.42857; }

code, kbd, pre, samp { font-family: Menlo, Monaco, Consolas, "Courier New",=
 monospace; }

code { padding: 2px 4px; font-size: 90%; color: rgb(199, 37, 78); backgroun=
d-color: rgb(249, 242, 244); border-radius: 4px; }

kbd { padding: 2px 4px; font-size: 90%; color: rgb(255, 255, 255); backgrou=
nd-color: rgb(51, 51, 51); border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.=
25) 0px -1px 0px inset; }

kbd kbd { padding: 0px; font-size: 100%; box-shadow: none; }

pre { display: block; padding: 9.5px; margin: 0px 0px 10px; font-size: 13px=
; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; over=
flow-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px so=
lid rgb(204, 204, 204); border-radius: 4px; }

pre code { padding: 0px; font-size: inherit; color: inherit; white-space: p=
re-wrap; background-color: transparent; border-radius: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

.container { padding-right: 15px; padding-left: 15px; margin-right: auto; m=
argin-left: auto; }

@media (min-width: 768px) {
  .container { width: 750px; }
}

@media (min-width: 992px) {
  .container { width: 970px; }
}

@media (min-width: 1200px) {
  .container { width: 1170px; }
}

.container-fluid { padding-right: 15px; padding-left: 15px; margin-right: a=
uto; margin-left: auto; }

.row { margin-right: -15px; margin-left: -15px; }

.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2=
, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm=
-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-=
xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .co=
l-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .=
col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-x=
s-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-1=
2, .col-lg-12 { position: relative; min-height: 1px; padding-right: 15px; p=
adding-left: 15px; }

.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7=
, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 { float: left; }

.col-xs-12 { width: 100%; }

.col-xs-11 { width: 91.6667%; }

.col-xs-10 { width: 83.3333%; }

.col-xs-9 { width: 75%; }

.col-xs-8 { width: 66.6667%; }

.col-xs-7 { width: 58.3333%; }

.col-xs-6 { width: 50%; }

.col-xs-5 { width: 41.6667%; }

.col-xs-4 { width: 33.3333%; }

.col-xs-3 { width: 25%; }

.col-xs-2 { width: 16.6667%; }

.col-xs-1 { width: 8.33333%; }

.col-xs-pull-12 { right: 100%; }

.col-xs-pull-11 { right: 91.6667%; }

.col-xs-pull-10 { right: 83.3333%; }

.col-xs-pull-9 { right: 75%; }

.col-xs-pull-8 { right: 66.6667%; }

.col-xs-pull-7 { right: 58.3333%; }

.col-xs-pull-6 { right: 50%; }

.col-xs-pull-5 { right: 41.6667%; }

.col-xs-pull-4 { right: 33.3333%; }

.col-xs-pull-3 { right: 25%; }

.col-xs-pull-2 { right: 16.6667%; }

.col-xs-pull-1 { right: 8.33333%; }

.col-xs-pull-0 { right: auto; }

.col-xs-push-12 { left: 100%; }

.col-xs-push-11 { left: 91.6667%; }

.col-xs-push-10 { left: 83.3333%; }

.col-xs-push-9 { left: 75%; }

.col-xs-push-8 { left: 66.6667%; }

.col-xs-push-7 { left: 58.3333%; }

.col-xs-push-6 { left: 50%; }

.col-xs-push-5 { left: 41.6667%; }

.col-xs-push-4 { left: 33.3333%; }

.col-xs-push-3 { left: 25%; }

.col-xs-push-2 { left: 16.6667%; }

.col-xs-push-1 { left: 8.33333%; }

.col-xs-push-0 { left: auto; }

.col-xs-offset-12 { margin-left: 100%; }

.col-xs-offset-11 { margin-left: 91.6667%; }

.col-xs-offset-10 { margin-left: 83.3333%; }

.col-xs-offset-9 { margin-left: 75%; }

.col-xs-offset-8 { margin-left: 66.6667%; }

.col-xs-offset-7 { margin-left: 58.3333%; }

.col-xs-offset-6 { margin-left: 50%; }

.col-xs-offset-5 { margin-left: 41.6667%; }

.col-xs-offset-4 { margin-left: 33.3333%; }

.col-xs-offset-3 { margin-left: 25%; }

.col-xs-offset-2 { margin-left: 16.6667%; }

.col-xs-offset-1 { margin-left: 8.33333%; }

.col-xs-offset-0 { margin-left: 0px; }

@media (min-width: 768px) {
  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm=
-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 { float: left;=
 }
  .col-sm-12 { width: 100%; }
  .col-sm-11 { width: 91.6667%; }
  .col-sm-10 { width: 83.3333%; }
  .col-sm-9 { width: 75%; }
  .col-sm-8 { width: 66.6667%; }
  .col-sm-7 { width: 58.3333%; }
  .col-sm-6 { width: 50%; }
  .col-sm-5 { width: 41.6667%; }
  .col-sm-4 { width: 33.3333%; }
  .col-sm-3 { width: 25%; }
  .col-sm-2 { width: 16.6667%; }
  .col-sm-1 { width: 8.33333%; }
  .col-sm-pull-12 { right: 100%; }
  .col-sm-pull-11 { right: 91.6667%; }
  .col-sm-pull-10 { right: 83.3333%; }
  .col-sm-pull-9 { right: 75%; }
  .col-sm-pull-8 { right: 66.6667%; }
  .col-sm-pull-7 { right: 58.3333%; }
  .col-sm-pull-6 { right: 50%; }
  .col-sm-pull-5 { right: 41.6667%; }
  .col-sm-pull-4 { right: 33.3333%; }
  .col-sm-pull-3 { right: 25%; }
  .col-sm-pull-2 { right: 16.6667%; }
  .col-sm-pull-1 { right: 8.33333%; }
  .col-sm-pull-0 { right: auto; }
  .col-sm-push-12 { left: 100%; }
  .col-sm-push-11 { left: 91.6667%; }
  .col-sm-push-10 { left: 83.3333%; }
  .col-sm-push-9 { left: 75%; }
  .col-sm-push-8 { left: 66.6667%; }
  .col-sm-push-7 { left: 58.3333%; }
  .col-sm-push-6 { left: 50%; }
  .col-sm-push-5 { left: 41.6667%; }
  .col-sm-push-4 { left: 33.3333%; }
  .col-sm-push-3 { left: 25%; }
  .col-sm-push-2 { left: 16.6667%; }
  .col-sm-push-1 { left: 8.33333%; }
  .col-sm-push-0 { left: auto; }
  .col-sm-offset-12 { margin-left: 100%; }
  .col-sm-offset-11 { margin-left: 91.6667%; }
  .col-sm-offset-10 { margin-left: 83.3333%; }
  .col-sm-offset-9 { margin-left: 75%; }
  .col-sm-offset-8 { margin-left: 66.6667%; }
  .col-sm-offset-7 { margin-left: 58.3333%; }
  .col-sm-offset-6 { margin-left: 50%; }
  .col-sm-offset-5 { margin-left: 41.6667%; }
  .col-sm-offset-4 { margin-left: 33.3333%; }
  .col-sm-offset-3 { margin-left: 25%; }
  .col-sm-offset-2 { margin-left: 16.6667%; }
  .col-sm-offset-1 { margin-left: 8.33333%; }
  .col-sm-offset-0 { margin-left: 0px; }
}

@media (min-width: 992px) {
  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md=
-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 { float: left;=
 }
  .col-md-12 { width: 100%; }
  .col-md-11 { width: 91.6667%; }
  .col-md-10 { width: 83.3333%; }
  .col-md-9 { width: 75%; }
  .col-md-8 { width: 66.6667%; }
  .col-md-7 { width: 58.3333%; }
  .col-md-6 { width: 50%; }
  .col-md-5 { width: 41.6667%; }
  .col-md-4 { width: 33.3333%; }
  .col-md-3 { width: 25%; }
  .col-md-2 { width: 16.6667%; }
  .col-md-1 { width: 8.33333%; }
  .col-md-pull-12 { right: 100%; }
  .col-md-pull-11 { right: 91.6667%; }
  .col-md-pull-10 { right: 83.3333%; }
  .col-md-pull-9 { right: 75%; }
  .col-md-pull-8 { right: 66.6667%; }
  .col-md-pull-7 { right: 58.3333%; }
  .col-md-pull-6 { right: 50%; }
  .col-md-pull-5 { right: 41.6667%; }
  .col-md-pull-4 { right: 33.3333%; }
  .col-md-pull-3 { right: 25%; }
  .col-md-pull-2 { right: 16.6667%; }
  .col-md-pull-1 { right: 8.33333%; }
  .col-md-pull-0 { right: auto; }
  .col-md-push-12 { left: 100%; }
  .col-md-push-11 { left: 91.6667%; }
  .col-md-push-10 { left: 83.3333%; }
  .col-md-push-9 { left: 75%; }
  .col-md-push-8 { left: 66.6667%; }
  .col-md-push-7 { left: 58.3333%; }
  .col-md-push-6 { left: 50%; }
  .col-md-push-5 { left: 41.6667%; }
  .col-md-push-4 { left: 33.3333%; }
  .col-md-push-3 { left: 25%; }
  .col-md-push-2 { left: 16.6667%; }
  .col-md-push-1 { left: 8.33333%; }
  .col-md-push-0 { left: auto; }
  .col-md-offset-12 { margin-left: 100%; }
  .col-md-offset-11 { margin-left: 91.6667%; }
  .col-md-offset-10 { margin-left: 83.3333%; }
  .col-md-offset-9 { margin-left: 75%; }
  .col-md-offset-8 { margin-left: 66.6667%; }
  .col-md-offset-7 { margin-left: 58.3333%; }
  .col-md-offset-6 { margin-left: 50%; }
  .col-md-offset-5 { margin-left: 41.6667%; }
  .col-md-offset-4 { margin-left: 33.3333%; }
  .col-md-offset-3 { margin-left: 25%; }
  .col-md-offset-2 { margin-left: 16.6667%; }
  .col-md-offset-1 { margin-left: 8.33333%; }
  .col-md-offset-0 { margin-left: 0px; }
}

@media (min-width: 1200px) {
  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg=
-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 { float: left;=
 }
  .col-lg-12 { width: 100%; }
  .col-lg-11 { width: 91.6667%; }
  .col-lg-10 { width: 83.3333%; }
  .col-lg-9 { width: 75%; }
  .col-lg-8 { width: 66.6667%; }
  .col-lg-7 { width: 58.3333%; }
  .col-lg-6 { width: 50%; }
  .col-lg-5 { width: 41.6667%; }
  .col-lg-4 { width: 33.3333%; }
  .col-lg-3 { width: 25%; }
  .col-lg-2 { width: 16.6667%; }
  .col-lg-1 { width: 8.33333%; }
  .col-lg-pull-12 { right: 100%; }
  .col-lg-pull-11 { right: 91.6667%; }
  .col-lg-pull-10 { right: 83.3333%; }
  .col-lg-pull-9 { right: 75%; }
  .col-lg-pull-8 { right: 66.6667%; }
  .col-lg-pull-7 { right: 58.3333%; }
  .col-lg-pull-6 { right: 50%; }
  .col-lg-pull-5 { right: 41.6667%; }
  .col-lg-pull-4 { right: 33.3333%; }
  .col-lg-pull-3 { right: 25%; }
  .col-lg-pull-2 { right: 16.6667%; }
  .col-lg-pull-1 { right: 8.33333%; }
  .col-lg-pull-0 { right: auto; }
  .col-lg-push-12 { left: 100%; }
  .col-lg-push-11 { left: 91.6667%; }
  .col-lg-push-10 { left: 83.3333%; }
  .col-lg-push-9 { left: 75%; }
  .col-lg-push-8 { left: 66.6667%; }
  .col-lg-push-7 { left: 58.3333%; }
  .col-lg-push-6 { left: 50%; }
  .col-lg-push-5 { left: 41.6667%; }
  .col-lg-push-4 { left: 33.3333%; }
  .col-lg-push-3 { left: 25%; }
  .col-lg-push-2 { left: 16.6667%; }
  .col-lg-push-1 { left: 8.33333%; }
  .col-lg-push-0 { left: auto; }
  .col-lg-offset-12 { margin-left: 100%; }
  .col-lg-offset-11 { margin-left: 91.6667%; }
  .col-lg-offset-10 { margin-left: 83.3333%; }
  .col-lg-offset-9 { margin-left: 75%; }
  .col-lg-offset-8 { margin-left: 66.6667%; }
  .col-lg-offset-7 { margin-left: 58.3333%; }
  .col-lg-offset-6 { margin-left: 50%; }
  .col-lg-offset-5 { margin-left: 41.6667%; }
  .col-lg-offset-4 { margin-left: 33.3333%; }
  .col-lg-offset-3 { margin-left: 25%; }
  .col-lg-offset-2 { margin-left: 16.6667%; }
  .col-lg-offset-1 { margin-left: 8.33333%; }
  .col-lg-offset-0 { margin-left: 0px; }
}

table { background-color: transparent; }

th { text-align: left; }

.table { width: 100%; max-width: 100%; margin-bottom: 20px; }

.table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > t=
h, .table > thead > tr > td, .table > tbody > tr > td, .table > tfoot > tr =
> td { padding: 8px; line-height: 1.42857; vertical-align: top; border-top:=
 1px solid rgb(221, 221, 221); }

.table > thead > tr > th { vertical-align: bottom; border-bottom: 2px solid=
 rgb(221, 221, 221); }

.table > caption + thead > tr:first-child > th, .table > colgroup + thead >=
 tr:first-child > th, .table > thead:first-child > tr:first-child > th, .ta=
ble > caption + thead > tr:first-child > td, .table > colgroup + thead > tr=
:first-child > td, .table > thead:first-child > tr:first-child > td { borde=
r-top: 0px; }

.table > tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table .table { background-color: rgb(255, 255, 255); }

.table-condensed > thead > tr > th, .table-condensed > tbody > tr > th, .ta=
ble-condensed > tfoot > tr > th, .table-condensed > thead > tr > td, .table=
-condensed > tbody > tr > td, .table-condensed > tfoot > tr > td { padding:=
 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); }

.table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .tabl=
e-bordered > tfoot > tr > th, .table-bordered > thead > tr > td, .table-bor=
dered > tbody > tr > td, .table-bordered > tfoot > tr > td { border: 1px so=
lid rgb(221, 221, 221); }

.table-bordered > thead > tr > th, .table-bordered > thead > tr > td { bord=
er-bottom-width: 2px; }

.table-striped > tbody > tr:nth-child(2n+1) > td, .table-striped > tbody > =
tr:nth-child(2n+1) > th { background-color: rgb(249, 249, 249); }

.table-hover > tbody > tr:hover > td, .table-hover > tbody > tr:hover > th =
{ background-color: rgb(245, 245, 245); }

table col[class*=3D"col-"] { position: static; display: table-column; float=
: none; }

table td[class*=3D"col-"], table th[class*=3D"col-"] { position: static; di=
splay: table-cell; float: none; }

.table > thead > tr > td.active, .table > tbody > tr > td.active, .table > =
tfoot > tr > td.active, .table > thead > tr > th.active, .table > tbody > t=
r > th.active, .table > tfoot > tr > th.active, .table > thead > tr.active =
> td, .table > tbody > tr.active > td, .table > tfoot > tr.active > td, .ta=
ble > thead > tr.active > th, .table > tbody > tr.active > th, .table > tfo=
ot > tr.active > th { background-color: rgb(245, 245, 245); }

.table-hover > tbody > tr > td.active:hover, .table-hover > tbody > tr > th=
.active:hover, .table-hover > tbody > tr.active:hover > td, .table-hover > =
tbody > tr:hover > .active, .table-hover > tbody > tr.active:hover > th { b=
ackground-color: rgb(232, 232, 232); }

.table > thead > tr > td.success, .table > tbody > tr > td.success, .table =
> tfoot > tr > td.success, .table > thead > tr > th.success, .table > tbody=
 > tr > th.success, .table > tfoot > tr > th.success, .table > thead > tr.s=
uccess > td, .table > tbody > tr.success > td, .table > tfoot > tr.success =
> td, .table > thead > tr.success > th, .table > tbody > tr.success > th, .=
table > tfoot > tr.success > th { background-color: rgb(223, 240, 216); }

.table-hover > tbody > tr > td.success:hover, .table-hover > tbody > tr > t=
h.success:hover, .table-hover > tbody > tr.success:hover > td, .table-hover=
 > tbody > tr:hover > .success, .table-hover > tbody > tr.success:hover > t=
h { background-color: rgb(208, 233, 198); }

.table > thead > tr > td.info, .table > tbody > tr > td.info, .table > tfoo=
t > tr > td.info, .table > thead > tr > th.info, .table > tbody > tr > th.i=
nfo, .table > tfoot > tr > th.info, .table > thead > tr.info > td, .table >=
 tbody > tr.info > td, .table > tfoot > tr.info > td, .table > thead > tr.i=
nfo > th, .table > tbody > tr.info > th, .table > tfoot > tr.info > th { ba=
ckground-color: rgb(217, 237, 247); }

.table-hover > tbody > tr > td.info:hover, .table-hover > tbody > tr > th.i=
nfo:hover, .table-hover > tbody > tr.info:hover > td, .table-hover > tbody =
> tr:hover > .info, .table-hover > tbody > tr.info:hover > th { background-=
color: rgb(196, 227, 243); }

.table > thead > tr > td.warning, .table > tbody > tr > td.warning, .table =
> tfoot > tr > td.warning, .table > thead > tr > th.warning, .table > tbody=
 > tr > th.warning, .table > tfoot > tr > th.warning, .table > thead > tr.w=
arning > td, .table > tbody > tr.warning > td, .table > tfoot > tr.warning =
> td, .table > thead > tr.warning > th, .table > tbody > tr.warning > th, .=
table > tfoot > tr.warning > th { background-color: rgb(252, 248, 227); }

.table-hover > tbody > tr > td.warning:hover, .table-hover > tbody > tr > t=
h.warning:hover, .table-hover > tbody > tr.warning:hover > td, .table-hover=
 > tbody > tr:hover > .warning, .table-hover > tbody > tr.warning:hover > t=
h { background-color: rgb(250, 242, 204); }

.table > thead > tr > td.danger, .table > tbody > tr > td.danger, .table > =
tfoot > tr > td.danger, .table > thead > tr > th.danger, .table > tbody > t=
r > th.danger, .table > tfoot > tr > th.danger, .table > thead > tr.danger =
> td, .table > tbody > tr.danger > td, .table > tfoot > tr.danger > td, .ta=
ble > thead > tr.danger > th, .table > tbody > tr.danger > th, .table > tfo=
ot > tr.danger > th { background-color: rgb(242, 222, 222); }

.table-hover > tbody > tr > td.danger:hover, .table-hover > tbody > tr > th=
.danger:hover, .table-hover > tbody > tr.danger:hover > td, .table-hover > =
tbody > tr:hover > .danger, .table-hover > tbody > tr.danger:hover > th { b=
ackground-color: rgb(235, 204, 204); }

@media screen and (max-width: 767px) {
  .table-responsive { width: 100%; margin-bottom: 15px; overflow: auto hidd=
en; border: 1px solid rgb(221, 221, 221); }
  .table-responsive > .table { margin-bottom: 0px; }
  .table-responsive > .table > thead > tr > th, .table-responsive > .table =
> tbody > tr > th, .table-responsive > .table > tfoot > tr > th, .table-res=
ponsive > .table > thead > tr > td, .table-responsive > .table > tbody > tr=
 > td, .table-responsive > .table > tfoot > tr > td { white-space: nowrap; =
}
  .table-responsive > .table-bordered { border: 0px; }
  .table-responsive > .table-bordered > thead > tr > th:first-child, .table=
-responsive > .table-bordered > tbody > tr > th:first-child, .table-respons=
ive > .table-bordered > tfoot > tr > th:first-child, .table-responsive > .t=
able-bordered > thead > tr > td:first-child, .table-responsive > .table-bor=
dered > tbody > tr > td:first-child, .table-responsive > .table-bordered > =
tfoot > tr > td:first-child { border-left: 0px; }
  .table-responsive > .table-bordered > thead > tr > th:last-child, .table-=
responsive > .table-bordered > tbody > tr > th:last-child, .table-responsiv=
e > .table-bordered > tfoot > tr > th:last-child, .table-responsive > .tabl=
e-bordered > thead > tr > td:last-child, .table-responsive > .table-bordere=
d > tbody > tr > td:last-child, .table-responsive > .table-bordered > tfoot=
 > tr > td:last-child { border-right: 0px; }
  .table-responsive > .table-bordered > tbody > tr:last-child > th, .table-=
responsive > .table-bordered > tfoot > tr:last-child > th, .table-responsiv=
e > .table-bordered > tbody > tr:last-child > td, .table-responsive > .tabl=
e-bordered > tfoot > tr:last-child > td { border-bottom: 0px; }
}

fieldset { min-width: 0px; padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 20px; fo=
nt-size: 21px; line-height: inherit; color: rgb(51, 51, 51); border-width: =
0px 0px 1px; border-top-style: initial; border-right-style: initial; border=
-left-style: initial; border-top-color: initial; border-right-color: initia=
l; border-left-color: initial; border-image: initial; border-bottom-style: =
solid; border-bottom-color: rgb(229, 229, 229); }

label { display: inline-block; max-width: 100%; margin-bottom: 5px; font-we=
ight: bold; }

input[type=3D"search"] { box-sizing: border-box; }

input[type=3D"radio"], input[type=3D"checkbox"] { margin: 4px 0px 0px; line=
-height: normal; }

input[type=3D"file"] { display: block; }

input[type=3D"range"] { display: block; width: 100%; }

select[multiple], select[size] { height: auto; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: =
-2px; }

output { display: block; padding-top: 7px; font-size: 14px; line-height: 1.=
42857; color: rgb(85, 85, 85); }

.form-control { display: block; width: 100%; height: 34px; padding: 6px 12p=
x; font-size: 14px; line-height: 1.42857; color: rgb(85, 85, 85); backgroun=
d-color: rgb(255, 255, 255); background-image: none; border: 1px solid rgb(=
204, 204, 204); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.075) 0px 1p=
x 1px inset; transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15=
s ease-in-out 0s; }

.form-control:focus { border-color: rgb(102, 175, 233); outline: 0px; box-s=
hadow: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgba(102, 175, 233, 0.6) 0px=
 0px 8px; }

.form-control::-webkit-input-placeholder { color: rgb(119, 119, 119); }

.form-control[disabled], .form-control[readonly], fieldset[disabled] .form-=
control { cursor: not-allowed; background-color: rgb(238, 238, 238); opacit=
y: 1; }

textarea.form-control { height: auto; }

input[type=3D"search"] { appearance: none; }

input[type=3D"date"], input[type=3D"time"], input[type=3D"datetime-local"],=
 input[type=3D"month"] { line-height: 34px; }

input[type=3D"date"].input-sm, input[type=3D"time"].input-sm, input[type=3D=
"datetime-local"].input-sm, input[type=3D"month"].input-sm { line-height: 3=
0px; }

input[type=3D"date"].input-lg, input[type=3D"time"].input-lg, input[type=3D=
"datetime-local"].input-lg, input[type=3D"month"].input-lg { line-height: 4=
6px; }

.form-group { margin-bottom: 15px; }

.radio, .checkbox { position: relative; display: block; min-height: 20px; m=
argin-top: 10px; margin-bottom: 10px; }

.radio label, .checkbox label { padding-left: 20px; margin-bottom: 0px; fon=
t-weight: normal; cursor: pointer; }

.radio input[type=3D"radio"], .radio-inline input[type=3D"radio"], .checkbo=
x input[type=3D"checkbox"], .checkbox-inline input[type=3D"checkbox"] { pos=
ition: absolute; margin-left: -20px; }

.radio + .radio, .checkbox + .checkbox { margin-top: -5px; }

.radio-inline, .checkbox-inline { display: inline-block; padding-left: 20px=
; margin-bottom: 0px; font-weight: normal; vertical-align: middle; cursor: =
pointer; }

.radio-inline + .radio-inline, .checkbox-inline + .checkbox-inline { margin=
-top: 0px; margin-left: 10px; }

input[type=3D"radio"][disabled], input[type=3D"checkbox"][disabled], input[=
type=3D"radio"].disabled, input[type=3D"checkbox"].disabled, fieldset[disab=
led] input[type=3D"radio"], fieldset[disabled] input[type=3D"checkbox"] { c=
ursor: not-allowed; }

.radio-inline.disabled, .checkbox-inline.disabled, fieldset[disabled] .radi=
o-inline, fieldset[disabled] .checkbox-inline { cursor: not-allowed; }

.radio.disabled label, .checkbox.disabled label, fieldset[disabled] .radio =
label, fieldset[disabled] .checkbox label { cursor: not-allowed; }

.form-control-static { padding-top: 7px; padding-bottom: 7px; margin-bottom=
: 0px; }

.form-control-static.input-lg, .form-control-static.input-sm { padding-righ=
t: 0px; padding-left: 0px; }

.input-sm, .form-horizontal .form-group-sm .form-control { height: 30px; pa=
dding: 5px 10px; font-size: 12px; line-height: 1.5; border-radius: 3px; }

select.input-sm { height: 30px; line-height: 30px; }

textarea.input-sm, select[multiple].input-sm { height: auto; }

.input-lg, .form-horizontal .form-group-lg .form-control { height: 46px; pa=
dding: 10px 16px; font-size: 18px; line-height: 1.33; border-radius: 6px; }

select.input-lg { height: 46px; line-height: 46px; }

textarea.input-lg, select[multiple].input-lg { height: auto; }

.has-feedback { position: relative; }

.has-feedback .form-control { padding-right: 42.5px; }

.form-control-feedback { position: absolute; top: 25px; right: 0px; z-index=
: 2; display: block; width: 34px; height: 34px; line-height: 34px; text-ali=
gn: center; }

.input-lg + .form-control-feedback { width: 46px; height: 46px; line-height=
: 46px; }

.input-sm + .form-control-feedback { width: 30px; height: 30px; line-height=
: 30px; }

.has-success .help-block, .has-success .control-label, .has-success .radio,=
 .has-success .checkbox, .has-success .radio-inline, .has-success .checkbox=
-inline { color: rgb(60, 118, 61); }

.has-success .form-control { border-color: rgb(60, 118, 61); box-shadow: rg=
ba(0, 0, 0, 0.075) 0px 1px 1px inset; }

.has-success .form-control:focus { border-color: rgb(43, 84, 44); box-shado=
w: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgb(103, 177, 104) 0px 0px 6px; =
}

.has-success .input-group-addon { color: rgb(60, 118, 61); background-color=
: rgb(223, 240, 216); border-color: rgb(60, 118, 61); }

.has-success .form-control-feedback { color: rgb(60, 118, 61); }

.has-warning .help-block, .has-warning .control-label, .has-warning .radio,=
 .has-warning .checkbox, .has-warning .radio-inline, .has-warning .checkbox=
-inline { color: rgb(138, 109, 59); }

.has-warning .form-control { border-color: rgb(138, 109, 59); box-shadow: r=
gba(0, 0, 0, 0.075) 0px 1px 1px inset; }

.has-warning .form-control:focus { border-color: rgb(102, 81, 44); box-shad=
ow: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgb(192, 161, 107) 0px 0px 6px;=
 }

.has-warning .input-group-addon { color: rgb(138, 109, 59); background-colo=
r: rgb(252, 248, 227); border-color: rgb(138, 109, 59); }

.has-warning .form-control-feedback { color: rgb(138, 109, 59); }

.has-error .help-block, .has-error .control-label, .has-error .radio, .has-=
error .checkbox, .has-error .radio-inline, .has-error .checkbox-inline { co=
lor: rgb(169, 68, 66); }

.has-error .form-control { border-color: rgb(169, 68, 66); box-shadow: rgba=
(0, 0, 0, 0.075) 0px 1px 1px inset; }

.has-error .form-control:focus { border-color: rgb(132, 53, 52); box-shadow=
: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgb(206, 132, 131) 0px 0px 6px; }

.has-error .input-group-addon { color: rgb(169, 68, 66); background-color: =
rgb(242, 222, 222); border-color: rgb(169, 68, 66); }

.has-error .form-control-feedback { color: rgb(169, 68, 66); }

.has-feedback label.sr-only ~ .form-control-feedback { top: 0px; }

.help-block { display: block; margin-top: 5px; margin-bottom: 10px; color: =
rgb(115, 115, 115); }

@media (min-width: 768px) {
  .form-inline .form-group { display: inline-block; margin-bottom: 0px; ver=
tical-align: middle; }
  .form-inline .form-control { display: inline-block; width: auto; vertical=
-align: middle; }
  .form-inline .input-group { display: inline-table; vertical-align: middle=
; }
  .form-inline .input-group .input-group-addon, .form-inline .input-group .=
input-group-btn, .form-inline .input-group .form-control { width: auto; }
  .form-inline .input-group > .form-control { width: 100%; }
  .form-inline .control-label { margin-bottom: 0px; vertical-align: middle;=
 }
  .form-inline .radio, .form-inline .checkbox { display: inline-block; marg=
in-top: 0px; margin-bottom: 0px; vertical-align: middle; }
  .form-inline .radio label, .form-inline .checkbox label { padding-left: 0=
px; }
  .form-inline .radio input[type=3D"radio"], .form-inline .checkbox input[t=
ype=3D"checkbox"] { position: relative; margin-left: 0px; }
  .form-inline .has-feedback .form-control-feedback { top: 0px; }
}

.form-horizontal .radio, .form-horizontal .checkbox, .form-horizontal .radi=
o-inline, .form-horizontal .checkbox-inline { padding-top: 7px; margin-top:=
 0px; margin-bottom: 0px; }

.form-horizontal .radio, .form-horizontal .checkbox { min-height: 27px; }

.form-horizontal .form-group { margin-right: -15px; margin-left: -15px; }

@media (min-width: 768px) {
  .form-horizontal .control-label { padding-top: 7px; margin-bottom: 0px; t=
ext-align: right; }
}

.form-horizontal .has-feedback .form-control-feedback { top: 0px; right: 15=
px; }

@media (min-width: 768px) {
  .form-horizontal .form-group-lg .control-label { padding-top: 14.3px; }
  .form-horizontal .form-group-sm .control-label { padding-top: 6px; }
}

.btn { display: inline-block; padding: 6px 12px; margin-bottom: 0px; font-s=
ize: 14px; font-weight: normal; line-height: 1.42857; text-align: center; w=
hite-space: nowrap; vertical-align: middle; cursor: pointer; user-select: n=
one; background-image: none; border: 1px solid transparent; border-radius: =
4px; }

.btn:focus, .btn:active:focus, .btn.active:focus { outline: -webkit-focus-r=
ing-color auto 5px; outline-offset: -2px; }

.btn:hover, .btn:focus { color: rgb(51, 51, 51); text-decoration: none; }

.btn:active, .btn.active { background-image: none; outline: 0px; box-shadow=
: rgba(0, 0, 0, 0.125) 0px 3px 5px inset; }

.btn.disabled, .btn[disabled], fieldset[disabled] .btn { pointer-events: no=
ne; cursor: not-allowed; box-shadow: none; opacity: 0.65; }

.btn-default { color: rgb(51, 51, 51); background-color: rgb(255, 255, 255)=
; border-color: rgb(204, 204, 204); }

.btn-default:hover, .btn-default:focus, .btn-default:active, .btn-default.a=
ctive, .open > .dropdown-toggle.btn-default { color: rgb(51, 51, 51); backg=
round-color: rgb(230, 230, 230); border-color: rgb(173, 173, 173); }

.btn-default:active, .btn-default.active, .open > .dropdown-toggle.btn-defa=
ult { background-image: none; }

.btn-default.disabled, .btn-default[disabled], fieldset[disabled] .btn-defa=
ult, .btn-default.disabled:hover, .btn-default[disabled]:hover, fieldset[di=
sabled] .btn-default:hover, .btn-default.disabled:focus, .btn-default[disab=
led]:focus, fieldset[disabled] .btn-default:focus, .btn-default.disabled:ac=
tive, .btn-default[disabled]:active, fieldset[disabled] .btn-default:active=
, .btn-default.disabled.active, .btn-default[disabled].active, fieldset[dis=
abled] .btn-default.active { background-color: rgb(255, 255, 255); border-c=
olor: rgb(204, 204, 204); }

.btn-default .badge { color: rgb(255, 255, 255); background-color: rgb(51, =
51, 51); }

.btn-primary { color: rgb(255, 255, 255); background-color: rgb(66, 139, 20=
2); border-color: rgb(53, 126, 189); }

.btn-primary:hover, .btn-primary:focus, .btn-primary:active, .btn-primary.a=
ctive, .open > .dropdown-toggle.btn-primary { color: rgb(255, 255, 255); ba=
ckground-color: rgb(48, 113, 169); border-color: rgb(40, 94, 142); }

.btn-primary:active, .btn-primary.active, .open > .dropdown-toggle.btn-prim=
ary { background-image: none; }

.btn-primary.disabled, .btn-primary[disabled], fieldset[disabled] .btn-prim=
ary, .btn-primary.disabled:hover, .btn-primary[disabled]:hover, fieldset[di=
sabled] .btn-primary:hover, .btn-primary.disabled:focus, .btn-primary[disab=
led]:focus, fieldset[disabled] .btn-primary:focus, .btn-primary.disabled:ac=
tive, .btn-primary[disabled]:active, fieldset[disabled] .btn-primary:active=
, .btn-primary.disabled.active, .btn-primary[disabled].active, fieldset[dis=
abled] .btn-primary.active { background-color: rgb(66, 139, 202); border-co=
lor: rgb(53, 126, 189); }

.btn-primary .badge { color: rgb(66, 139, 202); background-color: rgb(255, =
255, 255); }

.btn-success { color: rgb(255, 255, 255); background-color: rgb(92, 184, 92=
); border-color: rgb(76, 174, 76); }

.btn-success:hover, .btn-success:focus, .btn-success:active, .btn-success.a=
ctive, .open > .dropdown-toggle.btn-success { color: rgb(255, 255, 255); ba=
ckground-color: rgb(68, 157, 68); border-color: rgb(57, 132, 57); }

.btn-success:active, .btn-success.active, .open > .dropdown-toggle.btn-succ=
ess { background-image: none; }

.btn-success.disabled, .btn-success[disabled], fieldset[disabled] .btn-succ=
ess, .btn-success.disabled:hover, .btn-success[disabled]:hover, fieldset[di=
sabled] .btn-success:hover, .btn-success.disabled:focus, .btn-success[disab=
led]:focus, fieldset[disabled] .btn-success:focus, .btn-success.disabled:ac=
tive, .btn-success[disabled]:active, fieldset[disabled] .btn-success:active=
, .btn-success.disabled.active, .btn-success[disabled].active, fieldset[dis=
abled] .btn-success.active { background-color: rgb(92, 184, 92); border-col=
or: rgb(76, 174, 76); }

.btn-success .badge { color: rgb(92, 184, 92); background-color: rgb(255, 2=
55, 255); }

.btn-info { color: rgb(255, 255, 255); background-color: rgb(91, 192, 222);=
 border-color: rgb(70, 184, 218); }

.btn-info:hover, .btn-info:focus, .btn-info:active, .btn-info.active, .open=
 > .dropdown-toggle.btn-info { color: rgb(255, 255, 255); background-color:=
 rgb(49, 176, 213); border-color: rgb(38, 154, 188); }

.btn-info:active, .btn-info.active, .open > .dropdown-toggle.btn-info { bac=
kground-image: none; }

.btn-info.disabled, .btn-info[disabled], fieldset[disabled] .btn-info, .btn=
-info.disabled:hover, .btn-info[disabled]:hover, fieldset[disabled] .btn-in=
fo:hover, .btn-info.disabled:focus, .btn-info[disabled]:focus, fieldset[dis=
abled] .btn-info:focus, .btn-info.disabled:active, .btn-info[disabled]:acti=
ve, fieldset[disabled] .btn-info:active, .btn-info.disabled.active, .btn-in=
fo[disabled].active, fieldset[disabled] .btn-info.active { background-color=
: rgb(91, 192, 222); border-color: rgb(70, 184, 218); }

.btn-info .badge { color: rgb(91, 192, 222); background-color: rgb(255, 255=
, 255); }

.btn-warning { color: rgb(255, 255, 255); background-color: rgb(240, 173, 7=
8); border-color: rgb(238, 162, 54); }

.btn-warning:hover, .btn-warning:focus, .btn-warning:active, .btn-warning.a=
ctive, .open > .dropdown-toggle.btn-warning { color: rgb(255, 255, 255); ba=
ckground-color: rgb(236, 151, 31); border-color: rgb(213, 133, 18); }

.btn-warning:active, .btn-warning.active, .open > .dropdown-toggle.btn-warn=
ing { background-image: none; }

.btn-warning.disabled, .btn-warning[disabled], fieldset[disabled] .btn-warn=
ing, .btn-warning.disabled:hover, .btn-warning[disabled]:hover, fieldset[di=
sabled] .btn-warning:hover, .btn-warning.disabled:focus, .btn-warning[disab=
led]:focus, fieldset[disabled] .btn-warning:focus, .btn-warning.disabled:ac=
tive, .btn-warning[disabled]:active, fieldset[disabled] .btn-warning:active=
, .btn-warning.disabled.active, .btn-warning[disabled].active, fieldset[dis=
abled] .btn-warning.active { background-color: rgb(240, 173, 78); border-co=
lor: rgb(238, 162, 54); }

.btn-warning .badge { color: rgb(240, 173, 78); background-color: rgb(255, =
255, 255); }

.btn-danger { color: rgb(255, 255, 255); background-color: rgb(217, 83, 79)=
; border-color: rgb(212, 63, 58); }

.btn-danger:hover, .btn-danger:focus, .btn-danger:active, .btn-danger.activ=
e, .open > .dropdown-toggle.btn-danger { color: rgb(255, 255, 255); backgro=
und-color: rgb(201, 48, 44); border-color: rgb(172, 41, 37); }

.btn-danger:active, .btn-danger.active, .open > .dropdown-toggle.btn-danger=
 { background-image: none; }

.btn-danger.disabled, .btn-danger[disabled], fieldset[disabled] .btn-danger=
, .btn-danger.disabled:hover, .btn-danger[disabled]:hover, fieldset[disable=
d] .btn-danger:hover, .btn-danger.disabled:focus, .btn-danger[disabled]:foc=
us, fieldset[disabled] .btn-danger:focus, .btn-danger.disabled:active, .btn=
-danger[disabled]:active, fieldset[disabled] .btn-danger:active, .btn-dange=
r.disabled.active, .btn-danger[disabled].active, fieldset[disabled] .btn-da=
nger.active { background-color: rgb(217, 83, 79); border-color: rgb(212, 63=
, 58); }

.btn-danger .badge { color: rgb(217, 83, 79); background-color: rgb(255, 25=
5, 255); }

.btn-link { font-weight: normal; color: rgb(66, 139, 202); cursor: pointer;=
 border-radius: 0px; }

.btn-link, .btn-link:active, .btn-link[disabled], fieldset[disabled] .btn-l=
ink { background-color: transparent; box-shadow: none; }

.btn-link, .btn-link:hover, .btn-link:focus, .btn-link:active { border-colo=
r: transparent; }

.btn-link:hover, .btn-link:focus { color: rgb(42, 100, 150); text-decoratio=
n: underline; background-color: transparent; }

.btn-link[disabled]:hover, fieldset[disabled] .btn-link:hover, .btn-link[di=
sabled]:focus, fieldset[disabled] .btn-link:focus { color: rgb(119, 119, 11=
9); text-decoration: none; }

.btn-lg, .btn-group-lg > .btn { padding: 10px 16px; font-size: 18px; line-h=
eight: 1.33; border-radius: 6px; }

.btn-sm, .btn-group-sm > .btn { padding: 5px 10px; font-size: 12px; line-he=
ight: 1.5; border-radius: 3px; }

.btn-xs, .btn-group-xs > .btn { padding: 1px 5px; font-size: 12px; line-hei=
ght: 1.5; border-radius: 3px; }

.btn-block { display: block; width: 100%; }

.btn-block + .btn-block { margin-top: 5px; }

input[type=3D"submit"].btn-block, input[type=3D"reset"].btn-block, input[ty=
pe=3D"button"].btn-block { width: 100%; }

.fade { opacity: 0; transition: opacity 0.15s linear 0s; }

.fade.in { opacity: 1; }

.collapse { display: none; }

.collapse.in { display: block; }

tr.collapse.in { display: table-row; }

tbody.collapse.in { display: table-row-group; }

.collapsing { position: relative; height: 0px; overflow: hidden; transition=
: height 0.35s ease 0s; }

.caret { display: inline-block; width: 0px; height: 0px; margin-left: 2px; =
vertical-align: middle; border-top: 4px solid; border-right: 4px solid tran=
sparent; border-left: 4px solid transparent; }

.dropdown { position: relative; }

.dropdown-toggle:focus { outline: 0px; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; d=
isplay: none; float: left; min-width: 160px; padding: 5px 0px; margin: 2px =
0px 0px; font-size: 14px; text-align: left; list-style: none; background-co=
lor: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rg=
ba(0, 0, 0, 0.15); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.176) 0px=
 6px 12px; }

.dropdown-menu.pull-right { right: 0px; left: auto; }

.dropdown-menu .divider { height: 1px; margin: 9px 0px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); }

.dropdown-menu > li > a { display: block; padding: 3px 20px; clear: both; f=
ont-weight: normal; line-height: 1.42857; color: rgb(51, 51, 51); white-spa=
ce: nowrap; }

.dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus { color: rgb(3=
8, 38, 38); text-decoration: none; background-color: rgb(245, 245, 245); }

.dropdown-menu > .active > a, .dropdown-menu > .active > a:hover, .dropdown=
-menu > .active > a:focus { color: rgb(255, 255, 255); text-decoration: non=
e; background-color: rgb(66, 139, 202); outline: 0px; }

.dropdown-menu > .disabled > a, .dropdown-menu > .disabled > a:hover, .drop=
down-menu > .disabled > a:focus { color: rgb(119, 119, 119); }

.dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus =
{ text-decoration: none; cursor: not-allowed; background-color: transparent=
; background-image: none; }

.open > .dropdown-menu { display: block; }

.open > a { outline: 0px; }

.dropdown-menu-right { right: 0px; left: auto; }

.dropdown-menu-left { right: auto; left: 0px; }

.dropdown-header { display: block; padding: 3px 20px; font-size: 12px; line=
-height: 1.42857; color: rgb(119, 119, 119); white-space: nowrap; }

.dropdown-backdrop { position: fixed; inset: 0px; z-index: 990; }

.pull-right > .dropdown-menu { right: 0px; left: auto; }

.dropup .caret, .navbar-fixed-bottom .dropdown .caret { content: ""; border=
-top: 0px; border-bottom: 4px solid; }

.dropup .dropdown-menu, .navbar-fixed-bottom .dropdown .dropdown-menu { top=
: auto; bottom: 100%; margin-bottom: 1px; }

@media (min-width: 1000px) {
  .navbar-right .dropdown-menu { right: 0px; left: auto; }
  .navbar-right .dropdown-menu-left { right: auto; left: 0px; }
}

.btn-group, .btn-group-vertical { position: relative; display: inline-block=
; vertical-align: middle; }

.btn-group > .btn, .btn-group-vertical > .btn { position: relative; float: =
left; }

.btn-group > .btn:hover, .btn-group-vertical > .btn:hover, .btn-group > .bt=
n:focus, .btn-group-vertical > .btn:focus, .btn-group > .btn:active, .btn-g=
roup-vertical > .btn:active, .btn-group > .btn.active, .btn-group-vertical =
> .btn.active { z-index: 2; }

.btn-group > .btn:focus, .btn-group-vertical > .btn:focus { outline: 0px; }

.btn-group .btn + .btn, .btn-group .btn + .btn-group, .btn-group .btn-group=
 + .btn, .btn-group .btn-group + .btn-group { margin-left: -1px; }

.btn-toolbar { margin-left: -5px; }

.btn-toolbar .btn-group, .btn-toolbar .input-group { float: left; }

.btn-toolbar > .btn, .btn-toolbar > .btn-group, .btn-toolbar > .input-group=
 { margin-left: 5px; }

.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) =
{ border-radius: 0px; }

.btn-group > .btn:first-child { margin-left: 0px; }

.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) { bord=
er-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.btn-group > .btn:last-child:not(:first-child), .btn-group > .dropdown-togg=
le:not(:first-child) { border-top-left-radius: 0px; border-bottom-left-radi=
us: 0px; }

.btn-group > .btn-group { float: left; }

.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn { border-=
radius: 0px; }

.btn-group > .btn-group:first-child > .btn:last-child, .btn-group > .btn-gr=
oup:first-child > .dropdown-toggle { border-top-right-radius: 0px; border-b=
ottom-right-radius: 0px; }

.btn-group > .btn-group:last-child > .btn:first-child { border-top-left-rad=
ius: 0px; border-bottom-left-radius: 0px; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group > .btn + .dropdown-toggle { padding-right: 8px; padding-left: 8p=
x; }

.btn-group > .btn-lg + .dropdown-toggle { padding-right: 12px; padding-left=
: 12px; }

.btn-group.open .dropdown-toggle { box-shadow: rgba(0, 0, 0, 0.125) 0px 3px=
 5px inset; }

.btn-group.open .dropdown-toggle.btn-link { box-shadow: none; }

.btn .caret { margin-left: 0px; }

.btn-lg .caret { border-width: 5px 5px 0px; }

.dropup .btn-lg .caret { border-width: 0px 5px 5px; }

.btn-group-vertical > .btn, .btn-group-vertical > .btn-group, .btn-group-ve=
rtical > .btn-group > .btn { display: block; float: none; width: 100%; max-=
width: 100%; }

.btn-group-vertical > .btn-group > .btn { float: none; }

.btn-group-vertical > .btn + .btn, .btn-group-vertical > .btn + .btn-group,=
 .btn-group-vertical > .btn-group + .btn, .btn-group-vertical > .btn-group =
+ .btn-group { margin-top: -1px; margin-left: 0px; }

.btn-group-vertical > .btn:not(:first-child):not(:last-child) { border-radi=
us: 0px; }

.btn-group-vertical > .btn:first-child:not(:last-child) { border-top-right-=
radius: 4px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0p=
x; }

.btn-group-vertical > .btn:last-child:not(:first-child) { border-top-left-r=
adius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 4px; }

.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn =
{ border-radius: 0px; }

.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-c=
hild, .btn-group-vertical > .btn-group:first-child:not(:last-child) > .drop=
down-toggle { border-bottom-right-radius: 0px; border-bottom-left-radius: 0=
px; }

.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-=
child { border-top-left-radius: 0px; border-top-right-radius: 0px; }

.btn-group-justified { display: table; width: 100%; table-layout: fixed; bo=
rder-collapse: separate; }

.btn-group-justified > .btn, .btn-group-justified > .btn-group { display: t=
able-cell; float: none; width: 1%; }

.btn-group-justified > .btn-group .btn { width: 100%; }

.btn-group-justified > .btn-group .dropdown-menu { left: auto; }

[data-toggle=3D"buttons"] > .btn > input[type=3D"radio"], [data-toggle=3D"b=
uttons"] > .btn > input[type=3D"checkbox"] { position: absolute; z-index: -=
1; opacity: 0; }

.input-group { position: relative; display: table; border-collapse: separat=
e; }

.input-group[class*=3D"col-"] { float: none; padding-right: 0px; padding-le=
ft: 0px; }

.input-group .form-control { position: relative; z-index: 2; float: left; w=
idth: 100%; margin-bottom: 0px; }

.input-group-lg > .form-control, .input-group-lg > .input-group-addon, .inp=
ut-group-lg > .input-group-btn > .btn { height: 46px; padding: 10px 16px; f=
ont-size: 18px; line-height: 1.33; border-radius: 6px; }

select.input-group-lg > .form-control, select.input-group-lg > .input-group=
-addon, select.input-group-lg > .input-group-btn > .btn { height: 46px; lin=
e-height: 46px; }

textarea.input-group-lg > .form-control, textarea.input-group-lg > .input-g=
roup-addon, textarea.input-group-lg > .input-group-btn > .btn, select[multi=
ple].input-group-lg > .form-control, select[multiple].input-group-lg > .inp=
ut-group-addon, select[multiple].input-group-lg > .input-group-btn > .btn {=
 height: auto; }

.input-group-sm > .form-control, .input-group-sm > .input-group-addon, .inp=
ut-group-sm > .input-group-btn > .btn { height: 30px; padding: 5px 10px; fo=
nt-size: 12px; line-height: 1.5; border-radius: 3px; }

select.input-group-sm > .form-control, select.input-group-sm > .input-group=
-addon, select.input-group-sm > .input-group-btn > .btn { height: 30px; lin=
e-height: 30px; }

textarea.input-group-sm > .form-control, textarea.input-group-sm > .input-g=
roup-addon, textarea.input-group-sm > .input-group-btn > .btn, select[multi=
ple].input-group-sm > .form-control, select[multiple].input-group-sm > .inp=
ut-group-addon, select[multiple].input-group-sm > .input-group-btn > .btn {=
 height: auto; }

.input-group-addon, .input-group-btn, .input-group .form-control { display:=
 table-cell; }

.input-group-addon:not(:first-child):not(:last-child), .input-group-btn:not=
(:first-child):not(:last-child), .input-group .form-control:not(:first-chil=
d):not(:last-child) { border-radius: 0px; }

.input-group-addon, .input-group-btn { width: 1%; white-space: nowrap; vert=
ical-align: middle; }

.input-group-addon { padding: 6px 12px; font-size: 14px; font-weight: norma=
l; line-height: 1; color: rgb(85, 85, 85); text-align: center; background-c=
olor: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); border-radi=
us: 4px; }

.input-group-addon.input-sm { padding: 5px 10px; font-size: 12px; border-ra=
dius: 3px; }

.input-group-addon.input-lg { padding: 10px 16px; font-size: 18px; border-r=
adius: 6px; }

.input-group-addon input[type=3D"radio"], .input-group-addon input[type=3D"=
checkbox"] { margin-top: 0px; }

.input-group .form-control:first-child, .input-group-addon:first-child, .in=
put-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group=
 > .btn, .input-group-btn:first-child > .dropdown-toggle, .input-group-btn:=
last-child > .btn:not(:last-child):not(.dropdown-toggle), .input-group-btn:=
last-child > .btn-group:not(:last-child) > .btn { border-top-right-radius: =
0px; border-bottom-right-radius: 0px; }

.input-group-addon:first-child { border-right: 0px; }

.input-group .form-control:last-child, .input-group-addon:last-child, .inpu=
t-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group > .=
btn, .input-group-btn:last-child > .dropdown-toggle, .input-group-btn:first=
-child > .btn:not(:first-child), .input-group-btn:first-child > .btn-group:=
not(:first-child) > .btn { border-top-left-radius: 0px; border-bottom-left-=
radius: 0px; }

.input-group-addon:last-child { border-left: 0px; }

.input-group-btn { position: relative; font-size: 0px; white-space: nowrap;=
 }

.input-group-btn > .btn { position: relative; }

.input-group-btn > .btn + .btn { margin-left: -1px; }

.input-group-btn > .btn:hover, .input-group-btn > .btn:focus, .input-group-=
btn > .btn:active { z-index: 2; }

.input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-gr=
oup { margin-right: -1px; }

.input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-grou=
p { margin-left: -1px; }

.nav { padding-left: 0px; margin-bottom: 0px; list-style: none; }

.nav > li { position: relative; display: block; }

.nav > li > a { position: relative; display: block; padding: 10px 15px; }

.nav > li > a:hover, .nav > li > a:focus { text-decoration: none; backgroun=
d-color: rgb(238, 238, 238); }

.nav > li.disabled > a { color: rgb(119, 119, 119); }

.nav > li.disabled > a:hover, .nav > li.disabled > a:focus { color: rgb(119=
, 119, 119); text-decoration: none; cursor: not-allowed; background-color: =
transparent; }

.nav .open > a, .nav .open > a:hover, .nav .open > a:focus { background-col=
or: rgb(238, 238, 238); border-color: rgb(66, 139, 202); }

.nav .nav-divider { height: 1px; margin: 9px 0px; overflow: hidden; backgro=
und-color: rgb(229, 229, 229); }

.nav > li > a > img { max-width: none; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { float: left; margin-bottom: -1px; }

.nav-tabs > li > a { margin-right: 2px; line-height: 1.42857; border: 1px s=
olid transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > li.active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.=
active > a:focus { color: rgb(85, 85, 85); cursor: default; background-colo=
r: rgb(255, 255, 255); border-width: 1px; border-style: solid; border-color=
: rgb(221, 221, 221) rgb(221, 221, 221) transparent; border-image: initial;=
 }

.nav-tabs.nav-justified { width: 100%; border-bottom: 0px; }

.nav-tabs.nav-justified > li { float: none; }

.nav-tabs.nav-justified > li > a { margin-bottom: 5px; text-align: center; =
}

.nav-tabs.nav-justified > .dropdown .dropdown-menu { top: auto; left: auto;=
 }

@media (min-width: 768px) {
  .nav-tabs.nav-justified > li { display: table-cell; width: 1%; }
  .nav-tabs.nav-justified > li > a { margin-bottom: 0px; }
}

.nav-tabs.nav-justified > li > a { margin-right: 0px; border-radius: 4px; }

.nav-tabs.nav-justified > .active > a, .nav-tabs.nav-justified > .active > =
a:hover, .nav-tabs.nav-justified > .active > a:focus { border: 1px solid rg=
b(221, 221, 221); }

@media (min-width: 768px) {
  .nav-tabs.nav-justified > li > a { border-bottom: 1px solid rgb(221, 221,=
 221); border-radius: 4px 4px 0px 0px; }
  .nav-tabs.nav-justified > .active > a, .nav-tabs.nav-justified > .active =
> a:hover, .nav-tabs.nav-justified > .active > a:focus { border-bottom-colo=
r: rgb(255, 255, 255); }
}

.nav-pills > li { float: left; }

.nav-pills > li > a { border-radius: 4px; }

.nav-pills > li + li { margin-left: 2px; }

.nav-pills > li.active > a, .nav-pills > li.active > a:hover, .nav-pills > =
li.active > a:focus { color: rgb(255, 255, 255); background-color: rgb(66, =
139, 202); }

.nav-stacked > li { float: none; }

.nav-stacked > li + li { margin-top: 2px; margin-left: 0px; }

.nav-justified { width: 100%; }

.nav-justified > li { float: none; }

.nav-justified > li > a { margin-bottom: 5px; text-align: center; }

.nav-justified > .dropdown .dropdown-menu { top: auto; left: auto; }

@media (min-width: 768px) {
  .nav-justified > li { display: table-cell; width: 1%; }
  .nav-justified > li > a { margin-bottom: 0px; }
}

.nav-tabs-justified { border-bottom: 0px; }

.nav-tabs-justified > li > a { margin-right: 0px; border-radius: 4px; }

.nav-tabs-justified > .active > a, .nav-tabs-justified > .active > a:hover,=
 .nav-tabs-justified > .active > a:focus { border: 1px solid rgb(221, 221, =
221); }

@media (min-width: 768px) {
  .nav-tabs-justified > li > a { border-bottom: 1px solid rgb(221, 221, 221=
); border-radius: 4px 4px 0px 0px; }
  .nav-tabs-justified > .active > a, .nav-tabs-justified > .active > a:hove=
r, .nav-tabs-justified > .active > a:focus { border-bottom-color: rgb(255, =
255, 255); }
}

.tab-content > .tab-pane { display: none; }

.tab-content > .active { display: block; }

.nav-tabs .dropdown-menu { margin-top: -1px; border-top-left-radius: 0px; b=
order-top-right-radius: 0px; }

.navbar { position: relative; min-height: 50px; margin-bottom: 20px; border=
: 1px solid transparent; }

@media (min-width: 1000px) {
  .navbar { border-radius: 4px; }
  .navbar-header { float: left; }
}

.navbar-collapse { padding-right: 15px; padding-left: 15px; overflow-x: vis=
ible; border-top: 1px solid transparent; box-shadow: rgba(255, 255, 255, 0.=
1) 0px 1px 0px inset; }

.navbar-collapse.in { overflow-y: auto; }

@media (min-width: 1000px) {
  .navbar-collapse { width: auto; border-top: 0px; box-shadow: none; }
  .navbar-collapse.collapse { padding-bottom: 0px; display: block !importan=
t; height: auto !important; overflow: visible !important; }
  .navbar-collapse.in { overflow-y: visible; }
  .navbar-fixed-top .navbar-collapse, .navbar-static-top .navbar-collapse, =
.navbar-fixed-bottom .navbar-collapse { padding-right: 0px; padding-left: 0=
px; }
}

.navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse {=
 max-height: 340px; }

@media (max-width: 480px) and (orientation: landscape) {
  .navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse=
 { max-height: 200px; }
}

.container > .navbar-header, .container-fluid > .navbar-header, .container =
> .navbar-collapse, .container-fluid > .navbar-collapse { margin-right: -15=
px; margin-left: -15px; }

@media (min-width: 1000px) {
  .container > .navbar-header, .container-fluid > .navbar-header, .containe=
r > .navbar-collapse, .container-fluid > .navbar-collapse { margin-right: 0=
px; margin-left: 0px; }
}

.navbar-static-top { z-index: 1000; border-width: 0px 0px 1px; }

@media (min-width: 1000px) {
  .navbar-static-top { border-radius: 0px; }
}

.navbar-fixed-top, .navbar-fixed-bottom { position: fixed; right: 0px; left=
: 0px; z-index: 1030; transform: translate3d(0px, 0px, 0px); }

@media (min-width: 1000px) {
  .navbar-fixed-top, .navbar-fixed-bottom { border-radius: 0px; }
}

.navbar-fixed-top { top: 0px; border-width: 0px 0px 1px; }

.navbar-fixed-bottom { bottom: 0px; margin-bottom: 0px; border-width: 1px 0=
px 0px; }

.navbar-brand { float: left; height: 50px; padding: 15px; font-size: 18px; =
line-height: 20px; }

.navbar-brand:hover, .navbar-brand:focus { text-decoration: none; }

@media (min-width: 1000px) {
  .navbar > .container .navbar-brand, .navbar > .container-fluid .navbar-br=
and { margin-left: -15px; }
}

.navbar-toggle { position: relative; float: right; padding: 9px 10px; margi=
n-top: 8px; margin-right: 15px; margin-bottom: 8px; background-color: trans=
parent; background-image: none; border: 1px solid transparent; border-radiu=
s: 4px; }

.navbar-toggle:focus { outline: 0px; }

.navbar-toggle .icon-bar { display: block; width: 22px; height: 2px; border=
-radius: 1px; }

.navbar-toggle .icon-bar + .icon-bar { margin-top: 4px; }

@media (min-width: 1000px) {
  .navbar-toggle { display: none; }
}

.navbar-nav { margin: 7.5px -15px; }

.navbar-nav > li > a { padding-top: 10px; padding-bottom: 10px; line-height=
: 20px; }

@media (max-width: 999px) {
  .navbar-nav .open .dropdown-menu { position: static; float: none; width: =
auto; margin-top: 0px; background-color: transparent; border: 0px; box-shad=
ow: none; }
  .navbar-nav .open .dropdown-menu > li > a, .navbar-nav .open .dropdown-me=
nu .dropdown-header { padding: 5px 15px 5px 25px; }
  .navbar-nav .open .dropdown-menu > li > a { line-height: 20px; }
  .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-nav .open .dropd=
own-menu > li > a:focus { background-image: none; }
}

@media (min-width: 1000px) {
  .navbar-nav { float: left; margin: 0px; }
  .navbar-nav > li { float: left; }
  .navbar-nav > li > a { padding-top: 15px; padding-bottom: 15px; }
  .navbar-nav.navbar-right:last-child { margin-right: -15px; }
  .navbar-left { float: left !important; }
  .navbar-right { float: right !important; }
}

.navbar-form { padding: 10px 15px; margin: 8px -15px; border-top: 1px solid=
 transparent; border-bottom: 1px solid transparent; box-shadow: rgba(255, 2=
55, 255, 0.1) 0px 1px 0px inset, rgba(255, 255, 255, 0.1) 0px 1px 0px; }

@media (min-width: 1000px) {
  .navbar-form .form-group { display: inline-block; margin-bottom: 0px; ver=
tical-align: middle; }
  .navbar-form .form-control { display: inline-block; width: auto; vertical=
-align: middle; }
  .navbar-form .input-group { display: inline-table; vertical-align: middle=
; }
  .navbar-form .input-group .input-group-addon, .navbar-form .input-group .=
input-group-btn, .navbar-form .input-group .form-control { width: auto; }
  .navbar-form .input-group > .form-control { width: 100%; }
  .navbar-form .control-label { margin-bottom: 0px; vertical-align: middle;=
 }
  .navbar-form .radio, .navbar-form .checkbox { display: inline-block; marg=
in-top: 0px; margin-bottom: 0px; vertical-align: middle; }
  .navbar-form .radio label, .navbar-form .checkbox label { padding-left: 0=
px; }
  .navbar-form .radio input[type=3D"radio"], .navbar-form .checkbox input[t=
ype=3D"checkbox"] { position: relative; margin-left: 0px; }
  .navbar-form .has-feedback .form-control-feedback { top: 0px; }
}

@media (max-width: 999px) {
  .navbar-form .form-group { margin-bottom: 5px; }
}

@media (min-width: 1000px) {
  .navbar-form { width: auto; padding-top: 0px; padding-bottom: 0px; margin=
-right: 0px; margin-left: 0px; border: 0px; box-shadow: none; }
  .navbar-form.navbar-right:last-child { margin-right: -15px; }
}

.navbar-nav > li > .dropdown-menu { margin-top: 0px; border-top-left-radius=
: 0px; border-top-right-radius: 0px; }

.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu { border-bottom-righ=
t-radius: 0px; border-bottom-left-radius: 0px; }

.navbar-btn { margin-top: 8px; margin-bottom: 8px; }

.navbar-btn.btn-sm { margin-top: 10px; margin-bottom: 10px; }

.navbar-btn.btn-xs { margin-top: 14px; margin-bottom: 14px; }

.navbar-text { margin-top: 15px; margin-bottom: 15px; }

@media (min-width: 1000px) {
  .navbar-text { float: left; margin-right: 15px; margin-left: 15px; }
  .navbar-text.navbar-right:last-child { margin-right: 0px; }
}

.navbar-default { background-color: rgb(248, 248, 248); border-color: rgb(2=
31, 231, 231); }

.navbar-default .navbar-brand { color: rgb(119, 119, 119); }

.navbar-default .navbar-brand:hover, .navbar-default .navbar-brand:focus { =
color: rgb(94, 94, 94); background-color: transparent; }

.navbar-default .navbar-text { color: rgb(119, 119, 119); }

.navbar-default .navbar-nav > li > a { color: rgb(119, 119, 119); }

.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > l=
i > a:focus { color: rgb(51, 51, 51); background-color: transparent; }

.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .a=
ctive > a:hover, .navbar-default .navbar-nav > .active > a:focus { color: r=
gb(85, 85, 85); background-color: rgb(231, 231, 231); }

.navbar-default .navbar-nav > .disabled > a, .navbar-default .navbar-nav > =
.disabled > a:hover, .navbar-default .navbar-nav > .disabled > a:focus { co=
lor: rgb(204, 204, 204); background-color: transparent; }

.navbar-default .navbar-toggle { border-color: rgb(221, 221, 221); }

.navbar-default .navbar-toggle:hover, .navbar-default .navbar-toggle:focus =
{ background-color: rgb(221, 221, 221); }

.navbar-default .navbar-toggle .icon-bar { background-color: rgb(136, 136, =
136); }

.navbar-default .navbar-collapse, .navbar-default .navbar-form { border-col=
or: rgb(231, 231, 231); }

.navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .ope=
n > a:hover, .navbar-default .navbar-nav > .open > a:focus { color: rgb(85,=
 85, 85); background-color: rgb(231, 231, 231); }

@media (max-width: 999px) {
  .navbar-default .navbar-nav .open .dropdown-menu > li > a { color: rgb(11=
9, 119, 119); }
  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-=
default .navbar-nav .open .dropdown-menu > li > a:focus { color: rgb(51, 51=
, 51); background-color: transparent; }
  .navbar-default .navbar-nav .open .dropdown-menu > .active > a, .navbar-d=
efault .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-defaul=
t .navbar-nav .open .dropdown-menu > .active > a:focus { color: rgb(85, 85,=
 85); background-color: rgb(231, 231, 231); }
  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a, .navbar=
-default .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-de=
fault .navbar-nav .open .dropdown-menu > .disabled > a:focus { color: rgb(2=
04, 204, 204); background-color: transparent; }
}

.navbar-default .navbar-link { color: rgb(119, 119, 119); }

.navbar-default .navbar-link:hover { color: rgb(51, 51, 51); }

.navbar-default .btn-link { color: rgb(119, 119, 119); }

.navbar-default .btn-link:hover, .navbar-default .btn-link:focus { color: r=
gb(51, 51, 51); }

.navbar-default .btn-link[disabled]:hover, fieldset[disabled] .navbar-defau=
lt .btn-link:hover, .navbar-default .btn-link[disabled]:focus, fieldset[dis=
abled] .navbar-default .btn-link:focus { color: rgb(204, 204, 204); }

.navbar-inverse { background-color: rgb(34, 34, 34); border-color: rgb(8, 8=
, 8); }

.navbar-inverse .navbar-brand { color: rgb(119, 119, 119); }

.navbar-inverse .navbar-brand:hover, .navbar-inverse .navbar-brand:focus { =
color: rgb(255, 255, 255); background-color: transparent; }

.navbar-inverse .navbar-text { color: rgb(119, 119, 119); }

.navbar-inverse .navbar-nav > li > a { color: rgb(119, 119, 119); }

.navbar-inverse .navbar-nav > li > a:hover, .navbar-inverse .navbar-nav > l=
i > a:focus { color: rgb(255, 255, 255); background-color: transparent; }

.navbar-inverse .navbar-nav > .active > a, .navbar-inverse .navbar-nav > .a=
ctive > a:hover, .navbar-inverse .navbar-nav > .active > a:focus { color: r=
gb(255, 255, 255); background-color: rgb(8, 8, 8); }

.navbar-inverse .navbar-nav > .disabled > a, .navbar-inverse .navbar-nav > =
.disabled > a:hover, .navbar-inverse .navbar-nav > .disabled > a:focus { co=
lor: rgb(68, 68, 68); background-color: transparent; }

.navbar-inverse .navbar-toggle { border-color: rgb(51, 51, 51); }

.navbar-inverse .navbar-toggle:hover, .navbar-inverse .navbar-toggle:focus =
{ background-color: rgb(51, 51, 51); }

.navbar-inverse .navbar-toggle .icon-bar { background-color: rgb(255, 255, =
255); }

.navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form { border-col=
or: rgb(16, 16, 16); }

.navbar-inverse .navbar-nav > .open > a, .navbar-inverse .navbar-nav > .ope=
n > a:hover, .navbar-inverse .navbar-nav > .open > a:focus { color: rgb(255=
, 255, 255); background-color: rgb(8, 8, 8); }

@media (max-width: 999px) {
  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header { bor=
der-color: rgb(8, 8, 8); }
  .navbar-inverse .navbar-nav .open .dropdown-menu .divider { background-co=
lor: rgb(8, 8, 8); }
  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a { color: rgb(11=
9, 119, 119); }
  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-=
inverse .navbar-nav .open .dropdown-menu > li > a:focus { color: rgb(255, 2=
55, 255); background-color: transparent; }
  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a, .navbar-i=
nverse .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-invers=
e .navbar-nav .open .dropdown-menu > .active > a:focus { color: rgb(255, 25=
5, 255); background-color: rgb(8, 8, 8); }
  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a, .navbar=
-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-in=
verse .navbar-nav .open .dropdown-menu > .disabled > a:focus { color: rgb(6=
8, 68, 68); background-color: transparent; }
}

.navbar-inverse .navbar-link { color: rgb(119, 119, 119); }

.navbar-inverse .navbar-link:hover { color: rgb(255, 255, 255); }

.navbar-inverse .btn-link { color: rgb(119, 119, 119); }

.navbar-inverse .btn-link:hover, .navbar-inverse .btn-link:focus { color: r=
gb(255, 255, 255); }

.navbar-inverse .btn-link[disabled]:hover, fieldset[disabled] .navbar-inver=
se .btn-link:hover, .navbar-inverse .btn-link[disabled]:focus, fieldset[dis=
abled] .navbar-inverse .btn-link:focus { color: rgb(68, 68, 68); }

.breadcrumb { padding: 8px 15px; margin-bottom: 20px; list-style: none; bac=
kground-color: rgb(245, 245, 245); border-radius: 4px; }

.breadcrumb > li { display: inline-block; }

.breadcrumb > li + li::before { padding: 0px 5px; color: rgb(204, 204, 204)=
; content: "/=C2=A0"; }

.breadcrumb > .active { color: rgb(119, 119, 119); }

.pagination { display: inline-block; padding-left: 0px; margin: 20px 0px; b=
order-radius: 4px; }

.pagination > li { display: inline; }

.pagination > li > a, .pagination > li > span { position: relative; float: =
left; padding: 6px 12px; margin-left: -1px; line-height: 1.42857; color: rg=
b(66, 139, 202); text-decoration: none; background-color: rgb(255, 255, 255=
); border: 1px solid rgb(221, 221, 221); }

.pagination > li:first-child > a, .pagination > li:first-child > span { mar=
gin-left: 0px; border-top-left-radius: 4px; border-bottom-left-radius: 4px;=
 }

.pagination > li:last-child > a, .pagination > li:last-child > span { borde=
r-top-right-radius: 4px; border-bottom-right-radius: 4px; }

.pagination > li > a:hover, .pagination > li > span:hover, .pagination > li=
 > a:focus, .pagination > li > span:focus { color: rgb(42, 100, 150); backg=
round-color: rgb(238, 238, 238); border-color: rgb(221, 221, 221); }

.pagination > .active > a, .pagination > .active > span, .pagination > .act=
ive > a:hover, .pagination > .active > span:hover, .pagination > .active > =
a:focus, .pagination > .active > span:focus { z-index: 2; color: rgb(255, 2=
55, 255); cursor: default; background-color: rgb(66, 139, 202); border-colo=
r: rgb(66, 139, 202); }

.pagination > .disabled > span, .pagination > .disabled > span:hover, .pagi=
nation > .disabled > span:focus, .pagination > .disabled > a, .pagination >=
 .disabled > a:hover, .pagination > .disabled > a:focus { color: rgb(119, 1=
19, 119); cursor: not-allowed; background-color: rgb(255, 255, 255); border=
-color: rgb(221, 221, 221); }

.pagination-lg > li > a, .pagination-lg > li > span { padding: 10px 16px; f=
ont-size: 18px; }

.pagination-lg > li:first-child > a, .pagination-lg > li:first-child > span=
 { border-top-left-radius: 6px; border-bottom-left-radius: 6px; }

.pagination-lg > li:last-child > a, .pagination-lg > li:last-child > span {=
 border-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.pagination-sm > li > a, .pagination-sm > li > span { padding: 5px 10px; fo=
nt-size: 12px; }

.pagination-sm > li:first-child > a, .pagination-sm > li:first-child > span=
 { border-top-left-radius: 3px; border-bottom-left-radius: 3px; }

.pagination-sm > li:last-child > a, .pagination-sm > li:last-child > span {=
 border-top-right-radius: 3px; border-bottom-right-radius: 3px; }

.pager { padding-left: 0px; margin: 20px 0px; text-align: center; list-styl=
e: none; }

.pager li { display: inline; }

.pager li > a, .pager li > span { display: inline-block; padding: 5px 14px;=
 background-color: rgb(255, 255, 255); border: 1px solid rgb(221, 221, 221)=
; border-radius: 15px; }

.pager li > a:hover, .pager li > a:focus { text-decoration: none; backgroun=
d-color: rgb(238, 238, 238); }

.pager .next > a, .pager .next > span { float: right; }

.pager .previous > a, .pager .previous > span { float: left; }

.pager .disabled > a, .pager .disabled > a:hover, .pager .disabled > a:focu=
s, .pager .disabled > span { color: rgb(119, 119, 119); cursor: not-allowed=
; background-color: rgb(255, 255, 255); }

.label { display: inline; padding: 0.2em 0.6em 0.3em; font-size: 75%; font-=
weight: bold; line-height: 1; color: rgb(255, 255, 255); text-align: center=
; white-space: nowrap; vertical-align: baseline; border-radius: 0.25em; }

a.label:hover, a.label:focus { color: rgb(255, 255, 255); text-decoration: =
none; cursor: pointer; }

.label:empty { display: none; }

.btn .label { position: relative; top: -1px; }

.label-default { background-color: rgb(119, 119, 119); }

.label-default[href]:hover, .label-default[href]:focus { background-color: =
rgb(94, 94, 94); }

.label-primary { background-color: rgb(66, 139, 202); }

.label-primary[href]:hover, .label-primary[href]:focus { background-color: =
rgb(48, 113, 169); }

.label-success { background-color: rgb(92, 184, 92); }

.label-success[href]:hover, .label-success[href]:focus { background-color: =
rgb(68, 157, 68); }

.label-info { background-color: rgb(91, 192, 222); }

.label-info[href]:hover, .label-info[href]:focus { background-color: rgb(49=
, 176, 213); }

.label-warning { background-color: rgb(240, 173, 78); }

.label-warning[href]:hover, .label-warning[href]:focus { background-color: =
rgb(236, 151, 31); }

.label-danger { background-color: rgb(217, 83, 79); }

.label-danger[href]:hover, .label-danger[href]:focus { background-color: rg=
b(201, 48, 44); }

.badge { display: inline-block; min-width: 10px; padding: 3px 7px; font-siz=
e: 12px; font-weight: bold; line-height: 1; color: rgb(255, 255, 255); text=
-align: center; white-space: nowrap; vertical-align: baseline; background-c=
olor: rgb(119, 119, 119); border-radius: 10px; }

.badge:empty { display: none; }

.btn .badge { position: relative; top: -1px; }

.btn-xs .badge { top: 0px; padding: 1px 5px; }

a.badge:hover, a.badge:focus { color: rgb(255, 255, 255); text-decoration: =
none; cursor: pointer; }

a.list-group-item.active > .badge, .nav-pills > .active > a > .badge { colo=
r: rgb(66, 139, 202); background-color: rgb(255, 255, 255); }

.nav-pills > li > a > .badge { margin-left: 3px; }

.jumbotron { padding: 30px; margin-bottom: 30px; color: inherit; background=
-color: rgb(238, 238, 238); }

.jumbotron h1, .jumbotron .h1 { color: inherit; }

.jumbotron p { margin-bottom: 15px; font-size: 21px; font-weight: 200; }

.jumbotron > hr { border-top-color: rgb(213, 213, 213); }

.container .jumbotron { border-radius: 6px; }

.jumbotron .container { max-width: 100%; }

@media screen and (min-width: 768px) {
  .jumbotron { padding-top: 48px; padding-bottom: 48px; }
  .container .jumbotron { padding-right: 60px; padding-left: 60px; }
  .jumbotron h1, .jumbotron .h1 { font-size: 63px; }
}

.thumbnail { display: block; padding: 4px; margin-bottom: 20px; line-height=
: 1.42857; background-color: rgb(255, 255, 255); border: 1px solid rgb(221,=
 221, 221); border-radius: 4px; transition: all 0.2s ease-in-out 0s; }

.thumbnail > img, .thumbnail a > img { margin-right: auto; margin-left: aut=
o; }

a.thumbnail:hover, a.thumbnail:focus, a.thumbnail.active { border-color: rg=
b(66, 139, 202); }

.thumbnail .caption { padding: 9px; color: rgb(51, 51, 51); }

.alert { padding: 15px; margin-bottom: 20px; border: 1px solid transparent;=
 border-radius: 4px; }

.alert h4 { margin-top: 0px; color: inherit; }

.alert .alert-link { font-weight: bold; }

.alert > p, .alert > ul { margin-bottom: 0px; }

.alert > p + p { margin-top: 5px; }

.alert-dismissable, .alert-dismissible { padding-right: 35px; }

.alert-dismissable .close, .alert-dismissible .close { position: relative; =
top: -2px; right: -21px; color: inherit; }

.alert-success { color: rgb(60, 118, 61); background-color: rgb(223, 240, 2=
16); border-color: rgb(214, 233, 198); }

.alert-success hr { border-top-color: rgb(201, 226, 179); }

.alert-success .alert-link { color: rgb(43, 84, 44); }

.alert-info { color: rgb(49, 112, 143); background-color: rgb(217, 237, 247=
); border-color: rgb(188, 232, 241); }

.alert-info hr { border-top-color: rgb(166, 225, 236); }

.alert-info .alert-link { color: rgb(36, 82, 105); }

.alert-warning { color: rgb(138, 109, 59); background-color: rgb(252, 248, =
227); border-color: rgb(250, 235, 204); }

.alert-warning hr { border-top-color: rgb(247, 225, 181); }

.alert-warning .alert-link { color: rgb(102, 81, 44); }

.alert-danger { color: rgb(169, 68, 66); background-color: rgb(242, 222, 22=
2); border-color: rgb(235, 204, 209); }

.alert-danger hr { border-top-color: rgb(228, 185, 192); }

.alert-danger .alert-link { color: rgb(132, 53, 52); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 40px 0px; }
  100% { background-position: 0px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 40px 0px; }
  100% { background-position: 0px 0px; }
}

.progress { height: 20px; margin-bottom: 20px; overflow: hidden; background=
-color: rgb(245, 245, 245); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0=
.1) 0px 1px 2px inset; }

.progress-bar { float: left; width: 0px; height: 100%; font-size: 12px; lin=
e-height: 20px; color: rgb(255, 255, 255); text-align: center; background-c=
olor: rgb(66, 139, 202); box-shadow: rgba(0, 0, 0, 0.15) 0px -1px 0px inset=
; transition: width 0.6s ease 0s; }

.progress-striped .progress-bar, .progress-bar-striped { background-image: =
linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, tran=
sparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, =
transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .progress-bar, .progress-bar.active { animation: 2s linear=
 0s infinite normal none running progress-bar-stripes; }

.progress-bar[aria-valuenow=3D"1"], .progress-bar[aria-valuenow=3D"2"] { mi=
n-width: 30px; }

.progress-bar[aria-valuenow=3D"0"] { min-width: 30px; color: rgb(119, 119, =
119); background-color: transparent; background-image: none; box-shadow: no=
ne; }

.progress-bar-success { background-color: rgb(92, 184, 92); }

.progress-striped .progress-bar-success { background-image: linear-gradient=
(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rg=
ba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%=
, transparent); }

.progress-bar-info { background-color: rgb(91, 192, 222); }

.progress-striped .progress-bar-info { background-image: linear-gradient(45=
deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(=
255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, t=
ransparent); }

.progress-bar-warning { background-color: rgb(240, 173, 78); }

.progress-striped .progress-bar-warning { background-image: linear-gradient=
(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rg=
ba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%=
, transparent); }

.progress-bar-danger { background-color: rgb(217, 83, 79); }

.progress-striped .progress-bar-danger { background-image: linear-gradient(=
45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgb=
a(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%,=
 transparent); }

.media, .media-body { overflow: hidden; zoom: 1; }

.media, .media .media { margin-top: 15px; }

.media:first-child { margin-top: 0px; }

.media-object { display: block; }

.media-heading { margin: 0px 0px 5px; }

.media > .pull-left { margin-right: 10px; }

.media > .pull-right { margin-left: 10px; }

.media-list { padding-left: 0px; list-style: none; }

.list-group { padding-left: 0px; margin-bottom: 20px; }

.list-group-item { position: relative; display: block; padding: 10px 15px; =
margin-bottom: -1px; background-color: rgb(255, 255, 255); border: 1px soli=
d rgb(221, 221, 221); }

.list-group-item:first-child { border-top-left-radius: 4px; border-top-righ=
t-radius: 4px; }

.list-group-item:last-child { margin-bottom: 0px; border-bottom-right-radiu=
s: 4px; border-bottom-left-radius: 4px; }

.list-group-item > .badge { float: right; }

.list-group-item > .badge + .badge { margin-right: 5px; }

a.list-group-item { color: rgb(85, 85, 85); }

a.list-group-item .list-group-item-heading { color: rgb(51, 51, 51); }

a.list-group-item:hover, a.list-group-item:focus { color: rgb(85, 85, 85); =
text-decoration: none; background-color: rgb(245, 245, 245); }

.list-group-item.disabled, .list-group-item.disabled:hover, .list-group-ite=
m.disabled:focus { color: rgb(119, 119, 119); background-color: rgb(238, 23=
8, 238); }

.list-group-item.disabled .list-group-item-heading, .list-group-item.disabl=
ed:hover .list-group-item-heading, .list-group-item.disabled:focus .list-gr=
oup-item-heading { color: inherit; }

.list-group-item.disabled .list-group-item-text, .list-group-item.disabled:=
hover .list-group-item-text, .list-group-item.disabled:focus .list-group-it=
em-text { color: rgb(119, 119, 119); }

.list-group-item.active, .list-group-item.active:hover, .list-group-item.ac=
tive:focus { z-index: 2; color: rgb(255, 255, 255); background-color: rgb(6=
6, 139, 202); border-color: rgb(66, 139, 202); }

.list-group-item.active .list-group-item-heading, .list-group-item.active:h=
over .list-group-item-heading, .list-group-item.active:focus .list-group-it=
em-heading, .list-group-item.active .list-group-item-heading > small, .list=
-group-item.active:hover .list-group-item-heading > small, .list-group-item=
.active:focus .list-group-item-heading > small, .list-group-item.active .li=
st-group-item-heading > .small, .list-group-item.active:hover .list-group-i=
tem-heading > .small, .list-group-item.active:focus .list-group-item-headin=
g > .small { color: inherit; }

.list-group-item.active .list-group-item-text, .list-group-item.active:hove=
r .list-group-item-text, .list-group-item.active:focus .list-group-item-tex=
t { color: rgb(225, 237, 247); }

.list-group-item-success { color: rgb(60, 118, 61); background-color: rgb(2=
23, 240, 216); }

a.list-group-item-success { color: rgb(60, 118, 61); }

a.list-group-item-success .list-group-item-heading { color: inherit; }

a.list-group-item-success:hover, a.list-group-item-success:focus { color: r=
gb(60, 118, 61); background-color: rgb(208, 233, 198); }

a.list-group-item-success.active, a.list-group-item-success.active:hover, a=
.list-group-item-success.active:focus { color: rgb(255, 255, 255); backgrou=
nd-color: rgb(60, 118, 61); border-color: rgb(60, 118, 61); }

.list-group-item-info { color: rgb(49, 112, 143); background-color: rgb(217=
, 237, 247); }

a.list-group-item-info { color: rgb(49, 112, 143); }

a.list-group-item-info .list-group-item-heading { color: inherit; }

a.list-group-item-info:hover, a.list-group-item-info:focus { color: rgb(49,=
 112, 143); background-color: rgb(196, 227, 243); }

a.list-group-item-info.active, a.list-group-item-info.active:hover, a.list-=
group-item-info.active:focus { color: rgb(255, 255, 255); background-color:=
 rgb(49, 112, 143); border-color: rgb(49, 112, 143); }

.list-group-item-warning { color: rgb(138, 109, 59); background-color: rgb(=
252, 248, 227); }

a.list-group-item-warning { color: rgb(138, 109, 59); }

a.list-group-item-warning .list-group-item-heading { color: inherit; }

a.list-group-item-warning:hover, a.list-group-item-warning:focus { color: r=
gb(138, 109, 59); background-color: rgb(250, 242, 204); }

a.list-group-item-warning.active, a.list-group-item-warning.active:hover, a=
.list-group-item-warning.active:focus { color: rgb(255, 255, 255); backgrou=
nd-color: rgb(138, 109, 59); border-color: rgb(138, 109, 59); }

.list-group-item-danger { color: rgb(169, 68, 66); background-color: rgb(24=
2, 222, 222); }

a.list-group-item-danger { color: rgb(169, 68, 66); }

a.list-group-item-danger .list-group-item-heading { color: inherit; }

a.list-group-item-danger:hover, a.list-group-item-danger:focus { color: rgb=
(169, 68, 66); background-color: rgb(235, 204, 204); }

a.list-group-item-danger.active, a.list-group-item-danger.active:hover, a.l=
ist-group-item-danger.active:focus { color: rgb(255, 255, 255); background-=
color: rgb(169, 68, 66); border-color: rgb(169, 68, 66); }

.list-group-item-heading { margin-top: 0px; margin-bottom: 5px; }

.list-group-item-text { margin-bottom: 0px; line-height: 1.3; }

.panel { margin-bottom: 20px; background-color: rgb(255, 255, 255); border:=
 1px solid transparent; border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.05)=
 0px 1px 1px; }

.panel-body { padding: 15px; }

.panel-heading { padding: 10px 15px; border-bottom: 1px solid transparent; =
border-top-left-radius: 3px; border-top-right-radius: 3px; }

.panel-heading > .dropdown .dropdown-toggle { color: inherit; }

.panel-title { margin-top: 0px; margin-bottom: 0px; font-size: 16px; color:=
 inherit; }

.panel-title > a { color: inherit; }

.panel-footer { padding: 10px 15px; background-color: rgb(245, 245, 245); b=
order-top: 1px solid rgb(221, 221, 221); border-bottom-right-radius: 3px; b=
order-bottom-left-radius: 3px; }

.panel > .list-group { margin-bottom: 0px; }

.panel > .list-group .list-group-item { border-width: 1px 0px; border-radiu=
s: 0px; }

.panel > .list-group:first-child .list-group-item:first-child { border-top:=
 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; }

.panel > .list-group:last-child .list-group-item:last-child { border-bottom=
: 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; }

.panel-heading + .list-group .list-group-item:first-child { border-top-widt=
h: 0px; }

.list-group + .panel-footer { border-top-width: 0px; }

.panel > .table, .panel > .table-responsive > .table, .panel > .panel-colla=
pse > .table { margin-bottom: 0px; }

.panel > .table:first-child, .panel > .table-responsive:first-child > .tabl=
e:first-child { border-top-left-radius: 3px; border-top-right-radius: 3px; =
}

.panel > .table:first-child > thead:first-child > tr:first-child td:first-c=
hild, .panel > .table-responsive:first-child > .table:first-child > thead:f=
irst-child > tr:first-child td:first-child, .panel > .table:first-child > t=
body:first-child > tr:first-child td:first-child, .panel > .table-responsiv=
e:first-child > .table:first-child > tbody:first-child > tr:first-child td:=
first-child, .panel > .table:first-child > thead:first-child > tr:first-chi=
ld th:first-child, .panel > .table-responsive:first-child > .table:first-ch=
ild > thead:first-child > tr:first-child th:first-child, .panel > .table:fi=
rst-child > tbody:first-child > tr:first-child th:first-child, .panel > .ta=
ble-responsive:first-child > .table:first-child > tbody:first-child > tr:fi=
rst-child th:first-child { border-top-left-radius: 3px; }

.panel > .table:first-child > thead:first-child > tr:first-child td:last-ch=
ild, .panel > .table-responsive:first-child > .table:first-child > thead:fi=
rst-child > tr:first-child td:last-child, .panel > .table:first-child > tbo=
dy:first-child > tr:first-child td:last-child, .panel > .table-responsive:f=
irst-child > .table:first-child > tbody:first-child > tr:first-child td:las=
t-child, .panel > .table:first-child > thead:first-child > tr:first-child t=
h:last-child, .panel > .table-responsive:first-child > .table:first-child >=
 thead:first-child > tr:first-child th:last-child, .panel > .table:first-ch=
ild > tbody:first-child > tr:first-child th:last-child, .panel > .table-res=
ponsive:first-child > .table:first-child > tbody:first-child > tr:first-chi=
ld th:last-child { border-top-right-radius: 3px; }

.panel > .table:last-child, .panel > .table-responsive:last-child > .table:=
last-child { border-bottom-right-radius: 3px; border-bottom-left-radius: 3p=
x; }

.panel > .table:last-child > tbody:last-child > tr:last-child td:first-chil=
d, .panel > .table-responsive:last-child > .table:last-child > tbody:last-c=
hild > tr:last-child td:first-child, .panel > .table:last-child > tfoot:las=
t-child > tr:last-child td:first-child, .panel > .table-responsive:last-chi=
ld > .table:last-child > tfoot:last-child > tr:last-child td:first-child, .=
panel > .table:last-child > tbody:last-child > tr:last-child th:first-child=
, .panel > .table-responsive:last-child > .table:last-child > tbody:last-ch=
ild > tr:last-child th:first-child, .panel > .table:last-child > tfoot:last=
-child > tr:last-child th:first-child, .panel > .table-responsive:last-chil=
d > .table:last-child > tfoot:last-child > tr:last-child th:first-child { b=
order-bottom-left-radius: 3px; }

.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child=
, .panel > .table-responsive:last-child > .table:last-child > tbody:last-ch=
ild > tr:last-child td:last-child, .panel > .table:last-child > tfoot:last-=
child > tr:last-child td:last-child, .panel > .table-responsive:last-child =
> .table:last-child > tfoot:last-child > tr:last-child td:last-child, .pane=
l > .table:last-child > tbody:last-child > tr:last-child th:last-child, .pa=
nel > .table-responsive:last-child > .table:last-child > tbody:last-child >=
 tr:last-child th:last-child, .panel > .table:last-child > tfoot:last-child=
 > tr:last-child th:last-child, .panel > .table-responsive:last-child > .ta=
ble:last-child > tfoot:last-child > tr:last-child th:last-child { border-bo=
ttom-right-radius: 3px; }

.panel > .panel-body + .table, .panel > .panel-body + .table-responsive { b=
order-top: 1px solid rgb(221, 221, 221); }

.panel > .table > tbody:first-child > tr:first-child th, .panel > .table > =
tbody:first-child > tr:first-child td { border-top: 0px; }

.panel > .table-bordered, .panel > .table-responsive > .table-bordered { bo=
rder: 0px; }

.panel > .table-bordered > thead > tr > th:first-child, .panel > .table-res=
ponsive > .table-bordered > thead > tr > th:first-child, .panel > .table-bo=
rdered > tbody > tr > th:first-child, .panel > .table-responsive > .table-b=
ordered > tbody > tr > th:first-child, .panel > .table-bordered > tfoot > t=
r > th:first-child, .panel > .table-responsive > .table-bordered > tfoot > =
tr > th:first-child, .panel > .table-bordered > thead > tr > td:first-child=
, .panel > .table-responsive > .table-bordered > thead > tr > td:first-chil=
d, .panel > .table-bordered > tbody > tr > td:first-child, .panel > .table-=
responsive > .table-bordered > tbody > tr > td:first-child, .panel > .table=
-bordered > tfoot > tr > td:first-child, .panel > .table-responsive > .tabl=
e-bordered > tfoot > tr > td:first-child { border-left: 0px; }

.panel > .table-bordered > thead > tr > th:last-child, .panel > .table-resp=
onsive > .table-bordered > thead > tr > th:last-child, .panel > .table-bord=
ered > tbody > tr > th:last-child, .panel > .table-responsive > .table-bord=
ered > tbody > tr > th:last-child, .panel > .table-bordered > tfoot > tr > =
th:last-child, .panel > .table-responsive > .table-bordered > tfoot > tr > =
th:last-child, .panel > .table-bordered > thead > tr > td:last-child, .pane=
l > .table-responsive > .table-bordered > thead > tr > td:last-child, .pane=
l > .table-bordered > tbody > tr > td:last-child, .panel > .table-responsiv=
e > .table-bordered > tbody > tr > td:last-child, .panel > .table-bordered =
> tfoot > tr > td:last-child, .panel > .table-responsive > .table-bordered =
> tfoot > tr > td:last-child { border-right: 0px; }

.panel > .table-bordered > thead > tr:first-child > td, .panel > .table-res=
ponsive > .table-bordered > thead > tr:first-child > td, .panel > .table-bo=
rdered > tbody > tr:first-child > td, .panel > .table-responsive > .table-b=
ordered > tbody > tr:first-child > td, .panel > .table-bordered > thead > t=
r:first-child > th, .panel > .table-responsive > .table-bordered > thead > =
tr:first-child > th, .panel > .table-bordered > tbody > tr:first-child > th=
, .panel > .table-responsive > .table-bordered > tbody > tr:first-child > t=
h { border-bottom: 0px; }

.panel > .table-bordered > tbody > tr:last-child > td, .panel > .table-resp=
onsive > .table-bordered > tbody > tr:last-child > td, .panel > .table-bord=
ered > tfoot > tr:last-child > td, .panel > .table-responsive > .table-bord=
ered > tfoot > tr:last-child > td, .panel > .table-bordered > tbody > tr:la=
st-child > th, .panel > .table-responsive > .table-bordered > tbody > tr:la=
st-child > th, .panel > .table-bordered > tfoot > tr:last-child > th, .pane=
l > .table-responsive > .table-bordered > tfoot > tr:last-child > th { bord=
er-bottom: 0px; }

.panel > .table-responsive { margin-bottom: 0px; border: 0px; }

.panel-group { margin-bottom: 20px; }

.panel-group .panel { margin-bottom: 0px; border-radius: 4px; }

.panel-group .panel + .panel { margin-top: 5px; }

.panel-group .panel-heading { border-bottom: 0px; }

.panel-group .panel-heading + .panel-collapse > .panel-body { border-top: 1=
px solid rgb(221, 221, 221); }

.panel-group .panel-footer { border-top: 0px; }

.panel-group .panel-footer + .panel-collapse .panel-body { border-bottom: 1=
px solid rgb(221, 221, 221); }

.panel-default { border-color: rgb(221, 221, 221); }

.panel-default > .panel-heading { color: rgb(51, 51, 51); background-color:=
 rgb(245, 245, 245); border-color: rgb(221, 221, 221); }

.panel-default > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(221, 221, 221); }

.panel-default > .panel-heading .badge { color: rgb(245, 245, 245); backgro=
und-color: rgb(51, 51, 51); }

.panel-default > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(221, 221, 221); }

.panel-primary { border-color: rgb(66, 139, 202); }

.panel-primary > .panel-heading { color: rgb(255, 255, 255); background-col=
or: rgb(66, 139, 202); border-color: rgb(66, 139, 202); }

.panel-primary > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(66, 139, 202); }

.panel-primary > .panel-heading .badge { color: rgb(66, 139, 202); backgrou=
nd-color: rgb(255, 255, 255); }

.panel-primary > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(66, 139, 202); }

.panel-success { border-color: rgb(214, 233, 198); }

.panel-success > .panel-heading { color: rgb(60, 118, 61); background-color=
: rgb(223, 240, 216); border-color: rgb(214, 233, 198); }

.panel-success > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(214, 233, 198); }

.panel-success > .panel-heading .badge { color: rgb(223, 240, 216); backgro=
und-color: rgb(60, 118, 61); }

.panel-success > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(214, 233, 198); }

.panel-info { border-color: rgb(188, 232, 241); }

.panel-info > .panel-heading { color: rgb(49, 112, 143); background-color: =
rgb(217, 237, 247); border-color: rgb(188, 232, 241); }

.panel-info > .panel-heading + .panel-collapse > .panel-body { border-top-c=
olor: rgb(188, 232, 241); }

.panel-info > .panel-heading .badge { color: rgb(217, 237, 247); background=
-color: rgb(49, 112, 143); }

.panel-info > .panel-footer + .panel-collapse > .panel-body { border-bottom=
-color: rgb(188, 232, 241); }

.panel-warning { border-color: rgb(250, 235, 204); }

.panel-warning > .panel-heading { color: rgb(138, 109, 59); background-colo=
r: rgb(252, 248, 227); border-color: rgb(250, 235, 204); }

.panel-warning > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(250, 235, 204); }

.panel-warning > .panel-heading .badge { color: rgb(252, 248, 227); backgro=
und-color: rgb(138, 109, 59); }

.panel-warning > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(250, 235, 204); }

.panel-danger { border-color: rgb(235, 204, 209); }

.panel-danger > .panel-heading { color: rgb(169, 68, 66); background-color:=
 rgb(242, 222, 222); border-color: rgb(235, 204, 209); }

.panel-danger > .panel-heading + .panel-collapse > .panel-body { border-top=
-color: rgb(235, 204, 209); }

.panel-danger > .panel-heading .badge { color: rgb(242, 222, 222); backgrou=
nd-color: rgb(169, 68, 66); }

.panel-danger > .panel-footer + .panel-collapse > .panel-body { border-bott=
om-color: rgb(235, 204, 209); }

.embed-responsive { position: relative; display: block; height: 0px; paddin=
g: 0px; overflow: hidden; }

.embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-=
responsive embed, .embed-responsive object { position: absolute; top: 0px; =
bottom: 0px; left: 0px; width: 100%; height: 100%; border: 0px; }

.embed-responsive.embed-responsive-16by9 { padding-bottom: 56.25%; }

.embed-responsive.embed-responsive-4by3 { padding-bottom: 75%; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgb(227, 227, 227); border-radiu=
s: 4px; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.15); }

.well-lg { padding: 24px; border-radius: 6px; }

.well-sm { padding: 9px; border-radius: 3px; }

.close { float: right; font-size: 21px; font-weight: bold; line-height: 1; =
color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacity: =
0.2; }

.close:hover, .close:focus { color: rgb(0, 0, 0); text-decoration: none; cu=
rsor: pointer; opacity: 0.5; }

button.close { appearance: none; padding: 0px; cursor: pointer; background:=
 transparent; border: 0px; }

.modal-open { overflow: hidden; }

.modal { position: fixed; inset: 0px; z-index: 1050; display: none; overflo=
w: hidden; outline: 0px; }

.modal.fade .modal-dialog { transition: transform 0.3s ease-out 0s; transfo=
rm: translate3d(0px, -25%, 0px); }

.modal.in .modal-dialog { transform: translate3d(0px, 0px, 0px); }

.modal-open .modal { overflow: hidden auto; }

.modal-dialog { position: relative; width: auto; margin: 10px; }

.modal-content { position: relative; background-color: rgb(255, 255, 255); =
background-clip: padding-box; border: 1px solid rgba(0, 0, 0, 0.2); border-=
radius: 6px; outline: 0px; box-shadow: rgba(0, 0, 0, 0.5) 0px 3px 9px; }

.modal-backdrop { position: fixed; inset: 0px; z-index: 1040; background-co=
lor: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop.in { opacity: 0.5; }

.modal-header { min-height: 16.4286px; padding: 15px; border-bottom: 1px so=
lid rgb(229, 229, 229); }

.modal-header .close { margin-top: -2px; }

.modal-title { margin: 0px; line-height: 1.42857; }

.modal-body { position: relative; padding: 15px; }

.modal-footer { padding: 15px; text-align: right; border-top: 1px solid rgb=
(229, 229, 229); }

.modal-footer .btn + .btn { margin-bottom: 0px; margin-left: 5px; }

.modal-footer .btn-group .btn + .btn { margin-left: -1px; }

.modal-footer .btn-block + .btn-block { margin-left: 0px; }

.modal-scrollbar-measure { position: absolute; top: -9999px; width: 50px; h=
eight: 50px; overflow: scroll; }

@media (min-width: 768px) {
  .modal-dialog { width: 600px; margin: 30px auto; }
  .modal-content { box-shadow: rgba(0, 0, 0, 0.5) 0px 5px 15px; }
  .modal-sm { width: 300px; }
}

@media (min-width: 992px) {
  .modal-lg { width: 900px; }
}

.tooltip { position: absolute; z-index: 1070; display: block; font-size: 12=
px; line-height: 1.4; visibility: visible; opacity: 0; }

.tooltip.in { opacity: 0.9; }

.tooltip.top { padding: 5px 0px; margin-top: -3px; }

.tooltip.right { padding: 0px 5px; margin-left: 3px; }

.tooltip.bottom { padding: 5px 0px; margin-top: 3px; }

.tooltip.left { padding: 0px 5px; margin-left: -3px; }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; border-color:=
 transparent; border-style: solid; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-width: 5px 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.top-left .tooltip-arrow { bottom: 0px; left: 5px; border-width: 5p=
x 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.top-right .tooltip-arrow { right: 5px; bottom: 0px; border-width: =
5px 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-width: 5px 5px 5px 0px; border-right-color: rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-width: 5px 0px 5px 5px; border-left-color: rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-width: 0px 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.tooltip.bottom-left .tooltip-arrow { top: 0px; left: 5px; border-width: 0p=
x 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.tooltip.bottom-right .tooltip-arrow { top: 0px; right: 5px; border-width: =
0px 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1060; display:=
 none; max-width: 276px; padding: 1px; text-align: left; white-space: norma=
l; background-color: rgb(255, 255, 255); background-clip: padding-box; bord=
er: 1px solid rgba(0, 0, 0, 0.2); border-radius: 6px; box-shadow: rgba(0, 0=
, 0, 0.2) 0px 5px 10px; }

.popover.top { margin-top: -10px; }

.popover.right { margin-left: 10px; }

.popover.bottom { margin-top: 10px; }

.popover.left { margin-left: -10px; }

.popover-title { padding: 8px 14px; margin: 0px; font-size: 14px; font-weig=
ht: normal; line-height: 18px; background-color: rgb(247, 247, 247); border=
-bottom: 1px solid rgb(235, 235, 235); border-radius: 5px 5px 0px 0px; }

.popover-content { padding: 9px 14px; }

.popover > .arrow, .popover > .arrow::after { position: absolute; display: =
block; width: 0px; height: 0px; border-color: transparent; border-style: so=
lid; }

.popover > .arrow { border-width: 11px; }

.popover > .arrow::after { content: ""; border-width: 10px; }

.popover.top > .arrow { bottom: -11px; left: 50%; margin-left: -11px; borde=
r-top-color: rgba(0, 0, 0, 0.25); border-bottom-width: 0px; }

.popover.top > .arrow::after { bottom: 1px; margin-left: -10px; content: " =
"; border-top-color: rgb(255, 255, 255); border-bottom-width: 0px; }

.popover.right > .arrow { top: 50%; left: -11px; margin-top: -11px; border-=
right-color: rgba(0, 0, 0, 0.25); border-left-width: 0px; }

.popover.right > .arrow::after { bottom: -10px; left: 1px; content: " "; bo=
rder-right-color: rgb(255, 255, 255); border-left-width: 0px; }

.popover.bottom > .arrow { top: -11px; left: 50%; margin-left: -11px; borde=
r-top-width: 0px; border-bottom-color: rgba(0, 0, 0, 0.25); }

.popover.bottom > .arrow::after { top: 1px; margin-left: -10px; content: " =
"; border-top-width: 0px; border-bottom-color: rgb(255, 255, 255); }

.popover.left > .arrow { top: 50%; right: -11px; margin-top: -11px; border-=
right-width: 0px; border-left-color: rgba(0, 0, 0, 0.25); }

.popover.left > .arrow::after { right: 1px; bottom: -10px; content: " "; bo=
rder-right-width: 0px; border-left-color: rgb(255, 255, 255); }

.carousel { position: relative; }

.carousel-inner { position: relative; width: 100%; overflow: hidden; }

.carousel-inner > .item { position: relative; display: none; transition: le=
ft 0.6s ease-in-out 0s; }

.carousel-inner > .item > img, .carousel-inner > .item > a > img { line-hei=
ght: 1; }

.carousel-inner > .active, .carousel-inner > .next, .carousel-inner > .prev=
 { display: block; }

.carousel-inner > .active { left: 0px; }

.carousel-inner > .next, .carousel-inner > .prev { position: absolute; top:=
 0px; width: 100%; }

.carousel-inner > .next { left: 100%; }

.carousel-inner > .prev { left: -100%; }

.carousel-inner > .next.left, .carousel-inner > .prev.right { left: 0px; }

.carousel-inner > .active.left { left: -100%; }

.carousel-inner > .active.right { left: 100%; }

.carousel-control { position: absolute; top: 0px; bottom: 0px; left: 0px; w=
idth: 15%; font-size: 20px; color: rgb(255, 255, 255); text-align: center; =
text-shadow: rgba(0, 0, 0, 0.6) 0px 1px 2px; opacity: 0.5; }

.carousel-control.left { background-image: linear-gradient(to right, rgba(0=
, 0, 0, 0.5) 0px, rgba(0, 0, 0, 0) 100%); background-repeat: repeat-x; }

.carousel-control.right { right: 0px; left: auto; background-image: linear-=
gradient(to right, rgba(0, 0, 0, 0) 0px, rgba(0, 0, 0, 0.5) 100%); backgrou=
nd-repeat: repeat-x; }

.carousel-control:hover, .carousel-control:focus { color: rgb(255, 255, 255=
); text-decoration: none; outline: 0px; opacity: 0.9; }

.carousel-control .icon-prev, .carousel-control .icon-next, .carousel-contr=
ol .glyphicon-chevron-left, .carousel-control .glyphicon-chevron-right { po=
sition: absolute; top: 50%; z-index: 5; display: inline-block; }

.carousel-control .icon-prev, .carousel-control .glyphicon-chevron-left { l=
eft: 50%; margin-left: -10px; }

.carousel-control .icon-next, .carousel-control .glyphicon-chevron-right { =
right: 50%; margin-right: -10px; }

.carousel-control .icon-prev, .carousel-control .icon-next { width: 20px; h=
eight: 20px; margin-top: -10px; font-family: serif; }

.carousel-control .icon-prev::before { content: "=E2=80=B9"; }

.carousel-control .icon-next::before { content: "=E2=80=BA"; }

.carousel-indicators { position: absolute; bottom: 10px; left: 50%; z-index=
: 15; width: 60%; padding-left: 0px; margin-left: -30%; text-align: center;=
 list-style: none; }

.carousel-indicators li { display: inline-block; width: 10px; height: 10px;=
 margin: 1px; text-indent: -999px; cursor: pointer; background-color: rgba(=
0, 0, 0, 0); border: 1px solid rgb(255, 255, 255); border-radius: 10px; }

.carousel-indicators .active { width: 12px; height: 12px; margin: 0px; back=
ground-color: rgb(255, 255, 255); }

.carousel-caption { position: absolute; right: 15%; bottom: 20px; left: 15%=
; z-index: 10; padding-top: 20px; padding-bottom: 20px; color: rgb(255, 255=
, 255); text-align: center; text-shadow: rgba(0, 0, 0, 0.6) 0px 1px 2px; }

.carousel-caption .btn { text-shadow: none; }

@media screen and (min-width: 768px) {
  .carousel-control .glyphicon-chevron-left, .carousel-control .glyphicon-c=
hevron-right, .carousel-control .icon-prev, .carousel-control .icon-next { =
width: 30px; height: 30px; margin-top: -15px; font-size: 30px; }
  .carousel-control .glyphicon-chevron-left, .carousel-control .icon-prev {=
 margin-left: -15px; }
  .carousel-control .glyphicon-chevron-right, .carousel-control .icon-next =
{ margin-right: -15px; }
  .carousel-caption { right: 20%; left: 20%; padding-bottom: 30px; }
  .carousel-indicators { bottom: 20px; }
}

.clearfix::before, .clearfix::after, .dl-horizontal dd::before, .dl-horizon=
tal dd::after, .container::before, .container::after, .container-fluid::bef=
ore, .container-fluid::after, .row::before, .row::after, .form-horizontal .=
form-group::before, .form-horizontal .form-group::after, .btn-toolbar::befo=
re, .btn-toolbar::after, .btn-group-vertical > .btn-group::before, .btn-gro=
up-vertical > .btn-group::after, .nav::before, .nav::after, .navbar::before=
, .navbar::after, .navbar-header::before, .navbar-header::after, .navbar-co=
llapse::before, .navbar-collapse::after, .pager::before, .pager::after, .pa=
nel-body::before, .panel-body::after, .modal-footer::before, .modal-footer:=
:after { display: table; content: " "; }

.clearfix::after, .dl-horizontal dd::after, .container::after, .container-f=
luid::after, .row::after, .form-horizontal .form-group::after, .btn-toolbar=
::after, .btn-group-vertical > .btn-group::after, .nav::after, .navbar::aft=
er, .navbar-header::after, .navbar-collapse::after, .pager::after, .panel-b=
ody::after, .modal-footer::after { clear: both; }

.center-block { display: block; margin-right: auto; margin-left: auto; }

.pull-right { float: right !important; }

.pull-left { float: left !important; }

.hide { display: none !important; }

.show { display: block !important; }

.invisible { visibility: hidden; }

.text-hide { font: 0px / 0 a; color: transparent; text-shadow: none; backgr=
ound-color: transparent; border: 0px; }

.hidden { display: none !important; visibility: hidden !important; }

.affix { position: fixed; transform: translate3d(0px, 0px, 0px); }

.visible-xs, .visible-sm, .visible-md, .visible-lg { display: none !importa=
nt; }

.visible-xs-block, .visible-xs-inline, .visible-xs-inline-block, .visible-s=
m-block, .visible-sm-inline, .visible-sm-inline-block, .visible-md-block, .=
visible-md-inline, .visible-md-inline-block, .visible-lg-block, .visible-lg=
-inline, .visible-lg-inline-block { display: none !important; }

@media (max-width: 767px) {
  .visible-xs { display: block !important; }
  table.visible-xs { display: table; }
  tr.visible-xs { display: table-row !important; }
  th.visible-xs, td.visible-xs { display: table-cell !important; }
  .visible-xs-block { display: block !important; }
  .visible-xs-inline { display: inline !important; }
  .visible-xs-inline-block { display: inline-block !important; }
}

@media (min-width: 768px) and (max-width: 991px) {
  .visible-sm { display: block !important; }
  table.visible-sm { display: table; }
  tr.visible-sm { display: table-row !important; }
  th.visible-sm, td.visible-sm { display: table-cell !important; }
  .visible-sm-block { display: block !important; }
  .visible-sm-inline { display: inline !important; }
  .visible-sm-inline-block { display: inline-block !important; }
}

@media (min-width: 992px) and (max-width: 1199px) {
  .visible-md { display: block !important; }
  table.visible-md { display: table; }
  tr.visible-md { display: table-row !important; }
  th.visible-md, td.visible-md { display: table-cell !important; }
  .visible-md-block { display: block !important; }
  .visible-md-inline { display: inline !important; }
  .visible-md-inline-block { display: inline-block !important; }
}

@media (min-width: 1200px) {
  .visible-lg { display: block !important; }
  table.visible-lg { display: table; }
  tr.visible-lg { display: table-row !important; }
  th.visible-lg, td.visible-lg { display: table-cell !important; }
  .visible-lg-block { display: block !important; }
  .visible-lg-inline { display: inline !important; }
  .visible-lg-inline-block { display: inline-block !important; }
}

@media (max-width: 767px) {
  .hidden-xs { display: none !important; }
}

@media (min-width: 768px) and (max-width: 991px) {
  .hidden-sm { display: none !important; }
}

@media (min-width: 992px) and (max-width: 1199px) {
  .hidden-md { display: none !important; }
}

@media (min-width: 1200px) {
  .hidden-lg { display: none !important; }
}

.visible-print { display: none !important; }

@media print {
  .visible-print { display: block !important; }
  table.visible-print { display: table; }
  tr.visible-print { display: table-row !important; }
  th.visible-print, td.visible-print { display: table-cell !important; }
}

.visible-print-block { display: none !important; }

@media print {
  .visible-print-block { display: block !important; }
}

.visible-print-inline { display: none !important; }

@media print {
  .visible-print-inline { display: inline !important; }
}

.visible-print-inline-block { display: none !important; }

@media print {
  .visible-print-inline-block { display: inline-block !important; }
  .hidden-print { display: none !important; }
}

.fa { display: inline-block; font-style: normal; font-variant: normal; font=
-weight: normal; font-stretch: normal; line-height: 1; font-family: FontAwe=
some; font-size: inherit; text-rendering: auto; -webkit-font-smoothing: ant=
ialiased; }

.fa-lg { font-size: 1.33333em; line-height: 0.75em; vertical-align: -15%; }

.fa-2x { font-size: 2em; }

.fa-3x { font-size: 3em; }

.fa-4x { font-size: 4em; }

.fa-5x { font-size: 5em; }

.fa-fw { width: 1.28571em; text-align: center; }

.fa-ul { padding-left: 0px; margin-left: 2.14286em; list-style-type: none; =
}

.fa-ul > li { position: relative; }

.fa-li { position: absolute; left: -2.14286em; width: 2.14286em; top: 0.142=
857em; text-align: center; }

.fa-li.fa-lg { left: -1.85714em; }

.fa-border { padding: 0.2em 0.25em 0.15em; border: 0.08em solid rgb(238, 23=
8, 238); border-radius: 0.1em; }

.fa-pull-left { float: left; }

.fa-pull-right { float: right; }

.fa.fa-pull-left { margin-right: 0.3em; }

.fa.fa-pull-right { margin-left: 0.3em; }

.pull-right { float: right; }

.pull-left { float: left; }

.fa.pull-left { margin-right: 0.3em; }

.fa.pull-right { margin-left: 0.3em; }

.fa-spin { animation: 2s linear 0s infinite normal none running fa-spin; }

.fa-pulse { animation: 1s steps(8) 0s infinite normal none running fa-spin;=
 }

@-webkit-keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

@keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

.fa-rotate-90 { transform: rotate(90deg); }

.fa-rotate-180 { transform: rotate(180deg); }

.fa-rotate-270 { transform: rotate(270deg); }

.fa-flip-horizontal { transform: scale(-1, 1); }

.fa-flip-vertical { transform: scale(1, -1); }

:root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-=
flip-horizontal, :root .fa-flip-vertical { filter: none; }

.fa-stack { position: relative; display: inline-block; width: 2em; height: =
2em; line-height: 2em; vertical-align: middle; }

.fa-stack-1x, .fa-stack-2x { position: absolute; left: 0px; width: 100%; te=
xt-align: center; }

.fa-stack-1x { line-height: inherit; }

.fa-stack-2x { font-size: 2em; }

.fa-inverse { color: rgb(255, 255, 255); }

.fa-glass::before { content: "=EF=80=80"; }

.fa-music::before { content: "=EF=80=81"; }

.fa-search::before { content: "=EF=80=82"; }

.fa-envelope-o::before { content: "=EF=80=83"; }

.fa-heart::before { content: "=EF=80=84"; }

.fa-star::before { content: "=EF=80=85"; }

.fa-star-o::before { content: "=EF=80=86"; }

.fa-user::before { content: "=EF=80=87"; }

.fa-film::before { content: "=EF=80=88"; }

.fa-th-large::before { content: "=EF=80=89"; }

.fa-th::before { content: "=EF=80=8A"; }

.fa-th-list::before { content: "=EF=80=8B"; }

.fa-check::before { content: "=EF=80=8C"; }

.fa-remove::before, .fa-close::before, .fa-times::before { content: "=EF=80=
=8D"; }

.fa-search-plus::before { content: "=EF=80=8E"; }

.fa-search-minus::before { content: "=EF=80=90"; }

.fa-power-off::before { content: "=EF=80=91"; }

.fa-signal::before { content: "=EF=80=92"; }

.fa-gear::before, .fa-cog::before { content: "=EF=80=93"; }

.fa-trash-o::before { content: "=EF=80=94"; }

.fa-home::before { content: "=EF=80=95"; }

.fa-file-o::before { content: "=EF=80=96"; }

.fa-clock-o::before { content: "=EF=80=97"; }

.fa-road::before { content: "=EF=80=98"; }

.fa-download::before { content: "=EF=80=99"; }

.fa-arrow-circle-o-down::before { content: "=EF=80=9A"; }

.fa-arrow-circle-o-up::before { content: "=EF=80=9B"; }

.fa-inbox::before { content: "=EF=80=9C"; }

.fa-play-circle-o::before { content: "=EF=80=9D"; }

.fa-rotate-right::before, .fa-repeat::before { content: "=EF=80=9E"; }

.fa-refresh::before { content: "=EF=80=A1"; }

.fa-list-alt::before { content: "=EF=80=A2"; }

.fa-lock::before { content: "=EF=80=A3"; }

.fa-flag::before { content: "=EF=80=A4"; }

.fa-headphones::before { content: "=EF=80=A5"; }

.fa-volume-off::before { content: "=EF=80=A6"; }

.fa-volume-down::before { content: "=EF=80=A7"; }

.fa-volume-up::before { content: "=EF=80=A8"; }

.fa-qrcode::before { content: "=EF=80=A9"; }

.fa-barcode::before { content: "=EF=80=AA"; }

.fa-tag::before { content: "=EF=80=AB"; }

.fa-tags::before { content: "=EF=80=AC"; }

.fa-book::before { content: "=EF=80=AD"; }

.fa-bookmark::before { content: "=EF=80=AE"; }

.fa-print::before { content: "=EF=80=AF"; }

.fa-camera::before { content: "=EF=80=B0"; }

.fa-font::before { content: "=EF=80=B1"; }

.fa-bold::before { content: "=EF=80=B2"; }

.fa-italic::before { content: "=EF=80=B3"; }

.fa-text-height::before { content: "=EF=80=B4"; }

.fa-text-width::before { content: "=EF=80=B5"; }

.fa-align-left::before { content: "=EF=80=B6"; }

.fa-align-center::before { content: "=EF=80=B7"; }

.fa-align-right::before { content: "=EF=80=B8"; }

.fa-align-justify::before { content: "=EF=80=B9"; }

.fa-list::before { content: "=EF=80=BA"; }

.fa-dedent::before, .fa-outdent::before { content: "=EF=80=BB"; }

.fa-indent::before { content: "=EF=80=BC"; }

.fa-video-camera::before { content: "=EF=80=BD"; }

.fa-photo::before, .fa-image::before, .fa-picture-o::before { content: "=EF=
=80=BE"; }

.fa-pencil::before { content: "=EF=81=80"; }

.fa-map-marker::before { content: "=EF=81=81"; }

.fa-adjust::before { content: "=EF=81=82"; }

.fa-tint::before { content: "=EF=81=83"; }

.fa-edit::before, .fa-pencil-square-o::before { content: "=EF=81=84"; }

.fa-share-square-o::before { content: "=EF=81=85"; }

.fa-check-square-o::before { content: "=EF=81=86"; }

.fa-arrows::before { content: "=EF=81=87"; }

.fa-step-backward::before { content: "=EF=81=88"; }

.fa-fast-backward::before { content: "=EF=81=89"; }

.fa-backward::before { content: "=EF=81=8A"; }

.fa-play::before { content: "=EF=81=8B"; }

.fa-pause::before { content: "=EF=81=8C"; }

.fa-stop::before { content: "=EF=81=8D"; }

.fa-forward::before { content: "=EF=81=8E"; }

.fa-fast-forward::before { content: "=EF=81=90"; }

.fa-step-forward::before { content: "=EF=81=91"; }

.fa-eject::before { content: "=EF=81=92"; }

.fa-chevron-left::before { content: "=EF=81=93"; }

.fa-chevron-right::before { content: "=EF=81=94"; }

.fa-plus-circle::before { content: "=EF=81=95"; }

.fa-minus-circle::before { content: "=EF=81=96"; }

.fa-times-circle::before { content: "=EF=81=97"; }

.fa-check-circle::before { content: "=EF=81=98"; }

.fa-question-circle::before { content: "=EF=81=99"; }

.fa-info-circle::before { content: "=EF=81=9A"; }

.fa-crosshairs::before { content: "=EF=81=9B"; }

.fa-times-circle-o::before { content: "=EF=81=9C"; }

.fa-check-circle-o::before { content: "=EF=81=9D"; }

.fa-ban::before { content: "=EF=81=9E"; }

.fa-arrow-left::before { content: "=EF=81=A0"; }

.fa-arrow-right::before { content: "=EF=81=A1"; }

.fa-arrow-up::before { content: "=EF=81=A2"; }

.fa-arrow-down::before { content: "=EF=81=A3"; }

.fa-mail-forward::before, .fa-share::before { content: "=EF=81=A4"; }

.fa-expand::before { content: "=EF=81=A5"; }

.fa-compress::before { content: "=EF=81=A6"; }

.fa-plus::before { content: "=EF=81=A7"; }

.fa-minus::before { content: "=EF=81=A8"; }

.fa-asterisk::before { content: "=EF=81=A9"; }

.fa-exclamation-circle::before { content: "=EF=81=AA"; }

.fa-gift::before { content: "=EF=81=AB"; }

.fa-leaf::before { content: "=EF=81=AC"; }

.fa-fire::before { content: "=EF=81=AD"; }

.fa-eye::before { content: "=EF=81=AE"; }

.fa-eye-slash::before { content: "=EF=81=B0"; }

.fa-warning::before, .fa-exclamation-triangle::before { content: "=EF=81=B1=
"; }

.fa-plane::before { content: "=EF=81=B2"; }

.fa-calendar::before { content: "=EF=81=B3"; }

.fa-random::before { content: "=EF=81=B4"; }

.fa-comment::before { content: "=EF=81=B5"; }

.fa-magnet::before { content: "=EF=81=B6"; }

.fa-chevron-up::before { content: "=EF=81=B7"; }

.fa-chevron-down::before { content: "=EF=81=B8"; }

.fa-retweet::before { content: "=EF=81=B9"; }

.fa-shopping-cart::before { content: "=EF=81=BA"; }

.fa-folder::before { content: "=EF=81=BB"; }

.fa-folder-open::before { content: "=EF=81=BC"; }

.fa-arrows-v::before { content: "=EF=81=BD"; }

.fa-arrows-h::before { content: "=EF=81=BE"; }

.fa-bar-chart-o::before, .fa-bar-chart::before { content: "=EF=82=80"; }

.fa-twitter-square::before { content: "=EF=82=81"; }

.fa-facebook-square::before { content: "=EF=82=82"; }

.fa-camera-retro::before { content: "=EF=82=83"; }

.fa-key::before { content: "=EF=82=84"; }

.fa-gears::before, .fa-cogs::before { content: "=EF=82=85"; }

.fa-comments::before { content: "=EF=82=86"; }

.fa-thumbs-o-up::before { content: "=EF=82=87"; }

.fa-thumbs-o-down::before { content: "=EF=82=88"; }

.fa-star-half::before { content: "=EF=82=89"; }

.fa-heart-o::before { content: "=EF=82=8A"; }

.fa-sign-out::before { content: "=EF=82=8B"; }

.fa-linkedin-square::before { content: "=EF=82=8C"; }

.fa-thumb-tack::before { content: "=EF=82=8D"; }

.fa-external-link::before { content: "=EF=82=8E"; }

.fa-sign-in::before { content: "=EF=82=90"; }

.fa-trophy::before { content: "=EF=82=91"; }

.fa-github-square::before { content: "=EF=82=92"; }

.fa-upload::before { content: "=EF=82=93"; }

.fa-lemon-o::before { content: "=EF=82=94"; }

.fa-phone::before { content: "=EF=82=95"; }

.fa-square-o::before { content: "=EF=82=96"; }

.fa-bookmark-o::before { content: "=EF=82=97"; }

.fa-phone-square::before { content: "=EF=82=98"; }

.fa-twitter::before { content: "=EF=82=99"; }

.fa-facebook-f::before, .fa-facebook::before { content: "=EF=82=9A"; }

.fa-github::before { content: "=EF=82=9B"; }

.fa-unlock::before { content: "=EF=82=9C"; }

.fa-credit-card::before { content: "=EF=82=9D"; }

.fa-feed::before, .fa-rss::before { content: "=EF=82=9E"; }

.fa-hdd-o::before { content: "=EF=82=A0"; }

.fa-bullhorn::before { content: "=EF=82=A1"; }

.fa-bell::before { content: "=EF=83=B3"; }

.fa-certificate::before { content: "=EF=82=A3"; }

.fa-hand-o-right::before { content: "=EF=82=A4"; }

.fa-hand-o-left::before { content: "=EF=82=A5"; }

.fa-hand-o-up::before { content: "=EF=82=A6"; }

.fa-hand-o-down::before { content: "=EF=82=A7"; }

.fa-arrow-circle-left::before { content: "=EF=82=A8"; }

.fa-arrow-circle-right::before { content: "=EF=82=A9"; }

.fa-arrow-circle-up::before { content: "=EF=82=AA"; }

.fa-arrow-circle-down::before { content: "=EF=82=AB"; }

.fa-globe::before { content: "=EF=82=AC"; }

.fa-wrench::before { content: "=EF=82=AD"; }

.fa-tasks::before { content: "=EF=82=AE"; }

.fa-filter::before { content: "=EF=82=B0"; }

.fa-briefcase::before { content: "=EF=82=B1"; }

.fa-arrows-alt::before { content: "=EF=82=B2"; }

.fa-group::before, .fa-users::before { content: "=EF=83=80"; }

.fa-chain::before, .fa-link::before { content: "=EF=83=81"; }

.fa-cloud::before { content: "=EF=83=82"; }

.fa-flask::before { content: "=EF=83=83"; }

.fa-cut::before, .fa-scissors::before { content: "=EF=83=84"; }

.fa-copy::before, .fa-files-o::before { content: "=EF=83=85"; }

.fa-paperclip::before { content: "=EF=83=86"; }

.fa-save::before, .fa-floppy-o::before { content: "=EF=83=87"; }

.fa-square::before { content: "=EF=83=88"; }

.fa-navicon::before, .fa-reorder::before, .fa-bars::before { content: "=EF=
=83=89"; }

.fa-list-ul::before { content: "=EF=83=8A"; }

.fa-list-ol::before { content: "=EF=83=8B"; }

.fa-strikethrough::before { content: "=EF=83=8C"; }

.fa-underline::before { content: "=EF=83=8D"; }

.fa-table::before { content: "=EF=83=8E"; }

.fa-magic::before { content: "=EF=83=90"; }

.fa-truck::before { content: "=EF=83=91"; }

.fa-pinterest::before { content: "=EF=83=92"; }

.fa-pinterest-square::before { content: "=EF=83=93"; }

.fa-google-plus-square::before { content: "=EF=83=94"; }

.fa-google-plus::before { content: "=EF=83=95"; }

.fa-money::before { content: "=EF=83=96"; }

.fa-caret-down::before { content: "=EF=83=97"; }

.fa-caret-up::before { content: "=EF=83=98"; }

.fa-caret-left::before { content: "=EF=83=99"; }

.fa-caret-right::before { content: "=EF=83=9A"; }

.fa-columns::before { content: "=EF=83=9B"; }

.fa-unsorted::before, .fa-sort::before { content: "=EF=83=9C"; }

.fa-sort-down::before, .fa-sort-desc::before { content: "=EF=83=9D"; }

.fa-sort-up::before, .fa-sort-asc::before { content: "=EF=83=9E"; }

.fa-envelope::before { content: "=EF=83=A0"; }

.fa-linkedin::before { content: "=EF=83=A1"; }

.fa-rotate-left::before, .fa-undo::before { content: "=EF=83=A2"; }

.fa-legal::before, .fa-gavel::before { content: "=EF=83=A3"; }

.fa-dashboard::before, .fa-tachometer::before { content: "=EF=83=A4"; }

.fa-comment-o::before { content: "=EF=83=A5"; }

.fa-comments-o::before { content: "=EF=83=A6"; }

.fa-flash::before, .fa-bolt::before { content: "=EF=83=A7"; }

.fa-sitemap::before { content: "=EF=83=A8"; }

.fa-umbrella::before { content: "=EF=83=A9"; }

.fa-paste::before, .fa-clipboard::before { content: "=EF=83=AA"; }

.fa-lightbulb-o::before { content: "=EF=83=AB"; }

.fa-exchange::before { content: "=EF=83=AC"; }

.fa-cloud-download::before { content: "=EF=83=AD"; }

.fa-cloud-upload::before { content: "=EF=83=AE"; }

.fa-user-md::before { content: "=EF=83=B0"; }

.fa-stethoscope::before { content: "=EF=83=B1"; }

.fa-suitcase::before { content: "=EF=83=B2"; }

.fa-bell-o::before { content: "=EF=82=A2"; }

.fa-coffee::before { content: "=EF=83=B4"; }

.fa-cutlery::before { content: "=EF=83=B5"; }

.fa-file-text-o::before { content: "=EF=83=B6"; }

.fa-building-o::before { content: "=EF=83=B7"; }

.fa-hospital-o::before { content: "=EF=83=B8"; }

.fa-ambulance::before { content: "=EF=83=B9"; }

.fa-medkit::before { content: "=EF=83=BA"; }

.fa-fighter-jet::before { content: "=EF=83=BB"; }

.fa-beer::before { content: "=EF=83=BC"; }

.fa-h-square::before { content: "=EF=83=BD"; }

.fa-plus-square::before { content: "=EF=83=BE"; }

.fa-angle-double-left::before { content: "=EF=84=80"; }

.fa-angle-double-right::before { content: "=EF=84=81"; }

.fa-angle-double-up::before { content: "=EF=84=82"; }

.fa-angle-double-down::before { content: "=EF=84=83"; }

.fa-angle-left::before { content: "=EF=84=84"; }

.fa-angle-right::before { content: "=EF=84=85"; }

.fa-angle-up::before { content: "=EF=84=86"; }

.fa-angle-down::before { content: "=EF=84=87"; }

.fa-desktop::before { content: "=EF=84=88"; }

.fa-laptop::before { content: "=EF=84=89"; }

.fa-tablet::before { content: "=EF=84=8A"; }

.fa-mobile-phone::before, .fa-mobile::before { content: "=EF=84=8B"; }

.fa-circle-o::before { content: "=EF=84=8C"; }

.fa-quote-left::before { content: "=EF=84=8D"; }

.fa-quote-right::before { content: "=EF=84=8E"; }

.fa-spinner::before { content: "=EF=84=90"; }

.fa-circle::before { content: "=EF=84=91"; }

.fa-mail-reply::before, .fa-reply::before { content: "=EF=84=92"; }

.fa-github-alt::before { content: "=EF=84=93"; }

.fa-folder-o::before { content: "=EF=84=94"; }

.fa-folder-open-o::before { content: "=EF=84=95"; }

.fa-smile-o::before { content: "=EF=84=98"; }

.fa-frown-o::before { content: "=EF=84=99"; }

.fa-meh-o::before { content: "=EF=84=9A"; }

.fa-gamepad::before { content: "=EF=84=9B"; }

.fa-keyboard-o::before { content: "=EF=84=9C"; }

.fa-flag-o::before { content: "=EF=84=9D"; }

.fa-flag-checkered::before { content: "=EF=84=9E"; }

.fa-terminal::before { content: "=EF=84=A0"; }

.fa-code::before { content: "=EF=84=A1"; }

.fa-mail-reply-all::before, .fa-reply-all::before { content: "=EF=84=A2"; }

.fa-star-half-empty::before, .fa-star-half-full::before, .fa-star-half-o::b=
efore { content: "=EF=84=A3"; }

.fa-location-arrow::before { content: "=EF=84=A4"; }

.fa-crop::before { content: "=EF=84=A5"; }

.fa-code-fork::before { content: "=EF=84=A6"; }

.fa-unlink::before, .fa-chain-broken::before { content: "=EF=84=A7"; }

.fa-question::before { content: "=EF=84=A8"; }

.fa-info::before { content: "=EF=84=A9"; }

.fa-exclamation::before { content: "=EF=84=AA"; }

.fa-superscript::before { content: "=EF=84=AB"; }

.fa-subscript::before { content: "=EF=84=AC"; }

.fa-eraser::before { content: "=EF=84=AD"; }

.fa-puzzle-piece::before { content: "=EF=84=AE"; }

.fa-microphone::before { content: "=EF=84=B0"; }

.fa-microphone-slash::before { content: "=EF=84=B1"; }

.fa-shield::before { content: "=EF=84=B2"; }

.fa-calendar-o::before { content: "=EF=84=B3"; }

.fa-fire-extinguisher::before { content: "=EF=84=B4"; }

.fa-rocket::before { content: "=EF=84=B5"; }

.fa-maxcdn::before { content: "=EF=84=B6"; }

.fa-chevron-circle-left::before { content: "=EF=84=B7"; }

.fa-chevron-circle-right::before { content: "=EF=84=B8"; }

.fa-chevron-circle-up::before { content: "=EF=84=B9"; }

.fa-chevron-circle-down::before { content: "=EF=84=BA"; }

.fa-html5::before { content: "=EF=84=BB"; }

.fa-css3::before { content: "=EF=84=BC"; }

.fa-anchor::before { content: "=EF=84=BD"; }

.fa-unlock-alt::before { content: "=EF=84=BE"; }

.fa-bullseye::before { content: "=EF=85=80"; }

.fa-ellipsis-h::before { content: "=EF=85=81"; }

.fa-ellipsis-v::before { content: "=EF=85=82"; }

.fa-rss-square::before { content: "=EF=85=83"; }

.fa-play-circle::before { content: "=EF=85=84"; }

.fa-ticket::before { content: "=EF=85=85"; }

.fa-minus-square::before { content: "=EF=85=86"; }

.fa-minus-square-o::before { content: "=EF=85=87"; }

.fa-level-up::before { content: "=EF=85=88"; }

.fa-level-down::before { content: "=EF=85=89"; }

.fa-check-square::before { content: "=EF=85=8A"; }

.fa-pencil-square::before { content: "=EF=85=8B"; }

.fa-external-link-square::before { content: "=EF=85=8C"; }

.fa-share-square::before { content: "=EF=85=8D"; }

.fa-compass::before { content: "=EF=85=8E"; }

.fa-toggle-down::before, .fa-caret-square-o-down::before { content: "=EF=85=
=90"; }

.fa-toggle-up::before, .fa-caret-square-o-up::before { content: "=EF=85=91"=
; }

.fa-toggle-right::before, .fa-caret-square-o-right::before { content: "=EF=
=85=92"; }

.fa-euro::before, .fa-eur::before { content: "=EF=85=93"; }

.fa-gbp::before { content: "=EF=85=94"; }

.fa-dollar::before, .fa-usd::before { content: "=EF=85=95"; }

.fa-rupee::before, .fa-inr::before { content: "=EF=85=96"; }

.fa-cny::before, .fa-rmb::before, .fa-yen::before, .fa-jpy::before { conten=
t: "=EF=85=97"; }

.fa-ruble::before, .fa-rouble::before, .fa-rub::before { content: "=EF=85=
=98"; }

.fa-won::before, .fa-krw::before { content: "=EF=85=99"; }

.fa-bitcoin::before, .fa-btc::before { content: "=EF=85=9A"; }

.fa-file::before { content: "=EF=85=9B"; }

.fa-file-text::before { content: "=EF=85=9C"; }

.fa-sort-alpha-asc::before { content: "=EF=85=9D"; }

.fa-sort-alpha-desc::before { content: "=EF=85=9E"; }

.fa-sort-amount-asc::before { content: "=EF=85=A0"; }

.fa-sort-amount-desc::before { content: "=EF=85=A1"; }

.fa-sort-numeric-asc::before { content: "=EF=85=A2"; }

.fa-sort-numeric-desc::before { content: "=EF=85=A3"; }

.fa-thumbs-up::before { content: "=EF=85=A4"; }

.fa-thumbs-down::before { content: "=EF=85=A5"; }

.fa-youtube-square::before { content: "=EF=85=A6"; }

.fa-youtube::before { content: "=EF=85=A7"; }

.fa-xing::before { content: "=EF=85=A8"; }

.fa-xing-square::before { content: "=EF=85=A9"; }

.fa-youtube-play::before { content: "=EF=85=AA"; }

.fa-dropbox::before { content: "=EF=85=AB"; }

.fa-stack-overflow::before { content: "=EF=85=AC"; }

.fa-instagram::before { content: "=EF=85=AD"; }

.fa-flickr::before { content: "=EF=85=AE"; }

.fa-adn::before { content: "=EF=85=B0"; }

.fa-bitbucket::before { content: "=EF=85=B1"; }

.fa-bitbucket-square::before { content: "=EF=85=B2"; }

.fa-tumblr::before { content: "=EF=85=B3"; }

.fa-tumblr-square::before { content: "=EF=85=B4"; }

.fa-long-arrow-down::before { content: "=EF=85=B5"; }

.fa-long-arrow-up::before { content: "=EF=85=B6"; }

.fa-long-arrow-left::before { content: "=EF=85=B7"; }

.fa-long-arrow-right::before { content: "=EF=85=B8"; }

.fa-apple::before { content: "=EF=85=B9"; }

.fa-windows::before { content: "=EF=85=BA"; }

.fa-android::before { content: "=EF=85=BB"; }

.fa-linux::before { content: "=EF=85=BC"; }

.fa-dribbble::before { content: "=EF=85=BD"; }

.fa-skype::before { content: "=EF=85=BE"; }

.fa-foursquare::before { content: "=EF=86=80"; }

.fa-trello::before { content: "=EF=86=81"; }

.fa-female::before { content: "=EF=86=82"; }

.fa-male::before { content: "=EF=86=83"; }

.fa-gittip::before, .fa-gratipay::before { content: "=EF=86=84"; }

.fa-sun-o::before { content: "=EF=86=85"; }

.fa-moon-o::before { content: "=EF=86=86"; }

.fa-archive::before { content: "=EF=86=87"; }

.fa-bug::before { content: "=EF=86=88"; }

.fa-vk::before { content: "=EF=86=89"; }

.fa-weibo::before { content: "=EF=86=8A"; }

.fa-renren::before { content: "=EF=86=8B"; }

.fa-pagelines::before { content: "=EF=86=8C"; }

.fa-stack-exchange::before { content: "=EF=86=8D"; }

.fa-arrow-circle-o-right::before { content: "=EF=86=8E"; }

.fa-arrow-circle-o-left::before { content: "=EF=86=90"; }

.fa-toggle-left::before, .fa-caret-square-o-left::before { content: "=EF=86=
=91"; }

.fa-dot-circle-o::before { content: "=EF=86=92"; }

.fa-wheelchair::before { content: "=EF=86=93"; }

.fa-vimeo-square::before { content: "=EF=86=94"; }

.fa-turkish-lira::before, .fa-try::before { content: "=EF=86=95"; }

.fa-plus-square-o::before { content: "=EF=86=96"; }

.fa-space-shuttle::before { content: "=EF=86=97"; }

.fa-slack::before { content: "=EF=86=98"; }

.fa-envelope-square::before { content: "=EF=86=99"; }

.fa-wordpress::before { content: "=EF=86=9A"; }

.fa-openid::before { content: "=EF=86=9B"; }

.fa-institution::before, .fa-bank::before, .fa-university::before { content=
: "=EF=86=9C"; }

.fa-mortar-board::before, .fa-graduation-cap::before { content: "=EF=86=9D"=
; }

.fa-yahoo::before { content: "=EF=86=9E"; }

.fa-google::before { content: "=EF=86=A0"; }

.fa-reddit::before { content: "=EF=86=A1"; }

.fa-reddit-square::before { content: "=EF=86=A2"; }

.fa-stumbleupon-circle::before { content: "=EF=86=A3"; }

.fa-stumbleupon::before { content: "=EF=86=A4"; }

.fa-delicious::before { content: "=EF=86=A5"; }

.fa-digg::before { content: "=EF=86=A6"; }

.fa-pied-piper-pp::before { content: "=EF=86=A7"; }

.fa-pied-piper-alt::before { content: "=EF=86=A8"; }

.fa-drupal::before { content: "=EF=86=A9"; }

.fa-joomla::before { content: "=EF=86=AA"; }

.fa-language::before { content: "=EF=86=AB"; }

.fa-fax::before { content: "=EF=86=AC"; }

.fa-building::before { content: "=EF=86=AD"; }

.fa-child::before { content: "=EF=86=AE"; }

.fa-paw::before { content: "=EF=86=B0"; }

.fa-spoon::before { content: "=EF=86=B1"; }

.fa-cube::before { content: "=EF=86=B2"; }

.fa-cubes::before { content: "=EF=86=B3"; }

.fa-behance::before { content: "=EF=86=B4"; }

.fa-behance-square::before { content: "=EF=86=B5"; }

.fa-steam::before { content: "=EF=86=B6"; }

.fa-steam-square::before { content: "=EF=86=B7"; }

.fa-recycle::before { content: "=EF=86=B8"; }

.fa-automobile::before, .fa-car::before { content: "=EF=86=B9"; }

.fa-cab::before, .fa-taxi::before { content: "=EF=86=BA"; }

.fa-tree::before { content: "=EF=86=BB"; }

.fa-spotify::before { content: "=EF=86=BC"; }

.fa-deviantart::before { content: "=EF=86=BD"; }

.fa-soundcloud::before { content: "=EF=86=BE"; }

.fa-database::before { content: "=EF=87=80"; }

.fa-file-pdf-o::before { content: "=EF=87=81"; }

.fa-file-word-o::before { content: "=EF=87=82"; }

.fa-file-excel-o::before { content: "=EF=87=83"; }

.fa-file-powerpoint-o::before { content: "=EF=87=84"; }

.fa-file-photo-o::before, .fa-file-picture-o::before, .fa-file-image-o::bef=
ore { content: "=EF=87=85"; }

.fa-file-zip-o::before, .fa-file-archive-o::before { content: "=EF=87=86"; =
}

.fa-file-sound-o::before, .fa-file-audio-o::before { content: "=EF=87=87"; =
}

.fa-file-movie-o::before, .fa-file-video-o::before { content: "=EF=87=88"; =
}

.fa-file-code-o::before { content: "=EF=87=89"; }

.fa-vine::before { content: "=EF=87=8A"; }

.fa-codepen::before { content: "=EF=87=8B"; }

.fa-jsfiddle::before { content: "=EF=87=8C"; }

.fa-life-bouy::before, .fa-life-buoy::before, .fa-life-saver::before, .fa-s=
upport::before, .fa-life-ring::before { content: "=EF=87=8D"; }

.fa-circle-o-notch::before { content: "=EF=87=8E"; }

.fa-ra::before, .fa-resistance::before, .fa-rebel::before { content: "=EF=
=87=90"; }

.fa-ge::before, .fa-empire::before { content: "=EF=87=91"; }

.fa-git-square::before { content: "=EF=87=92"; }

.fa-git::before { content: "=EF=87=93"; }

.fa-y-combinator-square::before, .fa-yc-square::before, .fa-hacker-news::be=
fore { content: "=EF=87=94"; }

.fa-tencent-weibo::before { content: "=EF=87=95"; }

.fa-qq::before { content: "=EF=87=96"; }

.fa-wechat::before, .fa-weixin::before { content: "=EF=87=97"; }

.fa-send::before, .fa-paper-plane::before { content: "=EF=87=98"; }

.fa-send-o::before, .fa-paper-plane-o::before { content: "=EF=87=99"; }

.fa-history::before { content: "=EF=87=9A"; }

.fa-circle-thin::before { content: "=EF=87=9B"; }

.fa-header::before { content: "=EF=87=9C"; }

.fa-paragraph::before { content: "=EF=87=9D"; }

.fa-sliders::before { content: "=EF=87=9E"; }

.fa-share-alt::before { content: "=EF=87=A0"; }

.fa-share-alt-square::before { content: "=EF=87=A1"; }

.fa-bomb::before { content: "=EF=87=A2"; }

.fa-soccer-ball-o::before, .fa-futbol-o::before { content: "=EF=87=A3"; }

.fa-tty::before { content: "=EF=87=A4"; }

.fa-binoculars::before { content: "=EF=87=A5"; }

.fa-plug::before { content: "=EF=87=A6"; }

.fa-slideshare::before { content: "=EF=87=A7"; }

.fa-twitch::before { content: "=EF=87=A8"; }

.fa-yelp::before { content: "=EF=87=A9"; }

.fa-newspaper-o::before { content: "=EF=87=AA"; }

.fa-wifi::before { content: "=EF=87=AB"; }

.fa-calculator::before { content: "=EF=87=AC"; }

.fa-paypal::before { content: "=EF=87=AD"; }

.fa-google-wallet::before { content: "=EF=87=AE"; }

.fa-cc-visa::before { content: "=EF=87=B0"; }

.fa-cc-mastercard::before { content: "=EF=87=B1"; }

.fa-cc-discover::before { content: "=EF=87=B2"; }

.fa-cc-amex::before { content: "=EF=87=B3"; }

.fa-cc-paypal::before { content: "=EF=87=B4"; }

.fa-cc-stripe::before { content: "=EF=87=B5"; }

.fa-bell-slash::before { content: "=EF=87=B6"; }

.fa-bell-slash-o::before { content: "=EF=87=B7"; }

.fa-trash::before { content: "=EF=87=B8"; }

.fa-copyright::before { content: "=EF=87=B9"; }

.fa-at::before { content: "=EF=87=BA"; }

.fa-eyedropper::before { content: "=EF=87=BB"; }

.fa-paint-brush::before { content: "=EF=87=BC"; }

.fa-birthday-cake::before { content: "=EF=87=BD"; }

.fa-area-chart::before { content: "=EF=87=BE"; }

.fa-pie-chart::before { content: "=EF=88=80"; }

.fa-line-chart::before { content: "=EF=88=81"; }

.fa-lastfm::before { content: "=EF=88=82"; }

.fa-lastfm-square::before { content: "=EF=88=83"; }

.fa-toggle-off::before { content: "=EF=88=84"; }

.fa-toggle-on::before { content: "=EF=88=85"; }

.fa-bicycle::before { content: "=EF=88=86"; }

.fa-bus::before { content: "=EF=88=87"; }

.fa-ioxhost::before { content: "=EF=88=88"; }

.fa-angellist::before { content: "=EF=88=89"; }

.fa-cc::before { content: "=EF=88=8A"; }

.fa-shekel::before, .fa-sheqel::before, .fa-ils::before { content: "=EF=88=
=8B"; }

.fa-meanpath::before { content: "=EF=88=8C"; }

.fa-buysellads::before { content: "=EF=88=8D"; }

.fa-connectdevelop::before { content: "=EF=88=8E"; }

.fa-dashcube::before { content: "=EF=88=90"; }

.fa-forumbee::before { content: "=EF=88=91"; }

.fa-leanpub::before { content: "=EF=88=92"; }

.fa-sellsy::before { content: "=EF=88=93"; }

.fa-shirtsinbulk::before { content: "=EF=88=94"; }

.fa-simplybuilt::before { content: "=EF=88=95"; }

.fa-skyatlas::before { content: "=EF=88=96"; }

.fa-cart-plus::before { content: "=EF=88=97"; }

.fa-cart-arrow-down::before { content: "=EF=88=98"; }

.fa-diamond::before { content: "=EF=88=99"; }

.fa-ship::before { content: "=EF=88=9A"; }

.fa-user-secret::before { content: "=EF=88=9B"; }

.fa-motorcycle::before { content: "=EF=88=9C"; }

.fa-street-view::before { content: "=EF=88=9D"; }

.fa-heartbeat::before { content: "=EF=88=9E"; }

.fa-venus::before { content: "=EF=88=A1"; }

.fa-mars::before { content: "=EF=88=A2"; }

.fa-mercury::before { content: "=EF=88=A3"; }

.fa-intersex::before, .fa-transgender::before { content: "=EF=88=A4"; }

.fa-transgender-alt::before { content: "=EF=88=A5"; }

.fa-venus-double::before { content: "=EF=88=A6"; }

.fa-mars-double::before { content: "=EF=88=A7"; }

.fa-venus-mars::before { content: "=EF=88=A8"; }

.fa-mars-stroke::before { content: "=EF=88=A9"; }

.fa-mars-stroke-v::before { content: "=EF=88=AA"; }

.fa-mars-stroke-h::before { content: "=EF=88=AB"; }

.fa-neuter::before { content: "=EF=88=AC"; }

.fa-genderless::before { content: "=EF=88=AD"; }

.fa-facebook-official::before { content: "=EF=88=B0"; }

.fa-pinterest-p::before { content: "=EF=88=B1"; }

.fa-whatsapp::before { content: "=EF=88=B2"; }

.fa-server::before { content: "=EF=88=B3"; }

.fa-user-plus::before { content: "=EF=88=B4"; }

.fa-user-times::before { content: "=EF=88=B5"; }

.fa-hotel::before, .fa-bed::before { content: "=EF=88=B6"; }

.fa-viacoin::before { content: "=EF=88=B7"; }

.fa-train::before { content: "=EF=88=B8"; }

.fa-subway::before { content: "=EF=88=B9"; }

.fa-medium::before { content: "=EF=88=BA"; }

.fa-yc::before, .fa-y-combinator::before { content: "=EF=88=BB"; }

.fa-optin-monster::before { content: "=EF=88=BC"; }

.fa-opencart::before { content: "=EF=88=BD"; }

.fa-expeditedssl::before { content: "=EF=88=BE"; }

.fa-battery-4::before, .fa-battery::before, .fa-battery-full::before { cont=
ent: "=EF=89=80"; }

.fa-battery-3::before, .fa-battery-three-quarters::before { content: "=EF=
=89=81"; }

.fa-battery-2::before, .fa-battery-half::before { content: "=EF=89=82"; }

.fa-battery-1::before, .fa-battery-quarter::before { content: "=EF=89=83"; =
}

.fa-battery-0::before, .fa-battery-empty::before { content: "=EF=89=84"; }

.fa-mouse-pointer::before { content: "=EF=89=85"; }

.fa-i-cursor::before { content: "=EF=89=86"; }

.fa-object-group::before { content: "=EF=89=87"; }

.fa-object-ungroup::before { content: "=EF=89=88"; }

.fa-sticky-note::before { content: "=EF=89=89"; }

.fa-sticky-note-o::before { content: "=EF=89=8A"; }

.fa-cc-jcb::before { content: "=EF=89=8B"; }

.fa-cc-diners-club::before { content: "=EF=89=8C"; }

.fa-clone::before { content: "=EF=89=8D"; }

.fa-balance-scale::before { content: "=EF=89=8E"; }

.fa-hourglass-o::before { content: "=EF=89=90"; }

.fa-hourglass-1::before, .fa-hourglass-start::before { content: "=EF=89=91"=
; }

.fa-hourglass-2::before, .fa-hourglass-half::before { content: "=EF=89=92";=
 }

.fa-hourglass-3::before, .fa-hourglass-end::before { content: "=EF=89=93"; =
}

.fa-hourglass::before { content: "=EF=89=94"; }

.fa-hand-grab-o::before, .fa-hand-rock-o::before { content: "=EF=89=95"; }

.fa-hand-stop-o::before, .fa-hand-paper-o::before { content: "=EF=89=96"; }

.fa-hand-scissors-o::before { content: "=EF=89=97"; }

.fa-hand-lizard-o::before { content: "=EF=89=98"; }

.fa-hand-spock-o::before { content: "=EF=89=99"; }

.fa-hand-pointer-o::before { content: "=EF=89=9A"; }

.fa-hand-peace-o::before { content: "=EF=89=9B"; }

.fa-trademark::before { content: "=EF=89=9C"; }

.fa-registered::before { content: "=EF=89=9D"; }

.fa-creative-commons::before { content: "=EF=89=9E"; }

.fa-gg::before { content: "=EF=89=A0"; }

.fa-gg-circle::before { content: "=EF=89=A1"; }

.fa-tripadvisor::before { content: "=EF=89=A2"; }

.fa-odnoklassniki::before { content: "=EF=89=A3"; }

.fa-odnoklassniki-square::before { content: "=EF=89=A4"; }

.fa-get-pocket::before { content: "=EF=89=A5"; }

.fa-wikipedia-w::before { content: "=EF=89=A6"; }

.fa-safari::before { content: "=EF=89=A7"; }

.fa-chrome::before { content: "=EF=89=A8"; }

.fa-firefox::before { content: "=EF=89=A9"; }

.fa-opera::before { content: "=EF=89=AA"; }

.fa-internet-explorer::before { content: "=EF=89=AB"; }

.fa-tv::before, .fa-television::before { content: "=EF=89=AC"; }

.fa-contao::before { content: "=EF=89=AD"; }

.fa-500px::before { content: "=EF=89=AE"; }

.fa-amazon::before { content: "=EF=89=B0"; }

.fa-calendar-plus-o::before { content: "=EF=89=B1"; }

.fa-calendar-minus-o::before { content: "=EF=89=B2"; }

.fa-calendar-times-o::before { content: "=EF=89=B3"; }

.fa-calendar-check-o::before { content: "=EF=89=B4"; }

.fa-industry::before { content: "=EF=89=B5"; }

.fa-map-pin::before { content: "=EF=89=B6"; }

.fa-map-signs::before { content: "=EF=89=B7"; }

.fa-map-o::before { content: "=EF=89=B8"; }

.fa-map::before { content: "=EF=89=B9"; }

.fa-commenting::before { content: "=EF=89=BA"; }

.fa-commenting-o::before { content: "=EF=89=BB"; }

.fa-houzz::before { content: "=EF=89=BC"; }

.fa-vimeo::before { content: "=EF=89=BD"; }

.fa-black-tie::before { content: "=EF=89=BE"; }

.fa-fonticons::before { content: "=EF=8A=80"; }

.fa-reddit-alien::before { content: "=EF=8A=81"; }

.fa-edge::before { content: "=EF=8A=82"; }

.fa-credit-card-alt::before { content: "=EF=8A=83"; }

.fa-codiepie::before { content: "=EF=8A=84"; }

.fa-modx::before { content: "=EF=8A=85"; }

.fa-fort-awesome::before { content: "=EF=8A=86"; }

.fa-usb::before { content: "=EF=8A=87"; }

.fa-product-hunt::before { content: "=EF=8A=88"; }

.fa-mixcloud::before { content: "=EF=8A=89"; }

.fa-scribd::before { content: "=EF=8A=8A"; }

.fa-pause-circle::before { content: "=EF=8A=8B"; }

.fa-pause-circle-o::before { content: "=EF=8A=8C"; }

.fa-stop-circle::before { content: "=EF=8A=8D"; }

.fa-stop-circle-o::before { content: "=EF=8A=8E"; }

.fa-shopping-bag::before { content: "=EF=8A=90"; }

.fa-shopping-basket::before { content: "=EF=8A=91"; }

.fa-hashtag::before { content: "=EF=8A=92"; }

.fa-bluetooth::before { content: "=EF=8A=93"; }

.fa-bluetooth-b::before { content: "=EF=8A=94"; }

.fa-percent::before { content: "=EF=8A=95"; }

.fa-gitlab::before { content: "=EF=8A=96"; }

.fa-wpbeginner::before { content: "=EF=8A=97"; }

.fa-wpforms::before { content: "=EF=8A=98"; }

.fa-envira::before { content: "=EF=8A=99"; }

.fa-universal-access::before { content: "=EF=8A=9A"; }

.fa-wheelchair-alt::before { content: "=EF=8A=9B"; }

.fa-question-circle-o::before { content: "=EF=8A=9C"; }

.fa-blind::before { content: "=EF=8A=9D"; }

.fa-audio-description::before { content: "=EF=8A=9E"; }

.fa-volume-control-phone::before { content: "=EF=8A=A0"; }

.fa-braille::before { content: "=EF=8A=A1"; }

.fa-assistive-listening-systems::before { content: "=EF=8A=A2"; }

.fa-asl-interpreting::before, .fa-american-sign-language-interpreting::befo=
re { content: "=EF=8A=A3"; }

.fa-deafness::before, .fa-hard-of-hearing::before, .fa-deaf::before { conte=
nt: "=EF=8A=A4"; }

.fa-glide::before { content: "=EF=8A=A5"; }

.fa-glide-g::before { content: "=EF=8A=A6"; }

.fa-signing::before, .fa-sign-language::before { content: "=EF=8A=A7"; }

.fa-low-vision::before { content: "=EF=8A=A8"; }

.fa-viadeo::before { content: "=EF=8A=A9"; }

.fa-viadeo-square::before { content: "=EF=8A=AA"; }

.fa-snapchat::before { content: "=EF=8A=AB"; }

.fa-snapchat-ghost::before { content: "=EF=8A=AC"; }

.fa-snapchat-square::before { content: "=EF=8A=AD"; }

.fa-pied-piper::before { content: "=EF=8A=AE"; }

.fa-first-order::before { content: "=EF=8A=B0"; }

.fa-yoast::before { content: "=EF=8A=B1"; }

.fa-themeisle::before { content: "=EF=8A=B2"; }

.fa-google-plus-circle::before, .fa-google-plus-official::before { content:=
 "=EF=8A=B3"; }

.fa-fa::before, .fa-font-awesome::before { content: "=EF=8A=B4"; }

.fa-handshake-o::before { content: "=EF=8A=B5"; }

.fa-envelope-open::before { content: "=EF=8A=B6"; }

.fa-envelope-open-o::before { content: "=EF=8A=B7"; }

.fa-linode::before { content: "=EF=8A=B8"; }

.fa-address-book::before { content: "=EF=8A=B9"; }

.fa-address-book-o::before { content: "=EF=8A=BA"; }

.fa-vcard::before, .fa-address-card::before { content: "=EF=8A=BB"; }

.fa-vcard-o::before, .fa-address-card-o::before { content: "=EF=8A=BC"; }

.fa-user-circle::before { content: "=EF=8A=BD"; }

.fa-user-circle-o::before { content: "=EF=8A=BE"; }

.fa-user-o::before { content: "=EF=8B=80"; }

.fa-id-badge::before { content: "=EF=8B=81"; }

.fa-drivers-license::before, .fa-id-card::before { content: "=EF=8B=82"; }

.fa-drivers-license-o::before, .fa-id-card-o::before { content: "=EF=8B=83"=
; }

.fa-quora::before { content: "=EF=8B=84"; }

.fa-free-code-camp::before { content: "=EF=8B=85"; }

.fa-telegram::before { content: "=EF=8B=86"; }

.fa-thermometer-4::before, .fa-thermometer::before, .fa-thermometer-full::b=
efore { content: "=EF=8B=87"; }

.fa-thermometer-3::before, .fa-thermometer-three-quarters::before { content=
: "=EF=8B=88"; }

.fa-thermometer-2::before, .fa-thermometer-half::before { content: "=EF=8B=
=89"; }

.fa-thermometer-1::before, .fa-thermometer-quarter::before { content: "=EF=
=8B=8A"; }

.fa-thermometer-0::before, .fa-thermometer-empty::before { content: "=EF=8B=
=8B"; }

.fa-shower::before { content: "=EF=8B=8C"; }

.fa-bathtub::before, .fa-s15::before, .fa-bath::before { content: "=EF=8B=
=8D"; }

.fa-podcast::before { content: "=EF=8B=8E"; }

.fa-window-maximize::before { content: "=EF=8B=90"; }

.fa-window-minimize::before { content: "=EF=8B=91"; }

.fa-window-restore::before { content: "=EF=8B=92"; }

.fa-times-rectangle::before, .fa-window-close::before { content: "=EF=8B=93=
"; }

.fa-times-rectangle-o::before, .fa-window-close-o::before { content: "=EF=
=8B=94"; }

.fa-bandcamp::before { content: "=EF=8B=95"; }

.fa-grav::before { content: "=EF=8B=96"; }

.fa-etsy::before { content: "=EF=8B=97"; }

.fa-imdb::before { content: "=EF=8B=98"; }

.fa-ravelry::before { content: "=EF=8B=99"; }

.fa-eercast::before { content: "=EF=8B=9A"; }

.fa-microchip::before { content: "=EF=8B=9B"; }

.fa-snowflake-o::before { content: "=EF=8B=9C"; }

.fa-superpowers::before { content: "=EF=8B=9D"; }

.fa-wpexplorer::before { content: "=EF=8B=9E"; }

.fa-meetup::before { content: "=EF=8B=A0"; }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; margin: 0px; overflow: visible; clip: auto; }
------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://groovy-lang.org/fonts/fontawesome-webfont.woff2?v=4.7.0

<!DOCTYPE html>
<!--[if lt IE 7]>      <html class=3D"no-js lt-ie9 lt-ie8 lt-ie7"> <![endif=
]-->
<!--[if IE 7]>         <html class=3D"no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class=3D"no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class=3D"no-js"> <!--<![endif]--><head>
    <meta charset=3D'utf-8'/><meta http-equiv=3D'X-UA-Compatible' content=
=3D'IE=3Dedge'/><meta name=3D'viewport' content=3D'width=3Ddevice-width, in=
itial-scale=3D1'/><title>The Apache Groovy programming language - 404</titl=
e><link href=3D'img/xfavicon.ico.pagespeed.ic.5MuYua7ZOt.png' type=3D'image=
/x-ico' rel=3D'icon'/><link rel=3D'stylesheet' type=3D'text/css' href=3D'cs=
s/A.bootstrap.css+font-awesome.min.css,Mcc.TUcdx_dMQx.css.pagespeed.cf.lx7B=
tOI_OP.css'/><link rel=3D'stylesheet' type=3D'text/css' href=3D'css/A.style=
.css.pagespeed.cf.2iQ5hV7P9B.css'/>
</head><body>
    <div id=3D'fork-me'>
        <a href=3D'https://github.com/apache/groovy'>
            <img style=3D'position: fixed; top: 20px; right: -58px; border:=
 0; z-index: 100; transform: rotate(45deg);' src=3D'/img/xhorizontal-github=
-ribbon.png.pagespeed.ic.Xn2L3BtWF6.png'/>
        </a>
    </div><div id=3D'st-container' class=3D'st-container st-effect-9'>
        <nav class=3D'st-menu st-effect-9' id=3D'menu-12'>
            <h2 class=3D'icon icon-lab'>Socialize</h2><ul>
                <li>
                    <a href=3D'mailing-lists.html' class=3D'icon'><span cla=
ss=3D'fa fa-envelope'></span> Discuss on the mailing-list</a>
                </li><li>
                    <a href=3D'groovy-weekly.html' class=3D'icon'><span cla=
ss=3D'fa fa-envelope-o'></span> Groovy newsletter</a>
                </li><li>
                    <a href=3D'https://twitter.com/ApacheGroovy' class=3D'i=
con'><span class=3D'fa fa-twitter'></span> Groovy on Twitter</a>
                </li><li>
                    <a href=3D'events.html' class=3D'icon'><span class=3D'f=
a fa-calendar'></span> Events and conferences</a>
                </li><li>
                    <a href=3D'https://github.com/apache/groovy' class=3D'i=
con'><span class=3D'fa fa-github'></span> Source code on GitHub</a>
                </li><li>
                    <a href=3D'reporting-issues.html' class=3D'icon'><span =
class=3D'fa fa-bug'></span> Report issues in Jira</a>
                </li><li>
                    <a href=3D'http://stackoverflow.com/questions/tagged/gr=
oovy' class=3D'icon'><span class=3D'fa fa-stack-overflow'></span> Stack Ove=
rflow questions</a>
                </li><li>
                    <a href=3D'http://groovycommunity.com/' class=3D'icon'>=
<span class=3D'fa fa-slack'></span> Slack Community</a>
                </li>
            </ul>
        </nav><div class=3D'st-pusher'>
            <div class=3D'st-content'>
                <div class=3D'st-content-inner'>
                    <!--[if lt IE 7]>
                    <p class=3D"browsehappy">You are using an <strong>outda=
ted</strong> browser. Please <a href=3D"http://browsehappy.com/">upgrade yo=
ur browser</a> to improve your experience.</p>
                <![endif]--><div><div class=3D'navbar navbar-default navbar=
-static-top' role=3D'navigation'>
                            <div class=3D'container'>
                                <div class=3D'navbar-header'>
                                    <button type=3D'button' class=3D'navbar=
-toggle' data-toggle=3D'collapse' data-target=3D'.navbar-collapse'>
                                        <span class=3D'sr-only'></span><spa=
n class=3D'icon-bar'></span><span class=3D'icon-bar'></span><span class=3D'=
icon-bar'></span>
                                    </button><a class=3D'navbar-brand' href=
=3D'index.html'>
                                        <i class=3D'fa fa-star'></i> Apache=
 Groovy
                                    </a>
                                </div><div class=3D'navbar-collapse collaps=
e'>
                                    <ul class=3D'nav navbar-nav navbar-righ=
t'>
                                        <li class=3D''><a href=3D'learn.htm=
l'>Learn</a></li><li class=3D''><a href=3D'documentation.html'>Documentatio=
n</a></li><li class=3D''><a href=3D'https://groovy.apache.org/download.html=
'>Download</a></li><li class=3D''><a href=3D'support.html'>Support</a></li>=
<li class=3D''><a href=3D'https://groovy.apache.org/'>Contribute</a></li><l=
i class=3D''><a href=3D'ecosystem.html'>Ecosystem</a></li><li>
                                            <a data-effect=3D'st-effect-9' =
class=3D'st-trigger' href=3D'#'>Socialize</a>
                                        </li><li class=3D''>
                                            <a href=3D'search.html'>
                                                <i class=3D'fa fa-search'><=
/i>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div><div id=3D'content' class=3D'page-1'><div cla=
ss=3D'row'><div class=3D'row-fluid'><div class=3D'panel panel-danger'><div =
class=3D'panel-heading'>Oops! The page you are looking for does not exist!<=
/div><div class=3D'panel-body'><p>We could not find the page you are lookin=
g for. Maybe you are looking for one of those?</p><ul><li>The <a href=3D'ht=
tps://docs.groovy-lang.org/latest/html/documentation'>reference documentati=
on</a> of the Groovy language.</li><li>The latest <a href=3D'https://docs.g=
roovy-lang.org/latest/html/api'>Javadocs</a> of the language.</li><li>The l=
atest <a href=3D'https://docs.groovy-lang.org/latest/html/gapi'>Groovydocs<=
/a> of the language.</li><li>Description of <a href=3D'https://docs.groovy-=
lang.org/latest/html/groovy-jdk'>the Groovy development kit APIs</a>.</li><=
/ul></div></div></div></div></div><footer id=3D'footer'>
                            <div class=3D'row'>
                                <div class=3D'colset-3-footer'>
                                    <div class=3D'col-1'>
                                        <h1>Groovy</h1><ul>
                                            <li><a href=3D'learn.html'>Lear=
n</a></li><li><a href=3D'documentation.html'>Documentation</a></li><li><a h=
ref=3D'https://groovy.apache.org/download.html'>Download</a></li><li><a hre=
f=3D'support.html'>Support</a></li><li><a href=3D'https://groovy.apache.org=
/'>Contribute</a></li><li><a href=3D'ecosystem.html'>Ecosystem</a></li>
                                        </ul>
                                    </div><div class=3D'col-2'>
                                        <h1>About</h1><ul>
                                            <li><a href=3D'https://github.c=
om/apache/groovy'>Source code</a></li><li><a href=3D'security.html'>Securit=
y</a></li><li><a href=3D'learn.html#books'>Books</a></li><li><a href=3D'tha=
nks.html'>Thanks</a></li><li><a href=3D'http://www.apache.org/foundation/sp=
onsorship.html'>Sponsorship</a></li><li><a href=3D'faq.html'>FAQ</a></li><l=
i><a href=3D'search.html'>Search</a></li>
                                        </ul>
                                    </div><div class=3D'col-3'>
                                        <h1>Socialize</h1><ul>
                                            <li><a href=3D'mailing-lists.ht=
ml'>Discuss on the mailing-list</a></li><li><a href=3D'groovy-weekly.html'>=
Groovy newsletter</a></li><li><a href=3D'https://twitter.com/ApacheGroovy'>=
Groovy on Twitter</a></li><li><a href=3D'events.html'>Events and conference=
s</a></li><li><a href=3D'https://github.com/apache/groovy'>Source code on G=
itHub</a></li><li><a href=3D'reporting-issues.html'>Report issues in Jira</=
a></li><li><a href=3D'http://stackoverflow.com/questions/tagged/groovy'>Sta=
ck Overflow questions</a></li><li><a href=3D'http://groovycommunity.com/'>S=
lack Community</a></li>
                                        </ul>
                                    </div><div class=3D'col-right'>
                                        <p>
                                            The Groovy programming language=
 is supported by the <a href=3D'http://www.apache.org'>Apache Software Foun=
dation</a> and the Groovy community
                                        </p><img src=3D'img/xasf_logo.png.p=
agespeed.ic.oYGxdP6oSc.png' title=3D'The Apache Software Foundation' alt=3D=
'The Apache Software Foundation' class=3D'img-responsive'/>
                                    </div>
                                </div><div class=3D'clearfix'>&copy; 2003-2=
020 the Apache Groovy project &mdash; Groovy is Open Source, <a href=3D'htt=
p://www.apache.org/licenses/LICENSE-2.0.html'>Apache 2 License</a></div>
                            </div>
                        </footer></div>
                </div>
            </div>
        </div>
    </div><script src=3D'js/vendor/jquery-1.10.2.min.js.pagespeed.jm.ZzSiN_=
5Whq.js' defer></script><script defer>//<![CDATA[
(function(e){function a(h){return new RegExp("(^|\\s+)"+h+"(\\s+|$)")}var d=
,f,g;if("classList"in document.documentElement){d=3Dfunction(h,i){return h.=
classList.contains(i)};f=3Dfunction(h,i){h.classList.add(i)};g=3Dfunction(h=
,i){h.classList.remove(i)}}else{d=3Dfunction(h,i){return a(i).test(h.classN=
ame)};f=3Dfunction(h,i){if(!d(h,i)){h.className=3Dh.className+" "+i}};g=3Df=
unction(h,i){h.className=3Dh.className.replace(a(i)," ")}}function b(i,j){v=
ar h=3Dd(i,j)?g:f;h(i,j)}var c=3D{hasClass:d,addClass:f,removeClass:g,toggl=
eClass:b,has:d,add:f,remove:g,toggle:b};if(typeof define=3D=3D=3D"function"=
&&define.amd){define(c)}else{e.classie=3Dc}})(window);
//]]></script><script src=3D'js/vendor/bootstrap.js.pagespeed.jm.7UrlRp6BLf=
.js' defer></script><script src=3D'js/vendor/sidebarEffects.js.pagespeed.ce=
.qR2PnBxvrx.js' defer></script><script src=3D'js/vendor/modernizr-2.6.2.min=
.js.pagespeed.jm.HFGCZXAk6a.js' defer></script><script defer>//<![CDATA[
(function(){var e;var d=3Dfunction(){};var b=3D["assert","clear","count","d=
ebug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd=
","info","log","markTimeline","profile","profileEnd","table","time","timeEn=
d","timeStamp","trace","warn"];var c=3Db.length;var a=3D(window.console=3Dw=
indow.console||{});while(c--){e=3Db[c];if(!a[e]){a[e]=3Dd}}}());
//]]></script><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=
=3Dr;i[r]=3Di[r]||function(){(i[r].q=3Di[r].q||[]).push(arguments)},i[r].l=
=3D1*new Date();a=3Ds.createElement(o),m=3Ds.getElementsByTagName(o)[0];a.a=
sync=3D1;a.src=3Dg;m.parentNode.insertBefore(a,m)})(window,document,'script=
','//www.google-analytics.com/analytics.js','ga');ga('create','UA-257558-10=
','auto');ga('send','pageview');</script>
</body></html>
------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://groovy-lang.org/css/A.style.css+docstyle.css,Mcc.B-ao3BXXcM.css.pagespeed.cf.gMlSLLlVQu.css

@charset "utf-8";

@import url("https://fonts.googleapis.com/css?family=3DSource+Code+Pro:500,=
700|Open+Sans:400,600");

html, code, kbd, pre, samp { text-size-adjust: 100%; }

html, body { height: 100%; }

p, ul, pre, h1, h2, h3, h4, h5, h6, h7, h8 { margin: 1em 0px; }

p { display: block; }

h1, h2, h3, h4, h5, h6, h7, h8 { font-weight: bold; }

pre { border-radius: 0px; font-size: 14px; border: 0px !important; }

.navbar { margin-bottom: 0px; padding-right: 110px; }

.navbar .container { margin: 10px; }

.navbar-default a { text-decoration: none; color: rgb(192, 211, 219) !impor=
tant; font-size: 18px !important; }

.navbar-default, .navbar-static-top { background-color: rgb(40, 107, 134); =
border: 0px; }

a.navbar-brand { color: rgb(255, 255, 255) !important; font-size: 19px !imp=
ortant; }

.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .a=
ctive > a:hover, .navbar-default .navbar-nav > .active > a:focus { backgrou=
nd-color: transparent; color: rgb(255, 255, 255); }

.navbar-nav > li.active > a { color: rgb(255, 255, 255) !important; }

.navbar-nav > li > a:hover { background-color: rgb(219, 72, 0) !important; =
color: rgb(255, 255, 255) !important; }

.navbar-nav > li > a { color: rgb(192, 211, 219); }

.navbar-default .navbar-toggle .icon-bar { background-color: rgb(255, 255, =
255); }

.navbar-default .navbar-toggle:hover, .navbar-default .navbar-toggle:focus =
{ background-color: rgb(219, 72, 0); }

@media (min-width: 768px) {
  .container { width: auto; }
}

@media (max-width: 999px) {
  .doc-embed { width: 100% !important; }
  #fork-me { display: none; }
  .navbar { padding-right: 0px; }
}

#band { background: 50% 30% no-repeat rgb(66, 152, 184); height: 400px; }

.svg #band { background-image: url("http://groovy-lang.org/img/groovy-logo-=
white.svg"); }

.no-svg #band { background-image: url("http://groovy-lang.org/img/xgroovy-l=
ogo-white.png.pagespeed.ic.LDNk0ZyTNs.webp"); }

@media (max-width: 1010px) {
  #band { background-size: 90%; height: 300px; }
}

@media (max-width: 690px) {
  #band { background-size: 80%; height: 200px; }
}

@media (max-width: 475px) {
  #band { background-size: 70%; height: 100px; }
}

#they-use-groovy { width: 100%; background-color: rgb(219, 72, 0); margin-b=
ottom: 20px; text-align: center; }

#they-use-groovy .item { text-align: center; color: rgb(255, 255, 255); }

#logos-holder { display: inline-block; padding: 0px; margin: 0px; text-alig=
n: center; }

#logos-holder .logo { padding: 0px; margin: 0px; display: inline-block; wid=
th: 105px; height: 87px; background-size: 95%; background-repeat: no-repeat=
; background-position: 50% 50%; }

@media (min-width: 330px) {
  #logos-holder { width: 320px; }
}

@media (min-width: 475px) {
  #logos-holder { width: 420px; }
}

@media (min-width: 690px) {
  #logos-holder { width: 630px; }
}

@media (min-width: 1010px) {
  #logos-holder { width: 940px; }
}

.centered { text-align: center; }

.event-img { margin: -20px -20px 20px; background-repeat: no-repeat; backgr=
ound-position: 50% top; height: 180px; }

.event-logo { height: 180px; float: right; }

@media (max-width: 1010px) {
  .event-logo { }
}

@media (max-width: 690px) {
  .event-logo { height: 60px; }
}

@media (max-width: 475px) {
  .event-logo { display: none; }
}

article .content time { font-weight: bold; }

.doc-embed { border-width: 0px 1px 0px 0px; border-top-style: initial; bord=
er-bottom-style: initial; border-left-style: initial; border-top-color: ini=
tial; border-bottom-color: initial; border-left-color: initial; border-imag=
e: initial; border-right-style: solid; border-right-color: rgb(231, 231, 23=
1); width: 88%; height: 100vh; min-height: 100%; }

.download-table { width: 100%; text-align: center; }

.download-table td { width: 20%; }

#mc-embedded-subscribe { width: 200px; font-weight: bold; }

#mc-embedded-subscribe:hover { background-color: rgb(242, 242, 242); font-w=
eight: bold; }

#footer .colset-3-footer .col-1 h1, #footer .colset-3-footer .col-2 h1, #fo=
oter .colset-3-footer .col-3 h1 { font-size: 15px !important; }

.anchor-link::before { content: " # "; color: rgb(211, 211, 211); }

.anchor-link:hover::before { color: rgb(255, 165, 0); }

code, kbd, pre, samp { font-family: "Source Code Pro", Consolas, Monaco, "B=
itstream Vera Sans Mono", "Courier New", Courier, monospace; }

#contribute-btn { position: absolute; right: 15px; }

@media (max-width: 767px) {
  #contribute-btn { width: 100%; position: relative; margin-top: 30px; righ=
t: 0px; }
  #contribute-btn button { width: 100%; right: 15px; }
}

@media (min-width: 1200px) {
  #contribute-btn { top: 25px; right: 15px; }
}

#big-download-button { float: right; font-size: 20px; padding: 10px; margin=
: 6px 0px 6px 12px; border: 2px solid rgb(219, 72, 0); border-radius: 6px; =
background-color: rgb(219, 72, 0); color: rgb(255, 255, 255); }

#big-download-button:hover { background-color: rgb(230, 230, 230); color: r=
gb(219, 72, 0); }

.colset-3-footer .col-1, .colset-3-footer .col-2, .colset-3-footer .col-3 {=
 min-width: 180px; float: left; }

.colset-3-footer .col-3 { min-width: 220px; }

.colset-3-article article { float: left; }

.col1, .col2 { min-width: 300px; float: left; }

@media (max-width: 988px) {
  .col1, .col2 { max-width: 98%; width: 98% !important; }
  .colset-3-article article { max-width: 98%; width: 98% !important; }
}

body, html { font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, =
sans-serif; padding: 0px; margin: 0px; color: rgb(52, 52, 55); line-height:=
 25px; font-weight: normal; font-size: 14px; }

a { color: rgb(219, 72, 0); text-decoration: underline; }

a:hover { color: rgb(219, 72, 0); text-decoration: none; }

h1 { font-size: 2.125em; margin: 0.67em 0px; }

h2 { font-size: 1.6875em; font-weight: bold; }

h3, #toctitle, .sidebarblock > .content > .title { font-size: 1.375em; font=
-weight: bold; }

h4 { font-size: 1.125em; font-weight: bold; }

h5 { font-size: 1.125em; font-weight: bold; color: rgb(219, 72, 0); }

h6 { font-size: 1.08em; font-weight: normal; color: rgb(219, 72, 0); }

h7 { font-weight: bold; color: rgb(36, 95, 120); }

h8 { color: rgb(36, 95, 120); }

#footer { background: rgb(242, 242, 242); text-align: center; font-size: 14=
px; padding: 20px 0px 30px; margin-top: 30px; color: rgb(170, 170, 170); }

#footer .col-right { float: right; width: 300px; text-align: right; padding=
-top: 10px; }

#footer .colset-3-footer { color: rgb(34, 34, 34); font-size: 14px; }

#footer .colset-3-footer::before, #footer .colset-3-footer::after { content=
: " "; display: table; }

#footer .colset-3-footer::after { clear: both; }

#footer .colset-3-footer .col-1, #footer .colset-3-footer .col-2, #footer .=
colset-3-footer .col-3 { width: 18%; padding: 20px 3% 30px 0px; float: left=
; text-align: left; }

#footer .colset-3-footer .col-3 { width: 24%; }

#footer .colset-3-footer .col-1 h1, #footer .colset-3-footer .col-2 h1, #fo=
oter .colset-3-footer .col-3 h1 { font-weight: 600; font-size: 15px; line-h=
eight: 30px; margin: 0px; }

#footer .colset-3-footer .col-1 ul, #footer .colset-3-footer .col-2 ul, #fo=
oter .colset-3-footer .col-3 ul { list-style-type: none; margin: 0px; paddi=
ng: 0px; }

#footer .colset-3-footer .col-1 ul li, #footer .colset-3-footer .col-2 ul l=
i, #footer .colset-3-footer .col-3 ul li { margin: 0px; padding: 0px; }

#footer .colset-3-footer .col-1 ul li a, #footer .colset-3-footer .col-2 ul=
 li a, #footer .colset-3-footer .col-3 ul li a { color: rgb(52, 52, 55); te=
xt-decoration: none; }

#footer .colset-3-footer .col-1 ul li a:hover, #footer .colset-3-footer .co=
l-2 ul li a:hover, #footer .colset-3-footer .col-3 ul li a:hover { text-dec=
oration: underline; }

#footer .second a { color: rgb(219, 72, 0); }

.row { position: relative; max-width: 1400px; margin: 0px auto; padding: 0p=
x 5%; }

.row::before, .row::after { content: " "; display: table; }

.row::after { clear: both; }

.band { background: rgb(66, 152, 184); height: 400px; margin-bottom: 20px; =
color: rgb(255, 255, 255); }

.band .item { text-align: center; }

.band .item::before, .band .item::after { content: " "; display: table; }

.band .item::after { clear: both; }

#content { background: rgb(255, 255, 255); }

#content .row::before, #content .row::after { content: " "; display: table;=
 }

#content .row::after { clear: both; }

#content .row > h1 { font-size: 34px; line-height: 40px; font-weight: 200; =
text-align: center; margin: 0px; padding: 20px 0px; }

#content hr.row, #content hr.divider { border-width: 1px 0px 0px; border-st=
yle: solid none none; border-right-color: initial; border-bottom-color: ini=
tial; border-left-color: initial; border-image: initial; border-top-color: =
rgb(238, 238, 238); margin: 40px 5% 0px; }

#content hr.divider { margin: 40px 0px 30px; }

#content .colset-2-its::before, #content .colset-2-its::after { content: " =
"; display: table; }

#content .colset-2-its::after { clear: both; }

#content .colset-2-its > h1 { padding-bottom: 15px; margin-top: 15px; margi=
n-bottom: 0px; }

#content .colset-2-its > p { margin-top: 0px; padding-bottom: 5px; text-ali=
gn: center; color: rgb(34, 34, 34); font-size: 15px; }

#content .colset-2-its .col1, #content .colset-2-its .col2 { float: left; w=
idth: 48%; padding-right: 1%; padding-left: 1%; }

#content .colset-2-its .col2 { padding-left: 1%; padding-right: 1%; }

#content .colset-2-its article { padding: 10px 0px; }

#content .colset-2-its article::before, #content .colset-2-its article::aft=
er { content: " "; display: table; }

#content .colset-2-its article::after { clear: both; }

#content .colset-2-its article .icon { display: block; width: 80px; height:=
 80px; background-image: url("/img/xicons-colset-2-its.png.pagespeed.ic.4Cv=
LxTOi7T.webp"); float: left; margin-top: 12px; margin-right: 15px; }

#content .colset-2-its article .icon.icon-1 { background-position: 0px 0px;=
 }

#content .colset-2-its article .icon.icon-2 { background-position: 0px -80p=
x; }

#content .colset-2-its article .icon.icon-3 { background-position: 0px -160=
px; }

#content .colset-2-its article .icon.icon-4 { background-position: 0px -240=
px; }

#content .colset-2-its article .icon.icon-5 { background-position: 0px -320=
px; }

#content .colset-2-its article .icon.icon-6 { background-position: 0px -400=
px; }

#content .colset-2-its article > h1 { font-size: 19px; font-weight: 600; ma=
rgin-bottom: 0px; line-height: 30px; }

#content .colset-2-its article p { margin: 0px; line-height: 24px; font-siz=
e: 14px; }

#content .colset-3-article { padding-top: 30px; padding-bottom: 30px; }

#content .colset-3-article > h1 { font-size: 24px; }

#content .colset-3-article div.content { padding: 20px 20px 5px; }

#content .colset-3-article article { float: left; width: 29%; margin: 10px =
2%; box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 0px 1px inset; }

#content .colset-3-article article .img { margin: -20px -20px 20px; backgro=
und-position: center top; height: 180px; }

#content .colset-3-article article h1 { margin: 0px; font-size: 18px; font-=
weight: normal; line-height: 25px; }

#content .colset-3-article article h1 a { color: rgb(52, 52, 55); cursor: p=
ointer; }

#content .colset-3-article article h1 a:hover { color: rgb(70, 165, 200); }

#content .colset-3-article article p, #content .colset-3-article article ti=
me { font-size: 13px; }

#content .colset-3-article article .author a { color: rgb(219, 72, 0); }

#content .colset-3-article article:first-child { padding-left: 0px; }

#content .colset-3-article article:last-child { padding-right: 0px; }

#content.page-1 .row { padding-top: 10px; padding-bottom: 10px; }

#content.page-1 .row h1 { text-align: left; font-size: 36px; }

#content.page-1 .row article { font-size: 14px; }

#content.page-1 .row article .desc { font-size: 16px; }

#content.page-1 .row article h1 { margin: 0px; text-align: left; font-size:=
 26px; }

#content.page-1 .row article h2 { margin: 0px; }

#content.page-1 .row article h3 { font-weight: bold; }

#content.page-1 .row article pre { display: block; background: rgb(242, 242=
, 242); padding: 12px 20px; }

ul.nav-sidebar { margin: 20px 0px 0px; padding: 5px 0px; border: 1px solid =
rgb(238, 238, 238); list-style-type: none; }

ul.nav-sidebar li a { display: block; cursor: pointer; padding: 5px 10px; f=
ont-weight: 400; text-decoration: none; color: rgb(52, 52, 55); }

ul.nav-sidebar li.active a:hover, ul.nav-sidebar li a:hover { color: rgb(25=
5, 255, 255); background-color: rgb(219, 72, 0); }

ul.nav-sidebar li.active a { background-color: rgb(242, 242, 242); }

.table { margin: 20px 0px; }

.table thead tr th { padding: 10px; font-weight: normal; font-size: 18px; }

.table tbody tr td { vertical-align: top; font-size: 12px; padding: 10px; b=
order-top: 1px solid rgb(238, 238, 238); }

*, ::after, ::before { box-sizing: border-box; }

body { background: rgb(68, 68, 68); overflow: auto; }

html.noScroll { overflow: hidden; }

html.noScroll body, html.noScroll .st-container, html.noScroll .st-pusher, =
html.noScroll .st-content { overflow: hidden; }

.sign-in-fa-icon::before { font-family: FontAwesome; content: "=EF=82=90"; =
padding-right: 10px; }

.st-content { background: rgb(255, 255, 255); }

.st-content, .st-content-inner { position: relative; height: 100%; }

.st-container { position: relative; overflow: hidden; transition: margin 0.=
5s ease 0s, transform 0.5s ease 0s; }

.st-container.st-menu-open { margin: 10px -15px -10px 15px; }

.st-pusher { position: relative; left: 0px; z-index: 99; height: 100%; }

.st-pusher::after { position: absolute; top: 0px; right: 0px; width: 0px; h=
eight: 0px; background: rgba(0, 0, 0, 0.3); content: ""; opacity: 0; transi=
tion: opacity 0.5s ease 0s, width 0.1s ease 0.5s, height 0.1s ease 0.5s; }

.st-menu-open .st-pusher::after { width: 100%; height: 100%; opacity: 1; tr=
ansition: opacity 0.5s ease 0s; }

.st-menu { position: fixed; top: 0px; left: auto; z-index: 100; visibility:=
 hidden; width: 300px; height: 100%; background: rgb(66, 152, 184); transit=
ion: all 0.5s ease 0s; right: -600px; }

.st-menu::after { position: absolute; top: 0px; right: 0px; width: 100%; he=
ight: 100%; background: rgba(0, 0, 0, 0.2); content: ""; opacity: 1; transi=
tion: opacity 0.5s ease 0s; }

.st-menu-open .st-menu::after { width: 0px; height: 0px; opacity: 0; transi=
tion: opacity 0.5s ease 0s, width 0.1s ease 0.5s, height 0.1s ease 0.5s; }

.st-menu ul { margin: 0px; padding: 0px; list-style: none; }

.st-menu h2 { margin: 0px; padding: 1em; color: rgb(255, 255, 255); text-sh=
adow: rgba(0, 0, 0, 0.1) 0px 0px 1px; font-weight: 300; font-size: 2em; }

.st-menu ul li { display: block; }

.st-menu ul li a { display: block; position: relative; padding: 1em 1em 1em=
 45px; outline: 0px; box-shadow: rgba(0, 0, 0, 0.2) 0px -1px inset; color: =
rgb(243, 239, 224); text-shadow: rgba(255, 255, 255, 0.1) 0px 0px 1px; lett=
er-spacing: 1px; font-weight: 400; text-decoration: none; }

.st-menu ul li a span.fa { display: block; position: absolute; left: 12px; =
top: 17px; font-size: 20px; width: 30px; text-align: center; }

.st-menu ul li a span.fa.fa-tasks, .st-menu ul li a span.fa.fa-envelope { t=
op: 18px; font-size: 18px; }

.st-menu ul li:first-child a { box-shadow: rgba(0, 0, 0, 0.2) 0px -1px inse=
t, rgba(0, 0, 0, 0.2) 0px 1px inset; }

.st-menu ul li a:hover { background: rgba(0, 0, 0, 0.2); box-shadow: rgba(0=
, 0, 0, 0) 0px -1px inset; color: rgb(255, 255, 255); }

.st-effect-9 .st-pusher { transform-style: preserve-3d; }

.st-effect-9.st-menu-open .st-pusher { transform: translate3d(0px, 0px, -30=
0px); }

.st-effect-9.st-menu { right: -600px; opacity: 1; transform: translate3d(-1=
00%, 0px, 0px); }

.st-effect-9.st-menu-open .st-effect-9.st-menu { visibility: visible; right=
: -300px; }

.st-effect-9.st-menu::after { display: none; }

.presentations { margin-top: 30px; margin-bottom: 30px; }

.presentations img.screenshot { float: left; margin-right: 40px; margin-top=
: 1em; margin-bottom: 0px; width: 300px; height: auto; }

.presentations .metadata { display: table-cell; min-width: 328px; }

.presentations .title { margin-top: 1em !important; margin-bottom: 0.5em !i=
mportant; }

.presentations .speaker { color: rgb(36, 95, 120); margin-bottom: 0.5em; }

.presentations .summary { line-height: 1.3; }

.courses { margin-top: 30px; margin-bottom: 30px; }

.courses img.screenshot { float: left; margin-right: 40px; margin-top: 1em;=
 margin-bottom: 0px; width: 300px; height: auto; }

.courses .metadata { display: table-cell; min-width: 328px; }

.courses .title { margin-top: 1em !important; margin-bottom: 0.5em !importa=
nt; }

.courses .instructor { color: rgb(36, 95, 120); margin-bottom: 0.5em; }

.courses .description { line-height: 1.3; }

@media screen and (max-width: 767px) {
  .presentations .img.screenshot, .video .metadata { float: none; }
}

#content #toc { margin-bottom: 1.25em; padding: 1.25em; border-width: 0px; =
border-radius: 4px; }

#content #toc > :first-child { margin-top: 0px; }

#content #toc > :last-child { margin-bottom: 0px; }

#content #toc a { text-decoration: none; }

#content #toctitle { font-weight: bold; font-family: "Helvetica Neue", Helv=
etica, Helvetica, Arial, sans-serif; font-size: 1em; padding-left: 0.125em;=
 }

.admonitionblock td.content > .title { line-height: 1.4; color: rgb(219, 72=
, 0); font-weight: 300; margin-top: 0.2em; margin-bottom: 0.5em; }

.admonitionblock > table { border: 0px; background: 0px center; width: 100%=
; }

.admonitionblock > table td.icon { text-align: center; width: 80px; }

.admonitionblock > table td.icon img { max-width: none; }

.admonitionblock > table td.icon .title { font-weight: bold; text-transform=
: uppercase; }

.admonitionblock > table td.content { padding-left: 1.125em; padding-right:=
 1.25em; border-left: 1px solid rgb(221, 221, 221); color: rgb(111, 111, 11=
1); }

.admonitionblock > table td.content > :last-child > :last-child { margin-bo=
ttom: 0px; }

.admonitionblock td.icon [class^=3D"icon-"]::before { font-size: 2.5em; cur=
sor: default; }

.admonitionblock td.icon .icon-note::before { content: "=EF=81=9A"; color: =
rgb(66, 152, 184); }

.admonitionblock td.icon .icon-tip::before { content: "=EF=83=AB"; color: r=
gb(255, 228, 0); }

.admonitionblock td.icon .icon-warning::before { content: "=EF=81=B1"; colo=
r: rgb(255, 140, 0); }

.admonitionblock td.icon .icon-caution::before { content: "=EF=81=AD"; colo=
r: rgb(219, 72, 0); }

.admonitionblock td.icon .icon-important::before { content: "=EF=81=AA"; co=
lor: rgb(219, 72, 0); }

#content #toc ul { list-style-type: none; padding-left: 0.2em; }

.hdlist > table, .colist > table { border: 0px; background: 0px center; }

.hdlist > table > tbody > tr, .colist > table > tbody > tr { background: 0p=
x center; }

td.hdlist1 { padding-right: 0.8em; font-weight: bold; }

td.hdlist1, td.hdlist2 { vertical-align: top; }

.literalblock + .colist, .listingblock + .colist { margin-top: -0.5em; }

.colist > table tr > td:first-of-type { padding: 0px 0.8em; line-height: 1;=
 }

.colist > table tr > td:last-of-type { padding: 0.25em 0px; }

.conum { display: inline-block; background-color: rgb(34, 34, 34); border-r=
adius: 100px; text-align: center; width: 20px; height: 20px; font-size: 12p=
x; font-weight: bold; line-height: 20px; font-family: Arial, sans-serif; fo=
nt-style: normal; position: relative; top: -2px; letter-spacing: -1px; colo=
r: rgb(255, 255, 255) !important; }

.conum * { color: rgb(255, 255, 255) !important; }

.conum + b { display: none; }

.conum::after { content: attr(data-value); }

.conum:not([data-value]):empty { display: none; }
------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Source+Code+Pro:500,700|Open+Sans:400,600

@charset "utf-8";

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFWJ=
0bf8pkAp6a.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, =
U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFUZ=
0bf8pkAp6a.woff2") format("woff2"); unicode-range: U+400-45F, U+490-491, U+=
4B0-4B1, U+2116; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFWZ=
0bf8pkAp6a.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFVp=
0bf8pkAp6a.woff2") format("woff2"); unicode-range: U+370-3FF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFWp=
0bf8pkAp6a.woff2") format("woff2"); unicode-range: U+102-103, U+110-111, U+=
128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFW5=
0bf8pkAp6a.woff2") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00=
-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; =
}

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem8YaGs126MiZpBA-UFVZ=
0bf8pkAg.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, =
U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191=
, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOX-hpKKSTj5PW.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C=
88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOVuhpKKSTj5PW.woff2") format("woff2"); unicode-range: U+400-45F, U+490-491=
, U+4B0-4B1, U+2116; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOXuhpKKSTj5PW.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOUehpKKSTj5PW.woff2") format("woff2"); unicode-range: U+370-3FF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOXehpKKSTj5PW.woff2") format("woff2"); unicode-range: U+102-103, U+110-111=
, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOXOhpKKSTj5PW.woff2") format("woff2"); unicode-range: U+100-24F, U+259, U+=
1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7=
FF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 600=
; src: url("https://fonts.gstatic.com/s/opensans/v21/mem5YaGs126MiZpBA-UNir=
kOUuhpKKSTjw.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-1=
53, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+=
2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 500; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7PqtzsjDvucq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 500; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7PqtzsjDt-cq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 500; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7PqtzsjDsOcq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+370-3FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 500; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7PqtzsjDvOcq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF=
9, U+20AB; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 500; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7PqtzsjDvecq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 500; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7PqtzsjDs-cq7Gq0DA.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7Pqths7Dvucq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7Pqths7Dt-cq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7Pqths7DsOcq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+370-3FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7Pqths7DvOcq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF=
9, U+20AB; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7Pqths7Dvecq7Gq0DDzS.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; src: url("https://fonts.gstatic.com/s/sourcecodepro/v14/HI_XiYsKILx=
Rpg3hIP6sJ7fM7Pqths7Ds-cq7Gq0DA.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.css

@charset "utf-8";

.pln { color: rgb(0, 0, 0); }

@media screen {
  .str { color: rgb(0, 136, 0); }
  .kwd { color: rgb(0, 0, 136); }
  .com { color: rgb(136, 0, 0); }
  .typ { color: rgb(102, 0, 102); }
  .lit { color: rgb(0, 102, 102); }
  .pun, .opn, .clo { color: rgb(102, 102, 0); }
  .tag { color: rgb(0, 0, 136); }
  .atn { color: rgb(102, 0, 102); }
  .atv { color: rgb(0, 136, 0); }
  .dec, .var { color: rgb(102, 0, 102); }
  .fun { color: red; }
}

@media print, projection {
  .str { color: rgb(0, 102, 0); }
  .kwd { color: rgb(0, 0, 102); font-weight: 700; }
  .com { color: rgb(102, 0, 0); font-style: italic; }
  .typ { color: rgb(68, 0, 68); font-weight: 700; }
  .lit { color: rgb(0, 68, 68); }
  .pun, .opn, .clo { color: rgb(68, 68, 0); }
  .tag { color: rgb(0, 0, 102); font-weight: 700; }
  .atn { color: rgb(68, 0, 68); }
  .atv { color: rgb(0, 102, 0); }
}

pre.prettyprint { padding: 2px; border: 1px solid rgb(136, 136, 136); }

ol.linenums { margin-top: 0px; margin-bottom: 0px; }

li.L0, li.L1, li.L2, li.L3, li.L5, li.L6, li.L7, li.L8 { list-style-type: n=
one; }

li.L1, li.L3, li.L5, li.L7, li.L9 { background: rgb(238, 238, 238); }
------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: image/webp
Content-Transfer-Encoding: base64
Content-Location: http://groovy-lang.org/img/xhorizontal-github-ribbon.png.pagespeed.ic.y_r598YZtn.webp

UklGRpoVAABXRUJQVlA4TI4VAAAv0AANEI0oaNvIufkzxx9yKUT0fwJczWGAT5TLS5goSNuAiX/d
OxZCQdoGTP073WGz0P8EREVURRhh5mZmAKAqIszCzMR4FANp27T+bW/7JUTEBHA3l1cR9bdt25Jq
2/YtOykSYg2PMc7u8/xIV3zqrqPjtEUslNqnawiIylX/+ZIkWbVt27bUSoPeJzMz85xrfa4UrYys
hDCNmYxF38zMzIN6661G+LVtW3Us2rZy630MUShgLmam/2A0eZnLZ17LZf6BZTIzWMtk9tY30IQI
SSFp9NEbBEly4zZawkXJETwAdJCKXkB/2/7Djb2odyYTp27Qpu5Wa9u2bdu2j23bPmft2lirZoym
Ciad+aEzXR1vtm2btq1tWym1jzHPiax9TgRsx+f8tm1dNufsrUYwcNtI0TFfaekLCGiCEMiSpwJB
0RMCyp4QUPJ0JyGh+bpz5v8jNRRokMqH0LVCb3rD8O94DGFGhyYLy+ugLp6qyOacFJgwQ2OFwPpu
2+6dUgQOaNBQIXCNAKio+o0qX7rSljhvh3oREAm4wxkaKQSehgqAqBv2LeFLV5+blgAJgI5HODby
J/EsDCiAgJvk4aZHwA3Izr6QgETHf7GHxolPFH78Iu5bsQX/79xb2RfuJIPLwpbc6txXWMHtzi44
BtfJ3c59FbjZuSzsg1PnOrmnMslVcgh2wZ3OwrFwxjk5BOFOZx8cCtfJObkoDCaBXXDVGVwUNuyw
YQWnDhwL18k+GMAuOHV2wSnZB2FwWbjTWYHklBwL5+S+yu0OXBZuzhwKp879A3c6kzw48N/GCvYh
FnmdnPHoyL8nwgMD/28IrpPHRv7dgMdG/nZmH1xWcSzyfxMbnl7y5xMreHQUpy5vzsBTS/58Ijy9
Ev86y+vOA5X7Kn+5R/Lyitv/xkNomB6+vAn++r5knurf2eUNm8Old33mfNxcXOpK+2qX7hf7i41/
dZDTwsvL9qR+2kfHdXxYdu/u8iK82LrbpJzvt8etqHrXu2wNm+NF73SUMwXHbSvWaX/cL6P9enDa
5/rq8tLZZuN02B4ukt3QP+2yVdfHbe985HxeHbfGKt7pLt4tN4fN8LTPZ15eXDnTW6fd/rCO9quH
q7u0WB2vuuejej6ujpdKQ/90G++G4Hj5cNrLmebHG1u3T3fRfrXdXzxe3aZyfnHT2076+RDuL+LD
anT1OF51eXHzcLpjOy8P12bhX99Gu2VwuHo6Pc702cUDfzu3zvvNbr0/bD+7epgUs+PTRudbsZ1W
h61q7J+fRLtxeXjK56eHmTY/PnA1+7zb7lab/fXn1/9PmB2eOtz22nYIdtt0t3zcHkXV2eGZX2z/
aV9+Db+ERuk3Ny4W849fPdeY3l+LZZlPc1TVsHS26K3FRNNm9hpOlb2pXXgtxiZT7zYGyUztVVoW
szlZ9BpndXVmt5pVQ+d20WkxNpnTOw3bIjbZlfZaTuZkSX+NC6lMs1cVDStnO50WE800uw1RJTLZ
or0WE1Nb94xBKTVbUde4dLbxjLPVdc0xxNWds1O0G6e1tu42bIrUZCv6GhbTbOmucaFrmq1mq4Ym
r7AaZmZrutOwK2KTo6jVpdnV7TWuSkWzq7kS1jzMNSwmLbNdPRRHzS1Udam7erthHabZq+RKqHdK
vRpgarYaFcLb8ENokH64sfnFv8a9TOWBgEN8tMyxGDJdEnqkCWLT49co6Y9ddvGwmKSVHsvEeFGZ
x06XacAnzgY7HT7FpJswR9y0GKdNNwtk3EiWcegwXozhEWUXB4ePiz06rJPgRmUeh86YLBoeMevF
xRmfdtp4Y5tTXAzGceiwQOBEsoyHvUywcDjkEBeTX3HjEkTioGSaznCYxIxDQhiPVj7hxc6WJE50
fsXPztvxA2iMuLFp+4fWK6LogJI4elT2mICMjILGfjFQSFCR0XJCi0oUgxwlWUR0DjEQI4uIjJ4T
SjRO0cijkUagcYyODEAeY5yiRCVFSY6WFBGVOCoSlSwyeuIoKMkjyDBIAtpI8syTRUYnQUQgIsmj
kwAqzzx6ssjlmVNGQUaikQSUADyTSdRkiORo5AGFDADZO/G9xhj+gVdcRmGUfoBcACFwQzEqGUg1
BSlS1Q0D78J3oRHixhp/x6suozDOnwRIRbAMAAa5rtXkhgrSUqcQCaOAQaBeGHg3vtMI4+M/1UBB
AeDrgALI0wUB4DksKBcZCttWlIMbcgHxooXhuMHjBdGnoIFv4z1wf3Fjxcd/rIGCAoDh0IUc2hDl
TCj/ZjvFAH1CdttHhbZDAfKEbVs4PBDASw2KPJ0x+GYDRtp8/PsaJCjg6AYg5BxwZcAADOSnl5dU
vuk8CO3c4qDmcWjvGOVMkA8ebTtGAAqbNxGsMQdqx0aUgBVAAHjfRVFV64EILwYoT44nFM4naYIS
sCggaAxAeZhAxDC14FLdAJ2pWgjKCXjMRDT/cMoAAYT/uyEDss4sFYUcF5fdWIVQWFORwsXLCQZF
D/1PU5aU8ykrTggApzQAtD1ZIUo4cnerpsbcX5cWWH4l+foAAGBG7SUT3Tmv2oi7fnXXD+eXh2FB
AFEgZ83Nz7ycXwDAp60LUJr2HIEjXexEunTrdBixD7zmqRcEgwIUA1DRaNizPzsdcHP/hAuQf4cH
h+c1wfytjY9l+tJp/3Z4GEqHLn41RaF0UcceNsWQV/aacA1i6JW+4cqB1Qxx9Gq+5H8Z21bIqNdt
oAG3sbj9sQTFGfmBEwxKwhYDiEFRsvFKDv3YZMOtGDGAfwECUkZu+jmrQDEuGCm9QoiCrkRi48Ar
Jv0ba/TXzeYlpE27+3UiP2Oo90rZWnIz/xdupgqoq/TqlRaVxAUZOtRyXAOvzdIgAAGMRrX6zxBQ
gLbgt0qpnByEf8c/8bmWeKgxpqWykRKOD3aiI0x9GfrXgEEIxDATRTN6laV0QmkWQmVjWhlGcwBE
gRB5wy0tVDCLJmSR819s1gsg2oNYL9lYF67QxXeif/+TuNr2O/er2TOfTuA0NNqArdrWkWGsfI/c
CfxVkWF0y691LsfaB7lbuGGpnNPmNOQVz0RQAHzVkRSWGB6WZLCDjKiMDnyPkNfun6wWI6l0TUEP
Ekmyej2gvj35AKEz8dxftEnYeX89YnL7N7oE/zRj6QVQxNgZJaU8f/XxGpY4jfVvCC+p1yMUEWKT
9xAXv6B28W8hexPo75NknHVdxeWhoHzn4fI98Wi1p+OZfAiaNnd468Fk0sa+NAllUGKmgKs1L85J
Y3a47hkPCllJTj6oMN4Fz/QN4ZHnRmZAtF7rgBVg8jThS+KalzrfoUXcMChpkF2rD2k3TDywE53n
P6NUefDp9XtB/pmWtEo0nj7R+0MnOzRvXKWn3htbtz6+d+q8EWxAJBid4hJgUwAhQp2OTXBLhvbM
PrPNSAyOjEmnsb0Oyns31whSO52odMB6vOkgVyero44rd/+1SoQo1G6Ihj1XhPVocVHQIJNnzg/R
Xmh9b8yei8DSPfDImP92cZecakPNaops8D8IWgnlgReQMp8b8zmvPT4N4Y5OIbP71VpKaK+IYe1Y
pR+3bqI8/mA8eWPnAn6MT4yC1gawOFZ4TVI3hiDXmU92vbFStG9P3VzbN24DDheFs+OJJqcf++6s
aStiHChoIiCV9a80zeZNGf0Sksg2Ats2jEZ0kdcZBECOQzt/kjPSn7v/T4WPJoKMiz/FqIJkVTja
BMdu/yMVixCAVr1hW6a3vbRL1WWiklgIkiDR+/iD/wIRYp0+qAeR8VHgQBpn6QhQQOgCEtRXqZJm
HPh21ArwtVHp1olEt2IRcTwqY166FiNER6NUqPpbTWBMo14ebBMRu1rKVdEgC4d+E7qMq77l9EvE
tZJopS0htgdHe1FJ11CwlkRrcDJDJoD+6yxi1qyLsQYCkQY6UWWQLXj1tbj9rGiVER56Sh9iUV/i
bUgrxtSeqTBSU5sSn5oKlgtBlRiCf6Aea5CwnBwa7BnaXDrnUdUGLYPqCBJ2WOLrY7wncwacLpUx
rALmLDu9kz3hSyfTTmGYneQauL3wIwYQAAJw/y7TGYwrmFAEorBZzVQZemDYWMtOAu8/+DjBvlKf
NUxbdUfTSlzMnIkyw2haxcsb6MW3NVUeLchGmPoEtmrqTvlEzqnH0gnqueURZc2lK52YdJwfPWWJ
GUEEim0eUnmaRVnPrMQ9tC/d/xCDToTxKsSL+7Auhv2X75sOoIMDFywPpMSlMn5z8eHMOnk49Okq
OSceLEPncYN/wH84/BvQZTwbGzaMgioDIRWeIKBD1EK8DQdo8DRbp4f9fTnMCj679cFBr6YjoJWh
1vfH8EZ4+4AA+NyKzm6tj3HUuk/VtWh1Y9mzK2bGbLp9uqTWCYA11/bx+7vUnJcYTXrjG/iv1mbh
MOInDwBQvJZxHdMFGvwzXWhe0ZNt/co/fneIg47Ay6dH57ZcyEv2mZ0LIc8vTnf96GF+HYn9pLov
DZXZOZMuV3yJfwJuNxXu3GUU9mCUF1JnHQGML19EqH/FdwDWuP0lWbOWIPi/zC8Pl/gv/pu8MiLf
0v6wpEv0F+8CNPtf7nkT/dm3363YBr6/97mYkf0ZPyx6Tk3x0eOv+AK/R6EuaSt5unBZ7W/4Q34Y
8BbtVwdVvI0/QeC2cL1slxpsrtTQfwS9tfvlcGouTl+6KGm0NNIIaBLU3rHuzRacoC9JUy+D5Bd8
n4U7LorFd/gZP6MoYCH37/KVAb/FqwGKs5LLW0rDKQaDwYahjZTCaFIgBwApFY8UABhsBHIUhplK
cgBYCAsh5MzJ5lxjUuBgQPHIg8pDjYVBCiFB+WJaYGRhudYA8CF8Ha4WXx7wa7wWoNYFgFQPuRhs
SsP2woCfQOVSyDOjauZBSjMBRhmMECiWAoBBSiGRUmDVd7tS2uFq4SP46rVcfGmgX+F1FRx1f6WQ
vFK8pcjPxS9lhBSpCECJqLSUy13IWimxpQOPVO1+6VJB4BYGgI/iK9dR8cWBfonXQ4XqRkFKY3ZS
0SsRMkhVdUklJoGKelcwlmpxga8gRjUGIXAT4eP40jVMfLHiF3hjNfsVKS3lrwKgnOEL2SCMQo9R
XEhptnnejzAKsxuBTAFKIAMABU8lggpPRCBToFCSU/YkkBHIPHtSkiOQKYEAyGg+gS9CbT19of7a
z+zeLDmgLwZZjriR7NJCy4kEjzw77Aj2KLGTZU+HPFtaMUiI0k2WDQ5KoqTxk7GJP2Q2GLETZ5c+
OQFO9EQ5jkHSrNOFbBHpkBAuQzJCLFrLcewYJUkwulGyI8lwiceKUfKEGHESEY6nJFkPN3r2Y5+n
xKyWIRBG0CPKki+SZE07FntCvswpAb0oCckYJWLFU9Ksh4mbHSFf5kQQHz2bRHyeAwGjyATR6Geb
DZ8lJogTK+E45IscEjKABMCIHTteLDFrWnhLSMRny4EQf9EJRp7HbLNnGN+n8Pm69vvP16mfxr3F
i8oUJ30+YKbLgV3cdHi32PTHPBI3rXzCTS+fMOiQEODFz7vYdBMQLy52PuClmwlqPGCeDn7eYafD
Lod0aOfD8OJnhogbhSndePmAHZeIbXys5ePoxM2KHC+C2egvTsajFTenrEcvZn6lEycBaXxgRi9O
Jhi4ORGmH51JvDisE9OLzJRBLGZDTydR1uNhUZjh4mTNKcOkzBlGzwoFP8esxygyC1ychESMErPI
ACNLBAN2WY/HJWcRF48VxzwmYjmGi54lgoclJORpycYCG39ZjihfZpsVw2gsMfs0PlfPvv5s+Xb9
NOutI7NRfUsnj/pbJcuLmeNVJ3T1YfHPwuRx2moNIQPNbXiJmxfap4Y4IxONH+iah3lT1Xgw7da4
ZNDkVV9WXDk0zdciYuBsNL4VXW1Qf99CZOiUtBzTd/aLV412fTjnoNWGoWNrDa8aejMNmn9tlWU4
93ItPyhDRz+vW1nmwZx2a7NkOAd71X9a9pz7tenaHHmwV9f4ymI09758tzam1nc8rdXYMJqdU/lH
m55jzxTsLrbiYXaG4Z9rPbL39Y/rUjX1t0O2W75bq6ft1hEvd5edue/NabfbLAwv5rZV/VuXj911
tFlXqTaYvViLl7vt59tjV75aN94c/Dke13rc8ml70qr8dd08bU88U7DbHniYnbqGv+5uvjo/dOof
d9eGY3e7z9bqbesvtsdW8ffdg9F26zlvd5tAfTF3evUPu6d9t/3XNs92V3Km/hzkbvGyy6/moZU3
68afved4WuuJxdPcGpU/rwdfzSPbtF7bSB/aKWv8azff+u+hz+AbdYzPhPbke7u9Jpowhb6VlXSn
pFOQUigTRrlOG0FUb40UszxgTNFW3+h2kQytnkVMMZvD0hKMtK6STrHWvMeYUOW+bo2TaK2eICrG
zNvSmsgi6hArTvNO6kKVp9IgEnb9FFEY0w/SJBFGPSdVLPOh1CaQslRyFE79KEVF00+lwVFYq2eT
mWqaI6mRo9aFiBWr+VQilMlM18RR2M0JUtHqsa6KBLMuyVW9dpJSKIi6QrJKy5yQK2pzJhWRFC1z
PmRVrSUyFxKjLpOrupbKXEEXUpCuYs6cS7kGsbVM5lDRZ5ZhDcp5Ssu8glTNTMhd1bYph/2QnZrQ
c8Gu6ucpRxxGeTrLMl8V1K1JOCyU00kij2O+Tcq0fCWHqs293Ddx7yK9PigXU34ZHJOf/g5PaixY
8enn8vUd50F950H215lvH/jUU1gj37zlxY3y7Cb/04nfnvjkFefOd+94dS0eWcif77k5iw8v5c3G
zw68ueGeynfueLAqr13kfznypzNvXwA/3vPEKJ5eyl8euNXFOxfyzsyvjzy34MGRH+1BvHsh/37i
b42XluyDX9xzUcTLa/mre06dV9Zcdf5w4qGBx0d+cQ/i1bX818S/G4+P3Fv47QnEKyv5myODp0c2
/HUivLDktycQzy7k/xr/79wTPDzwp/O/PMk/nYEHK/vgnw3E0wv5lzPw6MCtzp0OPD7w9wbisUH+
swH74N7Cf2cQjw7yXw24p3CdnBJ4qPKfGcn9lf/PANxbuNXh7IkVbAncV7jZgUNwSgAugrt5XgMo
ECABgH1wnWeqs9gF5yx4YmFznougo2M+Cw0dM05oFw0jBlQUVNTzdgQKAnHDdy0K/2y/AVkF3PWA
N4dDPncwn79CR0fHdGlm8rwvCgIV5SzE2S7jl0K4pQqv5zT6RRVk+XWQ579FYkYW/q4SC4FyPh6e
v6tlyFtnBKCY9Pug3iFC5HNDFteQ6NWxIko694qG/Hd7L+iOlUPCecvZXSncigYoxV3L51rZU6Fe
zVV1aBfCu3E7r100AMR5w/nzxkEUX+Wolft7luBOHahhAAj4txKyaVE8LRNEaXujSvsfoDII+HfX
cyg3PG//vxMA

------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl----
Content-Type: image/webp
Content-Transfer-Encoding: base64
Content-Location: http://groovy-lang.org/img/xasf_logo.png.pagespeed.ic.30Usdcamcb.webp

UklGRvYvAABXRUJQVlA4TOovAAAvrIErEI04aCPJkVTd87H2+QO++Awi+j8BAA23vxBdt+T5/KHe
UigOMoUyEkXJCyAhTdJQMSLIc1EdqWbgyADYRFxk6CKeUuNhjBp6BkU2qJK1uVn+OIEk27aqZrUp
msx/XA4H1yQ3jsZ1Bm4jSVKkvHvmY3n9t+yZxYkJx5Fku0nfuBKC8o/q4eW9l4D+TwAARESLP1ci
yihCCH/Tl0YWlMBf95XxjhcVRClawJDuEG9WiPPOvrMbTpwFaPGSrsHde7ReNItmAVhXOgBRTozK
yKpJsVu3+AJA9GWJaAuUdkWstKWk1JTeK6FZSVESJVACpQWwXyPfGwGwAkED8A6Cs5pLpDMrQGAv
AGgS9n0dEcDTHIrQ/HtYekl7QnjhhWJz9JKEl4QHWnc4nzX89674HPCSEIoAoBACUBQvCefJOVv8
vT38I0VB2zZMwp/2/ghExAQAKOP+UFkAnDEYVn4wLz+xS5Ot2pGkb50rJfQw0z/mF2DOVLbNszJk
1rsMMzNUpXT3Mqtce59z9sm80h0yurVtq9qbue8VlqBUNagY3f8ZC3Bu/alaMDN9RZhqccYc4ffu
9mTbtmtHkCTNdR8AEVHOuWoXtAcM2v8W0DJXs5Iw/Lcp4P+/Pone/21099g8bLH77O7u7q5TSulS
KSm7O+m09ZTDsyXF7kI6pdnGXxIkSXLbqOTbu6gBSAB7Dfi2rW3bIUnW/f6Z1bNs2zZ2175t2/aZ
6DSs7XUOtm1VZXzX9ccfkTlZvRB7nmvbVm1bsq1c+gYDBSxZ1EKmBWpgJ27nKGAcIy2YUQRmVoGZ
mc3c99pz7VE917at2pZsW7n0Ofdem8xCzhxlZpCAmVkRN1dkmzwui0eNzeasHoABINhG/78nTVJ3
1r3vbFvnu9m2bdu2beNs27Y92+yyNksLCZLktg2WFoYH4HDKIMTgNwTwsfG5V3y93FRzq5pN5J7s
SPHM1T5YjHTYRCp1VX8l3UPuRCiF6a3r7ZxrO9hA+vRfPx9MWgIEAAlI4MU614mwedTOQxxKDp4C
kgiCsGo610GwcZQex5AyeEoTiAAgCDsPXevBphGyrLixg2AoFCCfwpbR9PidAFhWYkgkIIA24atz
nQDbRf968gwiK0kEZK4uMB42i5CN8wAWMsYQMxQkIBT+d6cMbBUV/wCAscgCCLpTgETrdIONotp+
LgAAjAnRwSkEQUaoC9tE+AXWUuU8wiCgE4BACdgkavUXLJIFAP+EQkMBADRAKAhbRN/84wdH/n7v
9pCGrAgg72qB5IANIkR+9WRnf/y/RQIojFn4P47NaSyABoRhgwj/Hibp+/+dP912e5FZyebEGEpi
LAgx2B761Oe+MUo2AoS7D6vECRAAQNmI1BYNAAAwQWLadAgR2Bz62Ge/lnf/4FwGALgzt+5WaQAB
FJuTjig0pqAbgykA12Bz6JNf+ObNWBoAQMh8WMX3DJn4DA1gTCCCCX1NzsPW0Md//es/WIVEEAMA
t+fGvZQTgmlat+NVAMEAAEBMSf9LNE7CxtBHfvnb6Um3BDBBIgYQe5gClbiypq1eQcIynKBFSezO
Pyb2T2L/Strv8jVsC33oF78tnHp92HeACVpUcztu3Ue/4VZoEoAItKx/c/0yqf+a9MukXZJxSNIl
kUoKBPBvPoVNoQ/9/I8hdSnECYgB0QKYFsjMVv2u+fWQ2FUiEwlXBC6TUaQlAQgAACkBAOBr2BR6
5pu+/GJSQcC8AokEuPbo7uzjE8LCN7Ap9L6f/LlDzuYUBOmlfQ3k+WZncowJYo7GhVdgS+idP/5r
gZx9SzRQSAQiiEngal3vV9w/vJ4HJnEUpnkKtoSe8eavfEv5BRBNL4UgYbeH2um1kGvoMxEwK3Gx
ozgCG0Lv+Mlf50knAiWilwUAyeFm77RjP8TACLCsTktPCvYPL69CrensBiIAAJwcoZQDEBh1A4CE
Uq4ZEMETlLf+6B+V5ekSEB0SMUEC9w57N+3GeYgkYhLABIFIrLmedn/ylGD/8PI6IbiNFgAAgDQ5
ACcAAAgKsAT/AQAAwjEEQwEAAGAWkopUOAexHTxBeeobv/ZzkRqIEqIhMZCIQYsdA9ExEYwAiUTJ
hCDRAftPOibi9y+/001PFuALKr+GujMDk9/gTC0o1VUZSCABdTP4fs/AQBsAkJiAJyhv/OE/99OD
mgoCmhKSJhKDN9tuC9qD8yUEkAjGAek0ElCF6VAsOzniP7q8igtF+L3ZCGqUgicqr/v+v2s52ywI
QDUdIEjzu/s3Qvd69OJYrEgAiWEtTdDLYEJvF/7CX6fHnACe3Lzm69+/osYSAQBzvYga3tYHt789
fI6cShUAESEVgggQAqAWUrQ5yz6OsEvZAwBSIsx6Dxjf+roQMgAga1yGBjw1edXXvv/EE194+Vwq
SQBJKKBAoG4isa3PtJYkAkSZAYggiUAIDa7j6XNEDzXOAQCGvWGwgD8EAKDbZI9m8MTk5V/9Xskn
vvD6VakyU1BFQErkkIrNijY9o0IgSAAKANQhg1QDogCJsofOEj60MLiURTBGdx74iq7gScrLvvaD
u+2cCUpKgqQAKETg06trFW/oLFWEiEI0HSICsmgi1QhSot2+vF2fPE/80C/lBgM6EMCTlBd/9fuL
H//Cy/dTISCCpBSIUODy0aP4i/v7hJ3W9XYDjG6IBgqFiWqwGfTCr/0gz2Off3kn9bAAUKCXEpLM
c92HXFy7iPxDnxXBCCWiQ3LlarfXznMHIECoNfXtO7RLZUEAAKAUE8GTkud/9Qc3MTvRLRUAIEBF
EQqvpDNptsweBqhCZjjcXQrfqrBTDmkVvUHKOfW+1JSKhbxqpLJTm0sHF+rBk5LnfuX77R7z/Ms/
kUCUDoOryb3xrl5I/R0lCCCKgCUUNASKn/DfrYobhwYGuLxWEt9xCjw9efaXf5D7Uc+/Hkl1EynD
y6JXr1xH0v6cP1UvhkR6RpYgSogWRQXYDHrWV3747MVpPxAQKUM9pbZCrS61+qoSFIQpifQmCyiA
ZlprYDPoJ759HXC/N3zu9F38pyIRCyhEP7dWpD04N1PNZ7ckUogQMYIGivMYCZtBTXdp1O27X73o
tSSABfz1/99KuOXFj+5T74IABUBApAyJDEBK4jSAzaAf/vrVNTGhRMm625YcIWKAyout1bnx+HEk
eSRFgQoBAIGiMCMUT+MYbAX9wNd/NDsPYecgpU7uaFf3XksWgQIgEEMwp4dSL0GhL0oQiUQqRCQg
ECh0DW1hM8joImgBKCl3TXLKsClu1qe1baf0pG4KQAECgHHrnASEaI1gM+gHvv7jAEwDABS4w3bl
xvlvMpAqAWIItnRJPUFARACIEiy3zok2Bv4fFZMHeo1S1B4gi2/ov8UJNu7VsncEEhDEpl+4H3bO
ySARBGkSAQAkWgy/UQex1ZgEnp5w24dzFy/xFROQ87kva9A0XbdsKxBCGAC4o1297ZEnaJAYQhft
YOiVCEYYjgNLBBCw6Vh27nvye7ekAeDtc9Lfe066V+3d5RuCQbJZyDURLWAKb1+bJBAAANOHUX/3
rX8Ip3lpS7JAqiQCiGjRqds4Kqh3uL39+FUaAABQ4ozQ371MSoD1wCEFc1B0rnc3vxlITmgN7USE
Cjz38hodwWSwprhlGAYBYADu3mItwQAD9/ZR6kgQ06KnDkwiMUBZJfwBv7+/bPwTv9KeG8qCGoBA
HdTvPYQRy3FhhxJykjPSySj17vlyeR4xqIMOACAZhsdgHp99NOEfEL45LY1wQP+BBcpTx8/at5Rk
o97vffQn0xOVAACgbmEK2E8479Bxw6BTkA/5pBXiddzq9Q2jUCJaIQqLIUJIutyr+zPdw3Awl7LX
ypQpUzBAAMDtul+/bXIhhtAFzySdE8ESYHZd9tTdH916Ifatu8d7kr7JsbmRfHY711Iu8QQHAhEa
tWGv1z1mpSYkYh6YRqb93+JTA7RWR/NuoijHSfu1j/6svyesKSnqtqpMFMaI9OgP0JIa3Hi+MDYU
hLl4BeaCHpRFiE2ZMkoAAirZd+2eHevc9M0upwJoWIOg2bO/ZtfVTv8dTSRPEGDp3FCwsZRDHfaC
Q5GOpsbse1vgTt3AGYNJQwi/+eE73c8+2vtgK7S3DLxCFoz8muv1+Xff/ZsCfMLQYPgAAPmCXWgd
PgPkNrNGyVRd/AxzicHADLdxv4Y8t88LoX0iCIKGFrh0SfiK0IH0S+Wv3EMoxCpCOE0QBAlb7amR
vH1Wf7SvG0i6g2OBbiSXPU6Z5nQbQBjcwQxe5NN12EOy2Qi2N0oAny6sEgCAxWE2JIM7gOXcH1fu
j4+eRnPKRNO2D76+w8NzfdLlieRDQpXsIjwlY0oC4oKG+cUBLYIgSAONq8g7NZRl3Af6MRl8BwcD
++1CqNet6gRQDVOwn3cfbioG7bNCz3fv/mUg+NiAuGvuxHiSBZKYO0IhRQQygnw2A1cxDswEN3Bq
NQgGEFCvhZZijAAAglmQw/xqYcOxbWosGNILuD46TVBsaUZQsG4CITBAW8zA7P4vN9u+P10aGGAh
4sBepBkwGCggFrfwPiv/YVb+Jz/8X9P3+yS0Rz83MFgtOzvRAzMxtpeBAac/+MiA0Jzekcn2iula
ak34Fpr5BfqpEPYTcPfldCTfpv1gJgf3RkeiqO5N//X/b350m5e+yIAUWAMIGqChN2yYtjxnPYvD
Z7c7NTBAOFT7Hdvo1dY3/Q074T84SW0CLbqeAwXkog/YSdC9F8DtjH24uyKkLUdubxBhBj4y8HLe
O+mFc5tF3dtF0FzG2MIeTV1kV3v/30r6kTCm3ULtXF5Cq7G7lQVmBhxAX5gJ5gMAQOIKAADg7PIB
h9GuT8bP7r7l1g1Q2jYpvEImAABgM8JgBABo+5ihap8+zLsN4GF2G9Z+BwDApZZc8LUzSCrAJwpG
sAm3rnMwxaumjaidema3PXokDFtbvKKiCAEwcLxCgGI4CRN59/rGwQQAgGJERLgCAEBq2JETSlFe
d0yrgE1KqdmlXIZFcAazAADqOqbPuD2HRncSv7ZZ4b/+hRP1Anyi4C4Wzvb886O3fpiErD+mRTye
SLrA4sWhBKsQvkE9OKdiFAsAADgOaCKsAQComNBa3v9uRBXKNwghP3N2lhY7+jbkSxQCAFAPgz3m
rKDWhFJc3i6WEVdrQi0ywUUE2bYGhZIqa1DWH/tSESQCnATVrRAuwBn1O7dvWmVq/T/1QwA0iX5k
twEAgA0EB9IwrE8cSOu5QQi7AAAAfTKUKABB9of/xFywb7t4OtG1JtSAPWTl97k3LyL4EMBYA2Qg
sWxFajIArMLiS5N9gIZwTt16SoUAAFBXoAFgsXAAAGCX8BkcyLOzzaUcCpG/7pNaAAAAwe+2jxQt
IO5sTdgZAADKYLVZWz9eQcuUnsIYtas1nW02uIQUrQ1jgBIyG4o5WJjcXdnTetF+rF6WeNYZ6XfP
JpMmll4lAMA3+SSXswUAAFovB3AkCCvlMjqu2iAenwAAIOaW4SIAIEIFGQAgT38hf6N0eteMhtre
BnuJNr+Uw2uUgMsHXgMwZoBCrx6wO0gpG5jaBQCnwOReCkfhnMqcJZAAAJIv5eKDDwAAkDnrUQUO
5ObkX8plmoG61cgAACDirCaFBgAQY4fxDwAAX9Bho3TG8lIOejlON7AbMR4AkDUAAnqAy8fFS3Ue
BvcA45CzsrddDXbuGSd9VDFAxmLEgJl84b0v4prtAwBIpgEAAGwCAAAER8GRJCmlXOC5ahPlAgAA
uF+GElJhAACANhudQzfDSSo1YSfegL2gdWMSSEJjywMXkdu8vC8pQcAKIIp486Djs4A5Jbi0jTgJ
prLbvcgwy/NPXgAAANLJKsuOlhh3fLsWg9dk/iPJxGIAALjvl1kAAADwE88AAJAmYZuU0ZRaU2vA
LrAb3IFAx9EELiL3fE6XpBcBsgJ4FW0kHckA4rgBk3G7VVejd1NzMbS8BABQtWgcUkDNLgIAADzB
kdS7Is1wxeVr8S+tgHohBKlQAACIcG1zsi3G57rU3wNNAN/BheQur9srlFuBNbi6l9weVbi1fwDg
KODF2TVp6UMW02EoMQxM5BvvfciH6gAAse2LKD5nHVoAABjTQgEOpC6bDnRWXLABAADasKaTQEop
F7u+G4ShxpDa4Yrb4NHgwe/5cZMcY2YLATIAPkQD/IZKII4t+NjkGdnvCE/MhHpuiutiEAAA/lgO
C6FCGQAALI4HOJCM2lIux6RjlWAqrD8cfFzvNTLzAwCAiJsbhPG0Nq+xBDwe3O2522EqPNACJlpG
d3IcB4AjoDJyVBxMAwDYnLF/Ziiff/8rwWQpAEDRfSUO+14MAADYBA4kMCjlNM1YBbvLpWKgYV/n
y1rpDPm6cNOEWpNTOng0eOhnflg0zipgyAII4BssVfvS+gIsYKV66U2aGstt917Dod10/L4SB9JQ
++E/B1vAcdTGwLhf83z9qlN2A5YPPPALOQAAEBW66ovKul5QS31ElqLd/fV7lkoRWIIC1vBwxemy
BuAUQC2M5sZS2QQAUBmF2JEtSADEVnAcdWnTA/VDk5u7L9EAAIBnQxFtPQAAiBVtMFrtmq1pClp4
gceDuz3nABBYATtnMVQNV6sZGOGIa3sKFE4N5RvvfagaygAAZPauRoLF5VAvdAZHQW1ru2A8Owvj
AQAgw3Mo8vn4mFPKhU1aE8aaWu/Cb/Bo8H2Xjlm1FUKg3w4wPbhMxA+pL2ZiBHMMeHTD27mxmDEA
APjiyGce3gEAQKTj4CgiRpZyyZGhibQehgAA/ET6eIQicQcAgFDsmjC3otaEavBooOZTMrGIBYAF
bbJ6qI7AgGCOQpYSBXND+eJ7noVlIADA1XVpfiSWxK0M74GjyHAr5SJOD00QCAAAOD2U6ywgrIwd
oVr1LzVlug0eDb73000hCwBiBwFlgKoZ+Cx5lXKBZgErrvG8zXskmp5dL2FubsJ9xg6bCbvzwS0A
WC34UDEEd6694BgWZ0jQpdSUW/XIZBnvrT7UDBCwYoeKctLJ2D1WQRbmlJqCm+Aw5sww/rSSNi46
qgEKACyAdY3qqHHAKAOsuU7GIi3CAQsxdG4sZgoAQNHr6KOHBAAAwApwDEucLuVa5jE8Yjdxv8wD
WNVrznQAAAgmNJRDEyRjc6kpeQqOQxov/dri8tnL59eaxo5Zv4s7a8+0KgjIwjpwDOnYKSIJsgQ8
iUPpbLXKENCsg5ZRvBhRgkEYABAI36mhfPW9z5pKfgDA3eN7Of1XvjqVBpg2GBzBjeNXSkNE6FAF
3QAAIAlf9Vvy+FHKLbFpaILjyq/UxL6A44AuWoED2dfEQkdwDN//sXNRggYRHQSZodTpsu7tajcQ
RoAGxIppqJetMz5MjKXrfDRvnzCTW+5CYogBB3DjTK99v5kFDVU0H0gAAHiLV+vnSs0PAADgNTRB
QJ22HEkDHgtoGYgionTQMbvBaczadzailkIY0AwvDmWtO+Tjr6mhfOOVv0zFowAA/3i0zifEg0gA
AECr+DsZmA6McLXeowzPKae+SCMCAACA7dygiABoAACQqJUjEXghGDwqPPTjPythhQQwAHUATVAn
jLDVx9eSjmShAQWIIAJAGd7nRAA0stszNRTU3k6HyzjnlgmKuI4aGAEAiYeisADMJZry5O2gNKds
ACaxKYYy4e5aB6i3WOILOgEAhMtQBHVVGn/AFD6tmcDQAYfQ6vmSBLMC4vII7xiWbAQAAoLAMD/J
DKABZASJU0PBqjJ7F46bjFS42A0AEHONW9iqu2SWJ6whrO9lkoYZMruUW8SETsIwdWTU9RMz/03y
jekLHwAA6Hkat/1IpKaXzd5/HfiFJ4nj/jVeEIO47Tcv7zFb0N5jCxU4god97GcJpgYUQMSAGID7
KGzO6b9KqSEExRBDIgIEURhAPZkbS8Z2GAMAUII7m4xaHAPgy19yN3XrPfaiDLCPdMzHEssgL3cb
tnOb9PARFTAHAEQKHYnUSWDJLOSDw1BVM+bEoXG7EKrAx4adOhZmOAwsDczVi5TDKd/u7EQAdcIo
sIDRNSMHwDymhoLT+AEAABuzi6IsuR4xDQAQo2v//q8b4ACCdysW8AEAgMx5unGaaHIi8AQADLMY
sJ+lXKbDSAWPAllPE2IBDYCYgX2IBvhealZ01wrMQIihLGa/GH49j6aGct6PvqUcHDY6BeHiAQAA
ZGYzv/maKX/5/+3OisbbN/5qENk/AACgNm5UhFeghhQAkClo4NHO62Mpp4qxDTwGPPwjv8pJ/3MB
DgwAI6DfHq6lIn3/UJSFZtciSBlg4RpA4jE1FFQgCwAAcHOrFP6H5sMhVOmzZ5mh1m7y2pQM1MVo
HAAAgM3rE5GFAQCAYNVAA/WpilJTow14DKipY9HACsjdyS25dZYk04YxToKISAoQsQSFOjM1FPQv
l2xM2fmmzZgLJoK85EiQvJ6CHqlBdKkpMnGXLRQx7mEDhciiqwgawSOAnbWGZZyA1MwHF+GdnHML
qcOXJpAUogQRMQAhkPFgbigImOKWOKBik8x51GPTYyuzU28bq8QI6IEJhHNyYICkUi7xQCG4/Dz0
/b/NEVW2CGYBgkWQXKqcs18XYxwC0CnR7YPr2Fs098ekRSr/7P2RTS5J7bTbemSmUiaOkQIAwNnJ
qDUhFFx+msoaPYk5CQbq9CR6pB1HsfFLM7EEEVFAAXZubiiNPpPskpFoAQeStn6C3cpdMGrwf6kp
6QYuP5VhFs0MQxGy7/Kd/wV//qrvBW7nfk8LwLiQ8WiVhCJSUgCqSkyNBG/rfTy27Rh1y2gd7C0T
2fE/OA6Uwa/O60UehO1t4DKqgBkDD7WjlMMDvAUXnzAQLCCM7qAD/kRF7otkJgxjHA0IUBKgkLG7
1CXPpE2NRNe1lMNPHN4h1tw6taZkDjgOBNRblKggqPd0dpRe+mRar/E+J7vWlLUBXHoe/t7flSMM
wJzNaToasY8bUQ0wA5ChwtKN614Us6fe3dcBf+a7xwxNKkR4AgAADuATOIyMNfWFsOcHqLk+IuIz
l9APAWSsqsti8RFceDj1htZgAGhALqFAdS+fzp9jd+AAQABAkMgM+Bf5zjOft3KqAw+u6F09biK4
rqSDEzgKRCOj1PRf3k3ctfAXiagvv7STSe8Rig3Ol5pUJJhAw2LhO+uPD+BiYXp3mwXGXTzYdgyT
37WKAjQAvaoxnpoXhEIS4m//+X8IG855R9DYGFdqYgeh2vemR37pUMQWcBSNeXWYZuci7ZqC7DQl
D/ZGMrvUlIkZXV3hSsJsgEJdHxSDCwU16rlFDKuAQKlAjguzdRjjEIAlgPUCKp51Tgr3y3WMHLSj
O+XO2bCTvpfFBzgGjgE/kVhq0m3bKdc4VMphFDPsPXKQRFwoNYU9AruJbaaUUvZIm9pdpidhPuzD
36nuCgGLxbAQZp6ONBNkNYAGNAMM2ucMUTE3jQ1YrEtZ/4wfe+UW969ymUObw+ZXlWEf1CFppxuq
6ispY9lA5JxjClmpaff1Ob77fB2UHRLhAi4TUX1wMYALAZqqVnh9mDUaoav6w2/SRiN9biQqoJRL
Ldsrh5aUX6kJHuAYlvKBpNz/77bLiCjlIh37wiUZiNxsgbV9kcOffbLQ1O600C5woTBNLaSDhZD5
javVxrfjl+aAg/8ukjB3biA5WYm5pabG8916CCmXUky+91lroHdAcrcvmLPbDs9q8p3n3rp3JqPB
mugx2CVb72thEFuPi/UvxNIthotuxmLMqryetBDMCcAKoZgcyFJLSjkETxh8rWl/br07CI4ge3qX
m6IZN/8ZG0o5KWYkcv8/KUzqBtBuu+n94w+tuuQdRo7gQvHgj347d+2kEiAWowOIA3k1u7oCjADN
Aso2vvy5RbvZeeMRCbp5abt5yD2tJuQCR7C4L5ZyKf8Jfq3XrdoxCbuRSTy4rLt0IuieQ5+Nojex
CcZ1A6IHuFRc/OZjD7iOWlyBGSyCfYCGbLjTFgYGWOz8WwQym42UyYHQdEjLTdyMQXSUlK53mIXm
gwNAt1Izbk3wQx1OlJrU5qHKyW3SbQDWIdc2Mt8w1iBm9wuWAi1wsciD2wPtP08ipErtsBhACINW
eF07j4Ji2K0eVt3IfBE4OxDhUcplTZ04fIMQMB+cLv8bcVMMW86uuie+kGyokq7mfpgHixGTcXic
EinOKcxmh0727/xUObhcVKeau6dhl6iFlKMcrhgACJTVzulbYOAoqLNYOzuOqNZl0TDEmD5MUcSx
crzQ/n4zBNPB0lLuPM+OKYYorPmlno8tGKoooZ0Khs3sJC4iBV8yKlkDxEAbJiRX48XyUTqciCzw
sXE7OeyfkKWe4wmYhktVFmr/fh4FwyDVUQ5XqhZgbs52YSAjFrDsLlMsFoHZxJhvKZcpYFKu8LoK
/NkoFcwmGFmud0ib1O2WMbmUQ9BYBSIatfSdwwjqHPjoCA5MaGLBD0yDilg8eYg3UehgqY5yL40j
6WTnDMD4RhaaEXSHD5jaUk4A0MB/kmNjfZdedDbBrVJO7ZvkmPWytqwzBq/ZJN6o2JGPOTmKD+CS
8ch3/6RIRjYSyj9ezawdFgAwp1C0jn5hLwTOLGCozsSM+UicH0em7TV16bTZPHhe+ni/8d/3jmAu
Z7dBmUaAP7g+SRLNJdUNCFzW76lSC9Cw0TJjL/zBZeL7Xn016PIuVaeOQTLa7ZKIzJJemQ3Ae/Q5
Hui2QGiWIJr5anPEvMiwTaWcbuwcy0HXe7QQMJeTE1Obj9Msw7zLIDjmnUtr3YeltWqPV+tZofA6
rU/IF1wqULdUaFmnClFVw4VhBXd/fyXTQkrKMV2Xrw/nrcwLz+4CAAgmWJTq0tzZBGgAAPn9j60n
T1TLPZtMuVABAFA7L70o4jMuZkR/SUbKf979pAsAACD1Q6V+OKBJ/W7VTNqZ6jNFAwCg53QCzALq
TGczRX9Jptibu6ZtEIKIwpjpMCvaEGlVv8CDvUgusehwavB2Y49xqlncRMOUFG4AgNQN2G5Iy5ck
kzmYw4xs/63zOrnUj3rHL34AALDKWYjFyP0l2WS6sNhexq3U+mQMaFahrB5eAABA/Pyjx5NX7QEU
Yz6YDFZiyQfqaDMeYNYcUzRPb71j/YfAsAjJm63+xf+Eb5g/1FPaEVKI0CRNu2bGoR5LwSw2fQIS
bAUfDdA0uqLGo97xi4sPffsvEgFMQWKxWKy43d9fyQwsdsZBnBNaUYDEAkCbPdlKZAAATj/8qHtE
NncH/ATXAXhX84nJf/FY+iPf8cvCEPIaBhBL7i+p5USJm5PTdSmza/+I+SbBCACsn7Jw2DC6+eH7
x8QmEYPF4Fqg7tfIQFy2U49+/ucpJldGMMPuby8iLtOQtWNjaFrCDFt2uJmzVYd7a4ZRz+2vP1sT
ESosEyCAqwFEq7OdQL2oX00aGBnEMHJ/yeFXH14D5gFJg6DCIv/ho2oH8CkAwP5PHyobdZJpwggw
0voiB1wPYJiJWqgEcnfOJiMwVxHN7aFxbpckO7E8u2R5dk3P7ZE8ebIl1+UnD+53tGglgBRWWj2I
tloQGCBgB+AErgmqnjIMCwGjy/SE/V+fb9v/8dWQM5bhYCMQhcETI2B3MAlcFaAPxeYfOy0GmEy8
BaoIM9dlVgF3MRFcGYQ/DaIQg1jMX7A/tyEmrIABwyT/woBN2AauDYpRGcHw4/RhOkDb1gQWBgQY
HbodBEyrNr4HVwf4OHPbld7GoOs4AlaSK9mIkjVgh9ELUOZctSgE1wbWvzEZFlcy8Ca0J5e52eJi
Mko00A0dQL6trS3OQdJF9cOUo0K5WwZC9tdenq0Non2n/+/CMf5Xb1njqfBf71v20K59gsmb0gUY
6tWvNmKFJW3vqyPF60P3XzpuAQAAwK8cl96ro66dzuujXsk3/BlMIkgKhyMqd4sB2kMEAC1nbz+H
jzM5ee7etUVRvaWvJ+kWSLou4lGvY5P9Ymb/Sc54te1XnF6N711WvUXduT93XV4ck368+m4lv1t1
6eXunmoXGAAAoFr/KFp3S5vX67QfKNwtXSDrBJKSOrCaTtvFbYDXQ8HPTf+FerGK8bhPc5ncrXq/
WZ8lVeBuTX636g1mYXvfYomJyTjcbv13d5e4MIdYDAEljOjAXjpoxO//5MI9X6aOTh+01Qpe03/m
/IsvXPrPyYY9AACl7DzcehFmy0lHJwC+wZMK5cmR0ZhHcLfb+ylZeSkFub0OPMr6uvDQCXv1zJsB
AACAxe2+uN+8PqwuG3h9tCk4dpZZL8amLbqGEtiAAUF/pNd+cFzru3YgBK/6fPBb7p0XsqE9DhWA
xGLhIboAAFCZnB7sHRDkYnH3QIPgFXp1z6rB1ODKV1cpVSBwDR71csGVYFCpCaXJwfEEi59fzzrB
t8X9+afWi6x3CPL6L+ytHZQnj/MYMerMSA4GS2EOAMCrsyYNVl+dbFpYDu/+qwIhl7AcsJfvffJb
4ebXb82tI2TlvGUxLBbrODLyQKoVZzEIgAZKQLNwrdW5pqshPecjrDA5+QAh1CblTHN7j9TcIIFV
sUnpvOZu5CiwPvALctBn0P+Ok/CBdJSNDgqIADr4nvgHJwFIagAAAOA3SM+BZQNhGyCGOZYNBBvw
dDA6tGh/Kj0YhXG4N3wAV6pnUApSEmYSTKD9SQLm9fEkScE2SDbnwYAKQTg8ToDHJoVuoT41NchL
GkLyZHXINfQG3TY8HRctEAcimHm3mlQFBnP5oEEWpkACUrLANtkWCsCLYRLFl74GogANX+/Lxd4B
SkgAQCEuwAOAtNpOdHBqOyM98Q4dUxHsQlJIegs9cenEbyxA/CAwjHiz+M9KywfR8Dj4ho/7u4fJ
+/+duv7vpME0x/ofFIfBzkroHcyuNADddRUGig54EQ7h546HDErMxW0AAKafTa/zoK5BQml34BUc
wobg8eBgglT9eAk5CgFIdAFqUDToy2f34PjquCUAgLvj0Qa2qTnoUk+5WNYbNZRon7QJXYUvRg6N
z64SFAMAcACbcSxR4nc/urxjEAnCKDAAQNIudCv1GMMAAHiDHUE/ysRtTNo3crHo1pvFev3FViLD
CowP3cUprB+4YBuOYvdglKJooR5Fm2I48S86pPohGwCAm7DAbcQ1lIPf4jp2vlm6gkmgCG1xDiuq
8/V+bu7uTvZ+jhhguIJZu+tJuG1DDABj2FWbEVAiGDFNM7wN1yOoQapvPV6dB86iqGsj4gnbTpGp
dpOecpNaC8gYAECL8BEp0H51GIkHACyMg3bT/V7oRjfxCz/SgsOJSXebDU9RwHGwYIenYDYLJ1CO
YV3aB6zHqaTHrjGs97SBKpysrUL4F3vgccamn+1ztzhD53PCz85J6N2t/MBuUj0xujmrkF0NMAn1
i64PUuk9OAtQN/EDr2J1XWqbX/rOVEFGBr6DWBGjexq2FJgBSv8c5uHruxASXgXeqYPB0dGVP2WA
gfAeLakLvLF2zvO4g3xoghUAACzEVYDHi0WiPwAIYTn9vcxfIaAHGwIQi8pwRW6aP07q8YTrDWwJ
9T/QwjiEjxLDBn67xv1uJTZNRauvro5tzgkI8aQNfRaEwAkn0IyK5FyYI9hN2BJUDh6Bn9oR7B/Y
pHeq5vSGwZslE0wD36Pa5HQzV/uuipDZA9nmlaN2GBBAYQRcKZZiNVyf0BM3go14h8bEk6K713tY
F8CdOjBKvQpr3xsEIxACCQCgcRQ/th5OPA0iAPjJ48jQu+koSPmgMwAA9mxh7/M9ioVw9sgAgAXQ
3k1zHhtfeoVgdclMgPfouelig6kIHS2++Bp1BE2Jo1n4ZAd2gX9xBpverOZsXuqETp3A3TIado1I
AIIAmN8tI8FeMGh0xQleQuufTda/mtMBn1Pr0O9uWQ8mYV/WOuut7NaeojwESmoHtl7ermGd3gaU
o3ZYNNABMZzS5mE/XKswFWAe/EOh0E4m43b3ZkuX7kAI2oPrNzpjGQAAQshqs/jZ0ypo3R0PG/D1
HltQiG8gyIPBgylQEFLCqLledDZnTwLmJKugAQD7wPChzCe3PCgDADop12BTEjBoR+AL/ocAANjY
KEVvLAFg9MZfTG/gAJ29zxHCOrwNJb5aM9koBFl/nIMTySN8AgDf8D5IAXtJNY+edJ6Sjs88OIPs
4OSrdVmDGbQrmfJb9hzCGGKyzD1kE4I34IZVAYUAlAPqoJmpRUayH9fB8SABPQAqg2u1vfGF5YGw
pXDpbN46Qpg929+LJSd3fgRQfEEdhgHMw3kAUIGfeIVpqdSwjv2nxGs4LBzAdDQAADVSutmTg8YG
NInL6MGSyRWs2h4LBAQhfPz+xtnBfFn0wbnBa7jbACQrF4d/pze44TnYxF96SKHonqV8j/Et1XBB
HgAQ0QZnHlyme5OfB2mDyxAIG7nyhLimQQuNJ4pfL1pgP+HqF9s/No2WZuvw978viCDCiDNvQXXZ
A9ZU8+dhp6DrXuTwTIHfX4I3x++bX3EJtabk7+DTGUuUlXMpEgZ3a28sEryXD+iPw+5nc1E4wHDE
AACSLUEidFGXTEV69w4KVN2xg+SrN79zxIHe7wErlAFwcu8JueMY2Pu1KVScwyLoDR4o2hy3/o6z
exZYMhCsHG2okumw/9W1C5su7d/tOgX+y38PVZuXPmSjd/fxYfEJ9mAfSTwMw8LhWg3u0aXdSF8J
jNuKUxZOepAO9rKcD690fB4mXd14JONFZAGA9ZiB5yHWxaqw40mcxiVkwUfBQix3Qpn5jv6g/ADg
rE0nK6tLlgHbCmfsR90097S1aHt32IZG5AEA8DiofPCmf+OpPjHtDhkGBk9hlGoC4MtfcJXcB8ue
IAUAPMjzlgZcx7iVrzncO8a37uquVZ/OavjhTLd/AP7DloaytDxCaWhZS4WI64jAitT0DeKBM1Yn
Ht1ReumDOpkRupMI4Mtf2ITgBmlDvfM0lYSG3DG3Nqhv+QY1Rq8YoSJxDB3EbLCTh21Rbnug7qLM
vbaxxMxegL8rmO3tWIPpulSEm0Ro4cSimh1JJ4UZBY6Y0d+0oDyxDz6gkV1Ji0inLBgbhMIOZ+E8
zx3vUU2R5cYKVUED1ChGhz4DROpnlx6a+YZyzzZ43EKA2Gi1UBqMGCRcwbUz7pCWJuKEpknSJviG
5iQ+bM8DRSeNDkLRFnGDBOFYjKqFH+wUC713am+ZTeHQb9itOsIVn8K6jCSge6YjpGBBGoyENxQI
67IZvfT+Ei1rHjo13VK4tIOm5MLeVyg8KCaUgIKUS7P7gU04nsECaDVarX+QN7zf+9HR0DBqq9M0
V1z2AyALzcr5cVff7XYCcHMIi9AldZm8AAAIvvfRZ9D5d+O9IQUETuG8BSD1gw1AxsANelsW8kC2
1uyAFkuutxXBqcZwPKomi9nT+zRrlHbnZpSedB0W3e/L5QJlSTQ9SGxQsiaPoi1zC6G/2mXX0A98
Aw8AACtIhg4XIpw9yU/eDtEmzjcAkMemDVJcQgr6EzL0Bz/Q+8RHAABgz5J1/eMqX/oglr65sgou
2MEMUbd61QUAQAfS0RHB30FqEAMAYCEscJCrDDJA1GVraII2mIVVi7KGA4Lzf7c6Jqmua/JNs6sW
+jXTW7AkDQqGTy1ALZwBWkGWTtV4RnHSK61p1RVNKQX7s+LRmJhSnpVdBUje90GkDMMMB70RzdqG
jOoGkieJMn0uKSclLCHbM3+qCMSU7Wgx8jop+ZbUD0yZ0qaqlU+QgEas/1yy555sA2mziuEiCySl
FIu7uWwAlU1mqQ69CiZCCwAQtNz7VDlaSvrCN2z/wFPRYAd/nzc5SrpzZErJakfuqenDw48MKLjN
OKap5vFHxE2LTymh7vYK9MAk3C7dKVwuq8cHtjrV82BD4aYRGjakX11NiLvhGEJcvctHPQp2JVNA
XfdyQTMKuoMykEbRHtlJuTSgXtthaEBhFz2qULL2oQKgAp8sWfNcyfbk4mONysMGEorDch+3P/z/
R4bC9lGeXHtk4s2ctWvjbB9FayE8BRtKJrcr+Be2k+7w+KFzVjgzGTaUwg7DPAHbSbv/PYQzOS04
C5tJUOXZGptAdp8BG0rpnAbqKLieqPvHKXGXsY778fIHXE+YGgTtAlcU7bpsaY74niBwPbH78ydz
2KkS1vxMArieMBXswAlwRZGn5rnN+7/mDK4ndt//RGLdaubOdXBFwa2Gp3jqdXBFUXeGuc2/bQS4
oqj7+tTTcwk3wfWE7334gbqfuvkGrijc1dGNemoqXFHUveF16xp+h+uJ6UsfrWYlue9b2FAKnaHY
ABtKWIAW3ADXE/dfMkdH3ANXFDdsBCoWXFFgJsBpcEWBgcgAVxTtS6sAEsEVRbAapMWDKwr0xUt8
BdcT7UsDYWibBK4ocqT1l7/8XQIRXFHgEUTw/1QAAA==

------MultipartBoundary--pplq3aa2WiMU8rwh68DoCrVDkllJjc15un5CPe4KOl------
